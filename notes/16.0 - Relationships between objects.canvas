{
	"nodes":[
		{"type":"text","text":"aggregation","id":"a7908c5f58ccc04d","x":-495,"y":-16,"width":167,"height":50,"color":"5"},
		{"type":"text","text":"object composition","id":"aba07a2ce7c55258","x":-320,"y":-178,"width":208,"height":50,"color":"5"},
		{"type":"text","text":"To qualify as an **aggregation**, a whole object and its parts must have the following relationship:\n\n- The part (member) is part of the object (class)\n- The part (member) can (if desired) belong to more than one object (class) at a time\n- The part (member) does _not_ have its existence managed by the object (class)\n- The part (member) does not know about the existence of the object (class)","id":"4554e29abddad497","x":-1300,"y":-92,"width":770,"height":203},
		{"type":"text","text":"process of building complex objects from simpler ones","id":"dcde0e3c529e2368","x":-875,"y":-178,"width":480,"height":50},
		{"type":"text","text":"composition","id":"54f200f72c0f09de","x":-495,"y":390,"width":167,"height":50,"color":"5"},
		{"type":"text","text":"To qualify as a **composition**, an object and a part must have the following relationship:\n\n- The part (member) is part of the object (class)\n- The part (member) can only belong to one object (class) at a time\n- The part (member) has its existence managed by the object (class)\n- The part (member) does not know about the existence of the object (class) (**unidirectional** relationship)","id":"e9bec76eabc5bfd1","x":-1300,"y":302,"width":770,"height":225},
		{"type":"text","text":"- Typically use pointer or reference members that point to or reference objects that live outside the scope of the aggregate class\n- Not responsible for creating/destroying parts","id":"15ee429a9d5f8fe8","x":-1840,"y":-65,"width":463,"height":149},
		{"type":"text","text":"- Typically use normal member variables\n- Can use pointer members if the class handles object allocation/deallocation itself\n- Responsible for creation/destruction of parts","id":"51ad29ed5e02d13f","x":-1840,"y":348,"width":463,"height":135},
		{"type":"text","text":"structs and classes","id":"dea30fb6f231bc5b","x":-945,"y":600,"width":197,"height":50},
		{"type":"text","text":"**composite types**","id":"0ad606ecbcd23dfb","x":-710,"y":600,"width":180,"height":50,"color":"6"},
		{"type":"text","text":"objects may have a relationship with other objects of the same type","id":"af72e04e06094afd","x":839,"y":8,"width":340,"height":77},
		{"type":"text","text":"This can lead to a chain of associations (a course has a prerequisite, which has a prerequisite, etc…)","id":"37270967cacad6c8","x":839,"y":216,"width":340,"height":105},
		{"type":"text","text":"```cpp\n#include <string>\nclass Course\n{\nprivate:\n    std::string m_name;\n    const Course* m_prerequisite;\npublic:\n    Course(const std::string& name, const Course* prerequisite = nullptr)\n    : m_name{ name }, m_prerequisite{ prerequisite }{}\n};\n```","id":"821c74d240c5d7ea","x":1199,"y":8,"width":680,"height":313},
		{"type":"text","text":"**reflexive association**","id":"86698683bfe5d814","x":560,"y":21,"width":215,"height":50,"color":"5"},
		{"type":"text","text":"association","id":"d9a9a62c981e6e2d","x":599,"y":-178,"width":136,"height":50,"color":"5"},
		{"type":"text","text":"Object relationships","id":"4802639d1dfc3b89","x":76,"y":-600,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"Whole/part relationship type","id":"446ca68f4a699208","x":-355,"y":-287,"width":278,"height":50,"color":"2"},
		{"type":"text","text":"Otherwise unrelated relationship type","id":"bfb047ed17835f12","x":498,"y":-337,"width":337,"height":50,"color":"5"},
		{"type":"text","text":"**Reference containers**","id":"ddc90f9c6ea46213","x":326,"y":860,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"are compositions that store copies of the objects that they are holding (and thus are responsible for creating and destroying those copies).","id":"cfb939c6cdfd5078","x":-230,"y":960,"width":419,"height":105},
		{"type":"text","text":"are aggregations that store pointers or references to other objects (and thus are not responsible for creation or destruction of those objects).","id":"396d3607ece91e43","x":222,"y":960,"width":460,"height":105},
		{"type":"text","text":"is a class designed to hold and organize multiple instances of another type (either another class, or a fundamental type).","id":"21cf3f271aefc06f","x":424,"y":320,"width":515,"height":86},
		{"type":"text","text":"container class","id":"aa9bb9bb4c8a9147","x":112,"y":338,"width":178,"height":50,"color":"6"},
		{"type":"text","text":"Most well-defined containers will include functions that:\n- Create an empty container (via a constructor)\n- Insert a new object into the container\n- Remove an object from the container\n- Report the number of objects currently in the container\n- Empty the container of all objects\n- Provide access to the stored objects\n- Sort the elements (optional)","id":"d66b3902e908cde6","x":424,"y":440,"width":516,"height":303},
		{"type":"text","text":"**Types of containers**","id":"25885919adefbd7e","x":76,"y":480,"width":250,"height":60},
		{"type":"text","text":"Containers typically only hold one type of data","id":"80f9fc4088968247","x":557,"y":780,"width":250,"height":60},
		{"type":"text","text":"When initializing a container that has a list constructor:\n\n- Use brace initialization when intending to call the list constructor (e.g. because your initializers are element values)\n- Use direct initialization when intending to call a non-list constructor (e.g. because your initializers are not element values).","id":"0b4834bbe42673cb","x":1550,"y":496,"width":564,"height":191,"color":"4"},
		{"type":"text","text":"`<initializer_list>` header","id":"00916e896dfd2fdb","x":1105,"y":475,"width":284,"height":50,"color":"6"},
		{"type":"text","text":"std::initializer_list","id":"425b97ca93249fd0","x":1159,"y":565,"width":176,"height":53,"color":"6"},
		{"type":"text","text":"```cpp\nIntArray(std::initializer_list<int> list) // allow IntArray to be initialized via list initialization\n\t: IntArray(static_cast<int>(list.size())) // use delegating constructor to set up initial array\n{\n\t// Now initialize our array from the list\n\tint count{ 0 };\n\tfor (int element : list)\n\t{\n\t\tm_data[count] = element;\n\t\t++count;\n\t}\n}\n```","id":"17e68c5b22e99ad0","x":978,"y":665,"width":538,"height":340},
		{"type":"text","text":"**Value containers**","id":"ad6709466658a001","x":-146,"y":860,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Occurs when one object invokes another object’s functionality in order to accomplish some specific task. Dependencies typically are not members, the object being depended on is typically instantiated as needed, or passed into a function as a parameter.","id":"603ffd302b35eb00","x":-146,"y":-98,"width":445,"height":164},
		{"type":"text","text":"**dependency**","id":"e85c841fde1640eb","x":-10,"y":-178,"width":172,"height":50,"color":"5"},
		{"type":"text","text":"Unidirectional","id":"4128ca3f4a46bc08","x":-288,"y":270,"width":176,"height":50},
		{"type":"text","text":"parts can be singular or multiplicative.","id":"0e082c8eccb31d63","x":-875,"y":140,"width":353,"height":50},
		{"type":"text","text":"To qualify as an **association**, an object and another object must have the following relationship:\n\n- The associated object (member) is otherwise unrelated to the object (class)\n- The associated object (member) can belong to more than one object (class) at a time\n- The associated object (member) does _not_ have its existence managed by the object (class)\n- The associated object (member) may or may not know about the existence of the object (class)","id":"e6adaa15ed0986b2","x":779,"y":-249,"width":800,"height":193}
	],
	"edges":[
		{"id":"205cb658ffca1402","fromNode":"aba07a2ce7c55258","fromSide":"left","toNode":"dcde0e3c529e2368","toSide":"right","toEnd":"none","color":"6"},
		{"id":"3b19f7020eeff347","fromNode":"54f200f72c0f09de","fromSide":"bottom","toNode":"0ad606ecbcd23dfb","toSide":"right","color":"5"},
		{"id":"f223848710965c9a","fromNode":"0ad606ecbcd23dfb","fromSide":"left","toNode":"dea30fb6f231bc5b","toSide":"right","toEnd":"none"},
		{"id":"8a22177ed0185db9","fromNode":"54f200f72c0f09de","fromSide":"left","toNode":"e9bec76eabc5bfd1","toSide":"right","toEnd":"none","color":"6"},
		{"id":"b63723fb77c1cc6a","fromNode":"a7908c5f58ccc04d","fromSide":"left","toNode":"4554e29abddad497","toSide":"right","toEnd":"none","color":"6"},
		{"id":"cbaf7823cab0973b","fromNode":"e9bec76eabc5bfd1","fromSide":"left","toNode":"51ad29ed5e02d13f","toSide":"right","color":"6"},
		{"id":"927e4b155e42e496","fromNode":"4554e29abddad497","fromSide":"left","toNode":"15ee429a9d5f8fe8","toSide":"right","color":"6"},
		{"id":"74a1fbe6069f3323","fromNode":"bfb047ed17835f12","fromSide":"bottom","toNode":"d9a9a62c981e6e2d","toSide":"top","color":"5","label":"uses-a"},
		{"id":"198daecd5b60bf88","fromNode":"4802639d1dfc3b89","fromSide":"bottom","toNode":"446ca68f4a699208","toSide":"top","toEnd":"none","color":"2"},
		{"id":"90f7e34448568433","fromNode":"aba07a2ce7c55258","fromSide":"bottom","toNode":"a7908c5f58ccc04d","toSide":"right","color":"2","label":"has-a"},
		{"id":"7c176e1d5c9dc753","fromNode":"aba07a2ce7c55258","fromSide":"bottom","toNode":"54f200f72c0f09de","toSide":"right","color":"2","label":"part-of"},
		{"id":"86c2bf57a344dc43","fromNode":"54f200f72c0f09de","fromSide":"top","toNode":"0e082c8eccb31d63","toSide":"right","color":"6"},
		{"id":"540a8a5663e0cc1a","fromNode":"a7908c5f58ccc04d","fromSide":"bottom","toNode":"0e082c8eccb31d63","toSide":"right","color":"6"},
		{"id":"6adc601f10f3538b","fromNode":"d9a9a62c981e6e2d","fromSide":"right","toNode":"e6adaa15ed0986b2","toSide":"left","toEnd":"none","color":"6"},
		{"id":"28b6fee77ca55b4d","fromNode":"d9a9a62c981e6e2d","fromSide":"bottom","toNode":"86698683bfe5d814","toSide":"top","color":"5"},
		{"id":"b6b30f30a8707bc1","fromNode":"86698683bfe5d814","fromSide":"right","toNode":"af72e04e06094afd","toSide":"left","toEnd":"none","color":"6"},
		{"id":"3f47c939123baef7","fromNode":"af72e04e06094afd","fromSide":"bottom","toNode":"821c74d240c5d7ea","toSide":"left","color":"6"},
		{"id":"96e2e6f4cab2457a","fromNode":"af72e04e06094afd","fromSide":"bottom","toNode":"37270967cacad6c8","toSide":"top","color":"6"},
		{"id":"b1e27b90d8b1e1fe","fromNode":"a7908c5f58ccc04d","fromSide":"bottom","toNode":"4128ca3f4a46bc08","toSide":"left","color":"6"},
		{"id":"364a7cb4e25ba975","fromNode":"54f200f72c0f09de","fromSide":"top","toNode":"4128ca3f4a46bc08","toSide":"left","color":"6"},
		{"id":"cf779cda5bfa7a96","fromNode":"d9a9a62c981e6e2d","fromSide":"bottom","toNode":"4128ca3f4a46bc08","toSide":"right","color":"6","label":"or bidirectional"},
		{"id":"0a39f6c927951312","fromNode":"bfb047ed17835f12","fromSide":"bottom","toNode":"e85c841fde1640eb","toSide":"right","color":"5","label":"depends-on"},
		{"id":"dee87cbfc05b0c84","fromNode":"e85c841fde1640eb","fromSide":"bottom","toNode":"603ffd302b35eb00","toSide":"top","toEnd":"none","color":"6"},
		{"id":"826900658bb6e809","fromNode":"603ffd302b35eb00","fromSide":"bottom","toNode":"4128ca3f4a46bc08","toSide":"right","color":"6"},
		{"id":"16873ed24508e2b4","fromNode":"aa9bb9bb4c8a9147","fromSide":"right","toNode":"21cf3f271aefc06f","toSide":"left","toEnd":"none","color":"6"},
		{"id":"dd0f7227c67b7f0a","fromNode":"21cf3f271aefc06f","fromSide":"bottom","toNode":"d66b3902e908cde6","toSide":"top","color":"6"},
		{"id":"9094215a9fec4362","fromNode":"aa9bb9bb4c8a9147","fromSide":"bottom","toNode":"25885919adefbd7e","toSide":"top","color":"3"},
		{"id":"121387a7bead391c","fromNode":"25885919adefbd7e","fromSide":"bottom","toNode":"ad6709466658a001","toSide":"top","color":"3"},
		{"id":"cabaa522bf7f0d01","fromNode":"25885919adefbd7e","fromSide":"bottom","toNode":"ddc90f9c6ea46213","toSide":"top","color":"3"},
		{"id":"4e83a37da92cceca","fromNode":"ad6709466658a001","fromSide":"bottom","toNode":"cfb939c6cdfd5078","toSide":"top"},
		{"id":"711271a67dc8b6a3","fromNode":"ddc90f9c6ea46213","fromSide":"bottom","toNode":"396d3607ece91e43","toSide":"top"},
		{"id":"3201bd4abe27361a","fromNode":"d66b3902e908cde6","fromSide":"bottom","toNode":"80f9fc4088968247","toSide":"top","color":"6"},
		{"id":"27550f66ce1b1acb","fromNode":"446ca68f4a699208","fromSide":"bottom","toNode":"aba07a2ce7c55258","toSide":"top","color":"2"},
		{"id":"ec5bed9d55a830a3","fromNode":"4802639d1dfc3b89","fromSide":"bottom","toNode":"bfb047ed17835f12","toSide":"top","color":"5"},
		{"id":"ed58ab4656e07121","fromNode":"00916e896dfd2fdb","fromSide":"bottom","toNode":"425b97ca93249fd0","toSide":"top"},
		{"id":"7439eadfe5dc1999","fromNode":"425b97ca93249fd0","fromSide":"bottom","toNode":"17e68c5b22e99ad0","toSide":"top","toEnd":"none","color":"6"},
		{"id":"b147f9d17b97779b","fromNode":"d66b3902e908cde6","fromSide":"right","toNode":"425b97ca93249fd0","toSide":"left","color":"5"},
		{"id":"25d52028d431d6f0","fromNode":"0b4834bbe42673cb","fromSide":"left","toNode":"425b97ca93249fd0","toSide":"right","color":"4"},
		{"id":"39a08289f6db6df6","fromNode":"4802639d1dfc3b89","fromSide":"bottom","toNode":"aa9bb9bb4c8a9147","toSide":"top","color":"3"}
	]
}