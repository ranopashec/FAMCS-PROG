{
	"nodes":[
		{"type":"text","text":"execution path","id":"80a4c07dde84d0eb","x":-106,"y":-84,"width":206,"height":64,"color":"6"},
		{"type":"text","text":"control flow statements","id":"6b4e40a9f4ee80c7","x":-520,"y":420,"width":260,"height":60,"color":"6"},
		{"type":"text","text":"takes the same path (execute the same statements in the same order) every time that is run.","id":"32968ee913625c5a","x":-520,"y":260,"width":329,"height":120},
		{"type":"text","text":"straight-line program","id":"e62c1176a0c0cc3b","x":-481,"y":160,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"statements that allow the programmer to change the normal path of execution through the program","id":"319b894d77d2a664","x":-988,"y":301,"width":378,"height":119},
		{"type":"text","text":"branching","id":"68fbe362d95ed0e6","x":-1270,"y":428,"width":160,"height":52,"color":"6"},
		{"type":"text","text":"When a `control flow statement` causes point of execution to change to a non-sequential statement","id":"e3b9235a4b959090","x":-1360,"y":260,"width":340,"height":140},
		{"type":"text","text":"`switch`","id":"d3f8f8586a1fcd04","x":-1554,"y":987,"width":125,"height":57,"color":"5"},
		{"type":"text","text":"conditional statement","id":"b3fc68c3ae383ec9","x":-1616,"y":776,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"The specific sequence of statements that the CPU executes","id":"24ee1f57122bebb0","x":-128,"y":-240,"width":250,"height":104},
		{"type":"text","text":"Prefer `switch statements` over if-else chains when there is a choice.","id":"020eec7bde93f562","x":-1994,"y":1645,"width":293,"height":140,"color":"4"},
		{"type":"text","text":"if (condition)\n    true_statement;\nelse\n    false_statement;","id":"fe0c683898e2cabd","x":-2452,"y":1379,"width":224,"height":158},
		{"type":"text","text":"dangling else problem","id":"20f0709c5a2dfcfc","x":-3180,"y":1185,"width":250,"height":60,"color":"1"},
		{"type":"text","text":"```cpp\nif (x >= 0) \n        if (x <= 20) \n            std::cout << x << \" is between 0 and 20\\n\";\n```","id":"316898c34b01c184","x":-3140,"y":920,"width":620,"height":184},
		{"type":"text","text":"nested if statement ","id":"ebd75c0f72b472fd","x":-2874,"y":1185,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"If defining variables used in a case statement, do so in a block inside the case","id":"466afcd4a3fa4911","x":-2160,"y":1232,"width":390,"height":95},
		{"type":"text","text":"You can declare or define (but not initialize) variables inside the switch","id":"632c2037dde97294","x":-2160,"y":977,"width":390,"height":79},
		{"type":"text","text":"a variable declared or defined in one case can be used in a later case","id":"fe06b7b1109d3e9d","x":-2160,"y":1083,"width":390,"height":115},
		{"type":"text","text":"break statement","id":"d6dcfa85930b6719","x":-1230,"y":986,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"used instead of return","id":"4bc36382674c6166","x":-1229,"y":1220,"width":250,"height":60},
		{"type":"text","text":"```cpp\nswitch (x) // ondition must evaluate to an integral type\n{\ncase 1:\n\tstd::cout << \"One\";\n\treturn;\ncase 2:\n\tstd::cout << \"Two\";\n\treturn;\ncase 3:\n\tstd::cout << \"Three\";\n\treturn;\ndefault:\n\tstd::cout << \"Unknown\";           \n\treturn;\n}\n\n```","id":"9f2a1d98d90144f7","x":-1706,"y":1180,"width":430,"height":400},
		{"type":"text","text":"tells the compiler that we are done executing statements within the switch, and that execution should continue with the statement after the end of the switch block","id":"df12b34502c9b7c5","x":-1330,"y":1069,"width":451,"height":126},
		{"type":"text","text":"allows the programmer to provide the compiler with some additional data about the code","id":"b880cbb91256f34a","x":-560,"y":1286,"width":320,"height":115},
		{"type":"text","text":"Attributes `с++17`","id":"b1eaa5d981e84f9b","x":-507,"y":1432,"width":214,"height":60,"color":"6"},
		{"type":"text","text":"The `[[fallthrough]]` attribute modifies a `null statement` to indicate that fallthrough is intentional (and no warnings should be triggered)","id":"c4f7ad034ff9d6f5","x":-628,"y":1798,"width":457,"height":125},
		{"type":"text","text":"C++","id":"a242d73ee3fc651f","x":160,"y":1432,"width":151,"height":58,"color":"3"},
		{"type":"text","text":"loops","id":"8bfe3fb27e0e717a","x":440,"y":688,"width":121,"height":60,"color":"6"},
		{"type":"text","text":"```cpp\nwhile (condition)\n    statement;\n````","id":"3378ce2833965dad","x":273,"y":1165,"width":240,"height":121},
		{"type":"text","text":"while statement","id":"ecade956fe00e1d5","x":286,"y":1058,"width":213,"height":66,"color":"5"},
		{"type":"text","text":"Do while statements","id":"80958c3f5b707ec0","x":619,"y":1058,"width":221,"height":66,"color":"5"},
		{"type":"text","text":"preferred when we have an obvious loop variable because it lets us easily and concisely define, initialize, test, and change the value of loop variables","id":"ed7ad9e6cbb5a5da","x":942,"y":1164,"width":398,"height":136},
		{"type":"text","text":"for statement","id":"46f804cff2a64bb8","x":1057,"y":1058,"width":168,"height":66,"color":"5"},
		{"type":"text","text":"an integer that is used to count how many times a loop has executed","id":"b083989ee2a72828","x":968,"y":480,"width":290,"height":117},
		{"type":"text","text":"iteration","id":"5134c3c6f1d67650","x":684,"y":628,"width":192,"height":50,"color":"6"},
		{"type":"text","text":"occur when the loop iterates one too many or one too few times to produce the desired result","id":"deaa0e2c69e5e92d","x":968,"y":707,"width":290,"height":134},
		{"type":"text","text":"Prefer for loops over while loops when there is an obvious loop variable.\nPrefer while loops over for loops when there is no obvious loop variable","id":"8d6cf41e7fc55df4","x":650,"y":1861,"width":653,"height":102,"color":"4"},
		{"type":"text","text":"```cpp\n{ // note the block here\n    init-statement; // used to define variables used in the loop\n    while (condition)\n    {\n        statement; \n        end-expression; // used to modify the loop variable prior to reassessment of the condition\n    }\n} // variables defined inside the loop go out of scope here\n```","id":"930eca529e61fdcd","x":771,"y":1560,"width":741,"height":265},
		{"type":"text","text":"goto statement","id":"77daf485b8c14f11","x":-749,"y":1117,"width":217,"height":66,"color":"5"},
		{"type":"text","text":"```cpp\ntryAgain: // this is a statement label\n    std::cout << \"Enter a non-negative number: \";\n    std::cin >> x;\n    if (x < 0.0)\n        goto tryAgain; // this is the goto statement\n```","id":"4cd577ba41d580e6","x":-455,"y":1058,"width":599,"height":185},
		{"type":"text","text":"he `goto statement` and its corresponding `statement label` must appear in the same function","id":"06add99b78ad1420","x":-415,"y":940,"width":519,"height":73},
		{"type":"text","text":"unconditional jump","id":"6a433c4f08001143","x":-749,"y":946,"width":217,"height":67,"color":"6"},
		{"type":"text","text":"```cpp\ndo\n    statement; \nwhile (condition);\n```","id":"507190f8d0b4ddd4","x":584,"y":1172,"width":292,"height":121},
		{"type":"text","text":"is a looping construct that works just like a while loop, except the statement always executes at least once.","id":"cfdb997c9d998507","x":538,"y":1340,"width":385,"height":155},
		{"type":"text","text":"```cpp\nfor (init-statement; condition; end-expression)\n   statement;\n```","id":"b2e954973a56bc3b","x":943,"y":1377,"width":397,"height":118},
		{"type":"text","text":"continue statement","id":"07911b309c55c84d","x":1292,"y":767,"width":220,"height":66,"color":"6"},
		{"type":"text","text":"provides a convenient way to end the current iteration of a loop without terminating the entire loop","id":"aeddcb39698adef7","x":1235,"y":858,"width":335,"height":137},
		{"type":"text","text":"```cpp\nfor (int count{ 0 }; count < 10; ++count)\n    {\n        // if the number is divisible by 4, skip this iteration\n        if ((count % 4) == 0)\n            continue; // go to next iteration\n        std::cout << count << '\\n';\n        // The continue statement jumps to here\n    }\n```","id":"9c03f6b5deeb100d","x":1630,"y":801,"width":910,"height":257},
		{"type":"text","text":"each set of statements underneath a label should end in a `break statement` or a `return statement`","id":"ae0ab1bbbadb8f4f","x":-1248,"y":1492,"width":369,"height":108,"color":"4"},
		{"type":"text","text":"When execution flows from a statement underneath a label into statements underneath a subsequent label,","id":"c3ef742a074b0265","x":-911,"y":1645,"width":379,"height":100},
		{"type":"text","text":"fallthrough","id":"67fb6bcfa15a3eac","x":-1137,"y":1660,"width":148,"height":70,"color":"1"},
		{"type":"text","text":"```cpp\n#include <cstdlib>\n```","id":"c00fe9af02093148","x":1601,"y":-240,"width":276,"height":72},
		{"type":"text","text":"halt statements will be function calls","id":"9d79be280b0ba6ed","x":1070,"y":-244,"width":250,"height":81},
		{"type":"text","text":"flow control statement that terminates the program","id":"4d0eaa7cfca85a91","x":746,"y":-251,"width":290,"height":95},
		{"type":"text","text":"halt","id":"2cbbadac998fcd63","x":843,"y":290,"width":96,"height":60,"color":"6"},
		{"type":"text","text":"`std::exit()`","id":"949cd329faf423eb","x":1652,"y":238,"width":181,"height":52},
		{"type":"text","text":"Normal termination means the program has exited in an expected way","id":"8e31f03285748196","x":1512,"y":320,"width":462,"height":69},
		{"type":"text","text":"The `std::exit()` function does not clean up local variables in the current function or up the call stack.","id":"c0d7c0674db730b8","x":1512,"y":429,"width":462,"height":102,"color":"1"},
		{"type":"text","text":"allows you to specify a function that will automatically be called on program termination via `std::exit()`","id":"062b9491138fba4d","x":1098,"y":320,"width":388,"height":120},
		{"type":"text","text":"`std::abort()`","id":"e17dd10f0e19eb4d","x":2120,"y":238,"width":180,"height":52},
		{"type":"text","text":"causes your program to terminate abnormally","id":"4e46cf6df4c8f5e5","x":2083,"y":308,"width":254,"height":81},
		{"type":"text","text":"Abnormal termination means the program had some kind of unusual runtime error and the program couldn’t continue to run","id":"123481b4cf3321e3","x":2000,"y":432,"width":420,"height":99},
		{"type":"text","text":"`std::terminate()`","id":"11395be0cbca5168","x":2092,"y":120,"width":237,"height":60},
		{"type":"text","text":"does not do any cleanup","id":"fad3fcbc423a859d","x":2087,"y":677,"width":250,"height":60},
		{"type":"text","text":"expressions","id":"b0908a70e3af3515","x":964,"y":2240,"width":178,"height":50,"color":"6"},
		{"type":"text","text":"assertion","id":"eed097f894571d3f","x":975,"y":2450,"width":156,"height":50,"color":"5"},
		{"type":"text","text":"an expression that will be true unless there is a bug in the program","id":"7b676878ef88ffd5","x":931,"y":2537,"width":245,"height":112},
		{"type":"text","text":"static_assert","id":"1138249862203721","x":966,"y":2700,"width":175,"height":50,"color":"5"},
		{"type":"text","text":"```cpp\nstatic_assert(condition, diagnostic_message)\n```","id":"3c80cb64f2af9162","x":887,"y":2780,"width":334,"height":90},
		{"type":"text","text":"assert","id":"82d81ec170df5bc9","x":1221,"y":2568,"width":120,"height":50,"color":"5"},
		{"type":"text","text":"```cpp\nassert(gravity > 0.0); // The object won't reach the ground unless there is positive gravity.\n```","id":"ef24223d8a040e9a","x":1360,"y":2529,"width":405,"height":128},
		{"type":"text","text":"```cpp\n#include <cassert>\n```","id":"70365d611198b09b","x":1425,"y":2230,"width":274,"height":70},
		{"type":"text","text":"If the condition is not true, the diagnostic message is printed","id":"c99964d1e087cbef","x":1255,"y":2785,"width":340,"height":80},
		{"type":"text","text":"```cpp\ncase 2:\n    std::cout << 2 << '\\n'; // Execution begins here\n    [[fallthrough]]; // intentional fallthrough -- note the semicolon to indicate the null statement\ncase 3:\n    std::cout << 3 << '\\n'; // This is also executed\n    break;\n```","id":"fb568df6b7414f98","x":-1385,"y":2063,"width":1034,"height":202},
		{"type":"text","text":"```cpp\nbool isVowel(char c)\n{\n    switch (c)\n    {\n        case 'a': // if c is 'a'\n        case 'e': // or if c is 'e'\n        case 'i': // or if c is 'i'\n        case 'o': // or if c is 'o'\n        case 'u': // or if c is 'u'\n        case 'A': // or if c is 'A'\n        case 'E': // or if c is 'E'\n        case 'I': // or if c is 'I'\n        case 'O': // or if c is 'O'\n        case 'U': // or if c is 'U'\n            return true;\n        default:\n            return false;\n    }\n}\n```","id":"60fa84ea23a617cb","x":-1863,"y":1926,"width":430,"height":500},
		{"type":"text","text":"```cpp\nbool isVowel(char c)\n{\n    return (c=='a' || c=='e' || c=='i' || c=='o' || c=='u' ||\n        c=='A' || c=='E' || c=='I' || c=='O' || c=='U');\n}\n```","id":"40446754f6d6c6a1","x":-2677,"y":2087,"width":712,"height":178},
		{"type":"text","text":"precondition","id":"25dc886e47dca2e5","x":-1458,"y":2610,"width":176,"height":50,"color":"5"},
		{"type":"text","text":"any condition that must always be true prior to the execution of component of code","id":"339122f90815a3bb","x":-1527,"y":2697,"width":315,"height":112},
		{"type":"text","text":"is a condition that must be true while some component is executing.","id":"3f44b04d0fa30b84","x":-1136,"y":2697,"width":258,"height":112},
		{"type":"text","text":"conditions","id":"4368340651e83953","x":-628,"y":2320,"width":161,"height":50,"color":"6"},
		{"type":"text","text":"postcondition","id":"60c10fd2a9602475","x":-641,"y":2610,"width":174,"height":50,"color":"5"},
		{"type":"text","text":"is something that must be true after the execution of some component of code","id":"83328d0c69c0659e","x":-689,"y":2697,"width":270,"height":112},
		{"type":"text","text":"deterministic","id":"f594a3ed1e604e04","x":-467,"y":2900,"width":165,"height":50,"color":"5"},
		{"type":"text","text":"```cpp\n#include <random>\n```","id":"343feb1cb30e3218","x":-771,"y":3485,"width":250,"height":90},
		{"type":"text","text":"6 PRNG families","id":"f69bca3f9214d2cc","x":-771,"y":3612,"width":250,"height":59},
		{"type":"text","text":"`mt19937`","id":"8492d9fa3d7ef8d6","x":-828,"y":3896,"width":151,"height":50,"color":"5"},
		{"type":"text","text":"is an algorithm that generates a sequence of numbers whose properties simulate a sequence of random numbers","id":"0a4d39a73c7b3e50","x":-1024,"y":3280,"width":392,"height":120},
		{"type":"text","text":"When a PRNG has been initialized with a seed","id":"f55482544927e28f","x":-1904,"y":3305,"width":441,"height":71},
		{"type":"text","text":"seeded","id":"724d6c20843e0103","x":-1422,"y":3315,"width":205,"height":50,"color":"6"},
		{"type":"text","text":"underseeded","id":"696623097a89d0dd","x":-1422,"y":3460,"width":205,"height":50,"color":"6"},
		{"type":"text","text":"period","id":"f53b96eed0930c94","x":-1353,"y":3616,"width":136,"height":50,"color":"6"},
		{"type":"text","text":"The length of the sequence before a PRNG begins to repeat itself","id":"61bb75e9065edc44","x":-1714,"y":3607,"width":339,"height":69},
		{"type":"text","text":"`mt19937_64`","id":"03f777314d9a6366","x":-630,"y":3896,"width":167,"height":50,"color":"5"},
		{"type":"text","text":"Pseudo-random number generators (PRNGs)","id":"8489806f62532750","x":-956,"y":3164,"width":257,"height":74,"color":"5"},
		{"type":"text","text":"All of the values that a PRNG will produce are deterministically calculated from the seed value(s).","id":"347646e2cbf9c7b8","x":-1692,"y":3160,"width":602,"height":84},
		{"type":"text","text":"random seed","id":"306c4db5f0ece64f","x":-1998,"y":3171,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"random number distribution","id":"ea4308bd91928c62","x":-302,"y":3171,"width":305,"height":60,"color":"5"},
		{"type":"text","text":"uniform distribution","id":"f6f935b17b9f89e6","x":-274,"y":3340,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"converts the output of a PRNG into some other distribution of numbers","id":"4ea6e14051f95f76","x":40,"y":3158,"width":403,"height":86},
		{"type":"text","text":"statement that specifies whether some associated statement(s) should be executed or not","id":"548e0bb17d55c4ce","x":-2100,"y":756,"width":451,"height":100},
		{"type":"text","text":"```cpp\n; // this is a null statement\n```","id":"19f2fb7b9c733c06","x":-2299,"y":600,"width":366,"height":77},
		{"type":"text","text":"null statement","id":"3b0dd14d9e3850c9","x":-1908,"y":608,"width":259,"height":69,"color":"5"},
		{"type":"text","text":"retains some information across calls","id":"ba3f2be8123601a0","x":-91,"y":2702,"width":261,"height":90},
		{"type":"text","text":"stateful","id":"9f902936fd6d1fa4","x":-24,"y":2603,"width":127,"height":50,"color":"5"},
		{"type":"text","text":"stateless","id":"a9c990ef0c1f4873","x":187,"y":2593,"width":139,"height":50,"color":"5"},
		{"type":"text","text":"does not store any information (and must be given all the information it needs to work with when it is called)","id":"2d83f9213d43aee7","x":384,"y":2552,"width":339,"height":132},
		{"type":"text","text":"algorithm","id":"21157d871941d58b","x":-26,"y":2335,"width":139,"height":52,"color":"6"},
		{"type":"text","text":"is a finite sequence of instructions that can be followed to solve some problem or produce some useful result","id":"4b13b9c11f3cb1f3","x":134,"y":2295,"width":355,"height":130},
		{"type":"text","text":"Off-by-one errors","id":"742cd94f1bd18585","x":684,"y":732,"width":207,"height":85,"color":"1"},
		{"type":"text","text":"loop variable (a counter)","id":"8868aad1164b0c2d","x":682,"y":494,"width":241,"height":89,"color":"6"},
		{"type":"text","text":"Each time a loop executes","id":"2f9c4b744812cdc8","x":968,"y":623,"width":290,"height":60},
		{"type":"text","text":"`if`","id":"7be4389f58f5039c","x":-2407,"y":985,"width":135,"height":61,"color":"5"},
		{"type":"text","text":"if (condition)\n    true_statement;","id":"1a4e79bf6444923e","x":-2457,"y":1198,"width":235,"height":126},
		{"type":"text","text":"invariant","id":"a5c866461e9005b7","x":-1090,"y":2610,"width":167,"height":50,"color":"5"},
		{"type":"text","text":"`std::atexit()`","id":"ed8eedef4418bf2e","x":1182,"y":238,"width":221,"height":52},
		{"type":"text","text":"When the size of the seed value is smaller than the size of the state of the PRNG","id":"e88fe9904fbdad6f","x":-1903,"y":3440,"width":441,"height":90},
		{"type":"text","text":"```cpp\nstd::mt19937 mt{};\nstd::uniform_int_distribution die6{ 1, 6 };\nstd::cout << die6(mt);\n```","id":"9371c7b1d0bfd9b2","x":-438,"y":3454,"width":578,"height":121},
		{"type":"text","text":"Mersenne Twister","id":"953af21f1fb3e727","x":-756,"y":3760,"width":223,"height":60,"color":"5"},
		{"type":"text","text":"```cpp\nstd::mt19937 mt{}; // Instantiate a 32-bit Mersenne Twister\nx = mt() // generate a random number\n```","id":"f96031b1f58fa1eb","x":-1019,"y":4040,"width":778,"height":120},
		{"type":"text","text":"```cpp\n if (!std::cin) // if the previous extraction failed\n        {\n            // let's handle the failure\n            std::cin.clear(); // put us back in 'normal' operation mode\n            ignoreLine();     // and remove the bad input\n        }\n```","id":"89498cc1c29cb8a6","x":-3520,"y":1368,"width":876,"height":232},
		{"type":"text","text":"```cpp\n#include <cstdint>\n```","id":"c34669ec4e86bb64","x":-3760,"y":1250,"width":313,"height":68},
		{"type":"text","text":"meaning that for a given input (the value provided for `start`), it will always produce the same output sequence","id":"c8cdf8059e8d88de","x":-982,"y":2858,"width":461,"height":135},
		{"type":"text","text":"is a random number distribution that produces outputs between two numbers X and Y (inclusive) with equal probability","id":"c425e106d1e133b3","x":40,"y":3323,"width":640,"height":95}
	],
	"edges":[
		{"id":"3613ad86f56c4d4b","fromNode":"a242d73ee3fc651f","fromSide":"top","toNode":"80a4c07dde84d0eb","toSide":"right"},
		{"id":"1267811e3fb93374","fromNode":"80a4c07dde84d0eb","fromSide":"top","toNode":"24ee1f57122bebb0","toSide":"bottom","toEnd":"none"},
		{"id":"50eeeceec98a5b8e","fromNode":"80a4c07dde84d0eb","fromSide":"bottom","toNode":"e62c1176a0c0cc3b","toSide":"top"},
		{"id":"e52a6873b77d658a","fromNode":"e62c1176a0c0cc3b","fromSide":"bottom","toNode":"32968ee913625c5a","toSide":"top","toEnd":"none"},
		{"id":"a4149934aeb651ac","fromNode":"80a4c07dde84d0eb","fromSide":"bottom","toNode":"6b4e40a9f4ee80c7","toSide":"right"},
		{"id":"25564622236be525","fromNode":"6b4e40a9f4ee80c7","fromSide":"left","toNode":"319b894d77d2a664","toSide":"right","toEnd":"none"},
		{"id":"00da2e62f443b9ca","fromNode":"6b4e40a9f4ee80c7","fromSide":"left","toNode":"68fbe362d95ed0e6","toSide":"right"},
		{"id":"ac4f8a8a3e270e5d","fromNode":"68fbe362d95ed0e6","fromSide":"top","toNode":"e3b9235a4b959090","toSide":"bottom","toEnd":"none"},
		{"id":"ebf3ddfc3f0e4b3a","fromNode":"6b4e40a9f4ee80c7","fromSide":"bottom","toNode":"b3fc68c3ae383ec9","toSide":"top"},
		{"id":"794add971c33c52b","fromNode":"b3fc68c3ae383ec9","fromSide":"bottom","toNode":"7be4389f58f5039c","toSide":"top"},
		{"id":"6e48d841edd73cbf","fromNode":"b3fc68c3ae383ec9","fromSide":"left","toNode":"548e0bb17d55c4ce","toSide":"right","toEnd":"none"},
		{"id":"4c786bd3414c1957","fromNode":"b3fc68c3ae383ec9","fromSide":"bottom","toNode":"d3f8f8586a1fcd04","toSide":"top"},
		{"id":"97f3fa7af9bfd461","fromNode":"7be4389f58f5039c","fromSide":"bottom","toNode":"1a4e79bf6444923e","toSide":"top"},
		{"id":"ea211aba5b12e595","fromNode":"1a4e79bf6444923e","fromSide":"bottom","toNode":"fe0c683898e2cabd","toSide":"top"},
		{"id":"540397b63a8c12e5","fromNode":"7be4389f58f5039c","fromSide":"left","toNode":"ebd75c0f72b472fd","toSide":"right"},
		{"id":"65b268076a33a576","fromNode":"ebd75c0f72b472fd","fromSide":"left","toNode":"20f0709c5a2dfcfc","toSide":"right"},
		{"id":"688f1afc907ff9ba","fromNode":"ebd75c0f72b472fd","fromSide":"top","toNode":"316898c34b01c184","toSide":"bottom"},
		{"id":"b0d39aa06dbb1db1","fromNode":"6b4e40a9f4ee80c7","fromSide":"bottom","toNode":"3b0dd14d9e3850c9","toSide":"right"},
		{"id":"2330431bd22bf6e5","fromNode":"3b0dd14d9e3850c9","fromSide":"left","toNode":"19f2fb7b9c733c06","toSide":"right","toEnd":"none"},
		{"id":"9eb14a6ae2324b2f","fromNode":"d3f8f8586a1fcd04","fromSide":"bottom","toNode":"9f2a1d98d90144f7","toSide":"top"},
		{"id":"346957b7cdcaba87","fromNode":"fe0c683898e2cabd","fromSide":"bottom","toNode":"020eec7bde93f562","toSide":"left"},
		{"id":"8b8ba2a9fdfd00ac","fromNode":"d6dcfa85930b6719","fromSide":"bottom","toNode":"df12b34502c9b7c5","toSide":"top"},
		{"id":"f7803d018303dff4","fromNode":"df12b34502c9b7c5","fromSide":"bottom","toNode":"4bc36382674c6166","toSide":"top"},
		{"id":"bac28624b61cb1ce","fromNode":"4bc36382674c6166","fromSide":"bottom","toNode":"9f2a1d98d90144f7","toSide":"right"},
		{"id":"7b7773594419dacf","fromNode":"ae0ab1bbbadb8f4f","fromSide":"top","toNode":"9f2a1d98d90144f7","toSide":"right"},
		{"id":"47ee760cf7d5817b","fromNode":"ae0ab1bbbadb8f4f","fromSide":"bottom","toNode":"67fb6bcfa15a3eac","toSide":"top"},
		{"id":"f408339b62885dc9","fromNode":"67fb6bcfa15a3eac","fromSide":"right","toNode":"c3ef742a074b0265","toSide":"left","toEnd":"none"},
		{"id":"83af7f73cde4e20b","fromNode":"a242d73ee3fc651f","fromSide":"left","toNode":"b1eaa5d981e84f9b","toSide":"right"},
		{"id":"814d961b5e656cf5","fromNode":"b1eaa5d981e84f9b","fromSide":"top","toNode":"b880cbb91256f34a","toSide":"bottom","toEnd":"none"},
		{"id":"09d8e5026aae6542","fromNode":"b1eaa5d981e84f9b","fromSide":"bottom","toNode":"c4f7ad034ff9d6f5","toSide":"top"},
		{"id":"53d2e89fb4f7df68","fromNode":"67fb6bcfa15a3eac","fromSide":"bottom","toNode":"c4f7ad034ff9d6f5","toSide":"left"},
		{"id":"36cdacbd3165e08c","fromNode":"020eec7bde93f562","fromSide":"right","toNode":"9f2a1d98d90144f7","toSide":"bottom"},
		{"id":"0dba1d1520566295","fromNode":"020eec7bde93f562","fromSide":"right","toNode":"60fa84ea23a617cb","toSide":"top"},
		{"id":"590413f338dcc1db","fromNode":"40446754f6d6c6a1","fromSide":"right","toNode":"60fa84ea23a617cb","toSide":"left"},
		{"id":"4bf3af5cd7cacc42","fromNode":"d3f8f8586a1fcd04","fromSide":"left","toNode":"632c2037dde97294","toSide":"right"},
		{"id":"d8edad783ecccc94","fromNode":"632c2037dde97294","fromSide":"bottom","toNode":"fe06b7b1109d3e9d","toSide":"top"},
		{"id":"e0b0793ad7b807ad","fromNode":"fe06b7b1109d3e9d","fromSide":"bottom","toNode":"466afcd4a3fa4911","toSide":"top"},
		{"id":"dc53d5600dc46182","fromNode":"c4f7ad034ff9d6f5","fromSide":"bottom","toNode":"fb568df6b7414f98","toSide":"top"},
		{"id":"4fe143027d4dbe99","fromNode":"d3f8f8586a1fcd04","fromSide":"right","toNode":"d6dcfa85930b6719","toSide":"left"},
		{"id":"379dafc17be704d4","fromNode":"6b4e40a9f4ee80c7","fromSide":"bottom","toNode":"6a433c4f08001143","toSide":"top"},
		{"id":"96f4603d9ba7ee02","fromNode":"6a433c4f08001143","fromSide":"bottom","toNode":"77daf485b8c14f11","toSide":"top"},
		{"id":"b265398c0f1f6919","fromNode":"77daf485b8c14f11","fromSide":"right","toNode":"4cd577ba41d580e6","toSide":"left"},
		{"id":"6c19e481559d6639","fromNode":"6b4e40a9f4ee80c7","fromSide":"bottom","toNode":"8bfe3fb27e0e717a","toSide":"top"},
		{"id":"e0a3a54eb3d6079f","fromNode":"8bfe3fb27e0e717a","fromSide":"bottom","toNode":"ecade956fe00e1d5","toSide":"top"},
		{"id":"f7950de478f9c7c2","fromNode":"ecade956fe00e1d5","fromSide":"bottom","toNode":"3378ce2833965dad","toSide":"top"},
		{"id":"de9cb96986a228ba","fromNode":"8bfe3fb27e0e717a","fromSide":"right","toNode":"8868aad1164b0c2d","toSide":"left"},
		{"id":"c87e9e6c8f7463ee","fromNode":"8868aad1164b0c2d","fromSide":"right","toNode":"b083989ee2a72828","toSide":"left","toEnd":"none"},
		{"id":"029479bc78234205","fromNode":"8bfe3fb27e0e717a","fromSide":"right","toNode":"5134c3c6f1d67650","toSide":"left"},
		{"id":"e48620ade7e4a893","fromNode":"5134c3c6f1d67650","fromSide":"right","toNode":"2f9c4b744812cdc8","toSide":"left","toEnd":"none"},
		{"id":"6e90d83d18d8cbe8","fromNode":"8bfe3fb27e0e717a","fromSide":"bottom","toNode":"80958c3f5b707ec0","toSide":"top"},
		{"id":"7953b919e7d4f26f","fromNode":"80958c3f5b707ec0","fromSide":"bottom","toNode":"507190f8d0b4ddd4","toSide":"top"},
		{"id":"2d353be3635f996b","fromNode":"507190f8d0b4ddd4","fromSide":"bottom","toNode":"cfdb997c9d998507","toSide":"top"},
		{"id":"d07dbf8814dc233a","fromNode":"8bfe3fb27e0e717a","fromSide":"bottom","toNode":"46f804cff2a64bb8","toSide":"top"},
		{"id":"149db47316df3c5e","fromNode":"46f804cff2a64bb8","fromSide":"bottom","toNode":"ed7ad9e6cbb5a5da","toSide":"top"},
		{"id":"63114e56f239072d","fromNode":"ed7ad9e6cbb5a5da","fromSide":"bottom","toNode":"b2e954973a56bc3b","toSide":"top"},
		{"id":"630254d1fc08ce1f","fromNode":"b2e954973a56bc3b","fromSide":"right","toNode":"8d6cf41e7fc55df4","toSide":"right"},
		{"id":"9e039a4c8d869b7b","fromNode":"8d6cf41e7fc55df4","fromSide":"left","toNode":"3378ce2833965dad","toSide":"bottom"},
		{"id":"c3b7c19725c81466","fromNode":"8bfe3fb27e0e717a","fromSide":"right","toNode":"742cd94f1bd18585","toSide":"left"},
		{"id":"d4388b2e26c0bd2c","fromNode":"742cd94f1bd18585","fromSide":"right","toNode":"deaa0e2c69e5e92d","toSide":"left","toEnd":"none"},
		{"id":"73ddea35f2d41508","fromNode":"b2e954973a56bc3b","fromSide":"bottom","toNode":"930eca529e61fdcd","toSide":"top","toEnd":"none","label":"="},
		{"id":"a220e9d6fd7585d9","fromNode":"8bfe3fb27e0e717a","fromSide":"left","toNode":"d6dcfa85930b6719","toSide":"top"},
		{"id":"94a6c912f308a62c","fromNode":"4cd577ba41d580e6","fromSide":"top","toNode":"06add99b78ad1420","toSide":"bottom"},
		{"id":"32788b52ec0d030d","fromNode":"2f9c4b744812cdc8","fromSide":"right","toNode":"07911b309c55c84d","toSide":"top"},
		{"id":"3747fefda920e7d7","fromNode":"07911b309c55c84d","fromSide":"bottom","toNode":"aeddcb39698adef7","toSide":"top","toEnd":"none"},
		{"id":"37933fa805647838","fromNode":"aeddcb39698adef7","fromSide":"right","toNode":"9c03f6b5deeb100d","toSide":"left"},
		{"id":"1129e070ed851d0e","fromNode":"6b4e40a9f4ee80c7","fromSide":"bottom","toNode":"2cbbadac998fcd63","toSide":"left"},
		{"id":"2678c56e4385381c","fromNode":"2cbbadac998fcd63","fromSide":"top","toNode":"4d0eaa7cfca85a91","toSide":"bottom","toEnd":"none"},
		{"id":"ed462ba43f8fc789","fromNode":"4d0eaa7cfca85a91","fromSide":"right","toNode":"9d79be280b0ba6ed","toSide":"left"},
		{"id":"084f05c4afd9f8e2","fromNode":"c00fe9af02093148","fromSide":"bottom","toNode":"949cd329faf423eb","toSide":"top"},
		{"id":"aca902d96eb66ca7","fromNode":"9d79be280b0ba6ed","fromSide":"right","toNode":"c00fe9af02093148","toSide":"left"},
		{"id":"5d45c4766f588199","fromNode":"8e31f03285748196","fromSide":"bottom","toNode":"c0d7c0674db730b8","toSide":"top"},
		{"id":"04c0743d454cdd59","fromNode":"ed8eedef4418bf2e","fromSide":"right","toNode":"949cd329faf423eb","toSide":"left"},
		{"id":"92f271e13fe75799","fromNode":"c00fe9af02093148","fromSide":"bottom","toNode":"ed8eedef4418bf2e","toSide":"top"},
		{"id":"0a058887dde657f7","fromNode":"ed8eedef4418bf2e","fromSide":"bottom","toNode":"062b9491138fba4d","toSide":"top","toEnd":"none"},
		{"id":"ac173a16e8a62dea","fromNode":"c00fe9af02093148","fromSide":"bottom","toNode":"11395be0cbca5168","toSide":"top"},
		{"id":"a4cb8e9350c0183d","fromNode":"949cd329faf423eb","fromSide":"bottom","toNode":"8e31f03285748196","toSide":"top","toEnd":"none"},
		{"id":"c2c82f9d9f12dddc","fromNode":"e17dd10f0e19eb4d","fromSide":"bottom","toNode":"4e46cf6df4c8f5e5","toSide":"top","toEnd":"none"},
		{"id":"e9650761509e4345","fromNode":"4e46cf6df4c8f5e5","fromSide":"bottom","toNode":"123481b4cf3321e3","toSide":"top"},
		{"id":"8b425fc1ff7b56ba","fromNode":"c0d7c0674db730b8","fromSide":"bottom","toNode":"fad3fcbc423a859d","toSide":"left"},
		{"id":"bb31a03847d40b48","fromNode":"123481b4cf3321e3","fromSide":"bottom","toNode":"fad3fcbc423a859d","toSide":"top"},
		{"id":"8bdc0e6749af66d4","fromNode":"11395be0cbca5168","fromSide":"bottom","toNode":"e17dd10f0e19eb4d","toSide":"top","label":"by default"},
		{"id":"8f482b7ff3fd30df","fromNode":"062b9491138fba4d","fromSide":"bottom","toNode":"fad3fcbc423a859d","toSide":"left"},
		{"id":"83565e1820b4651b","fromNode":"a242d73ee3fc651f","fromSide":"bottom","toNode":"4368340651e83953","toSide":"right"},
		{"id":"ae67d67a975b6599","fromNode":"4368340651e83953","fromSide":"left","toNode":"25dc886e47dca2e5","toSide":"right"},
		{"id":"400deb766b01f72b","fromNode":"4368340651e83953","fromSide":"left","toNode":"a5c866461e9005b7","toSide":"right"},
		{"id":"c48288649ec9b003","fromNode":"4368340651e83953","fromSide":"bottom","toNode":"60c10fd2a9602475","toSide":"top"},
		{"id":"418a534d5903fb9b","fromNode":"25dc886e47dca2e5","fromSide":"bottom","toNode":"339122f90815a3bb","toSide":"top","toEnd":"none"},
		{"id":"ebfc9641c1857e90","fromNode":"a5c866461e9005b7","fromSide":"bottom","toNode":"3f44b04d0fa30b84","toSide":"top","toEnd":"none"},
		{"id":"49f17c8a4f6e27c2","fromNode":"60c10fd2a9602475","fromSide":"bottom","toNode":"83328d0c69c0659e","toSide":"top","toEnd":"none"},
		{"id":"6ba68462a84164de","fromNode":"a242d73ee3fc651f","fromSide":"bottom","toNode":"b0908a70e3af3515","toSide":"left"},
		{"id":"28537e20930c06ff","fromNode":"eed097f894571d3f","fromSide":"bottom","toNode":"7b676878ef88ffd5","toSide":"top","toEnd":"none"},
		{"id":"d06de691ec339a5a","fromNode":"b0908a70e3af3515","fromSide":"bottom","toNode":"eed097f894571d3f","toSide":"top"},
		{"id":"733e6782c899514e","fromNode":"70365d611198b09b","fromSide":"bottom","toNode":"ef24223d8a040e9a","toSide":"top"},
		{"id":"25144e8f13d39f6a","fromNode":"7b676878ef88ffd5","fromSide":"right","toNode":"82d81ec170df5bc9","toSide":"left"},
		{"id":"37988f9d3d60642c","fromNode":"7b676878ef88ffd5","fromSide":"bottom","toNode":"1138249862203721","toSide":"top"},
		{"id":"35c2f35d8b251259","fromNode":"82d81ec170df5bc9","fromSide":"right","toNode":"ef24223d8a040e9a","toSide":"left","toEnd":"none"},
		{"id":"e6fd7ce29d24fab8","fromNode":"1138249862203721","fromSide":"bottom","toNode":"3c80cb64f2af9162","toSide":"top","toEnd":"none"},
		{"id":"cfae2ceeacf12041","fromNode":"3c80cb64f2af9162","fromSide":"right","toNode":"c99964d1e087cbef","toSide":"left"},
		{"id":"305d0a3e8732d951","fromNode":"a242d73ee3fc651f","fromSide":"bottom","toNode":"21157d871941d58b","toSide":"top"},
		{"id":"3ed39edbdfd27e49","fromNode":"21157d871941d58b","fromSide":"right","toNode":"4b13b9c11f3cb1f3","toSide":"left","toEnd":"none"},
		{"id":"83759e6b9242ad76","fromNode":"21157d871941d58b","fromSide":"bottom","toNode":"9f902936fd6d1fa4","toSide":"top"},
		{"id":"358c5f9a68914912","fromNode":"21157d871941d58b","fromSide":"bottom","toNode":"a9c990ef0c1f4873","toSide":"top"},
		{"id":"d44e79f42a806755","fromNode":"9f902936fd6d1fa4","fromSide":"bottom","toNode":"ba3f2be8123601a0","toSide":"top","toEnd":"none"},
		{"id":"96c04e6e874a8803","fromNode":"a9c990ef0c1f4873","fromSide":"right","toNode":"2d83f9213d43aee7","toSide":"left","toEnd":"none"},
		{"id":"2b645be8a5e8809a","fromNode":"21157d871941d58b","fromSide":"bottom","toNode":"f594a3ed1e604e04","toSide":"top"},
		{"id":"5d7f1706f2736192","fromNode":"f594a3ed1e604e04","fromSide":"bottom","toNode":"8489806f62532750","toSide":"top"},
		{"id":"36380456320db342","fromNode":"8489806f62532750","fromSide":"bottom","toNode":"0a4d39a73c7b3e50","toSide":"top","toEnd":"none"},
		{"id":"dcd6fc78c10caf9f","fromNode":"347646e2cbf9c7b8","fromSide":"right","toNode":"8489806f62532750","toSide":"left"},
		{"id":"ee89a688370039db","fromNode":"306c4db5f0ece64f","fromSide":"right","toNode":"347646e2cbf9c7b8","toSide":"left","toEnd":"none"},
		{"id":"7e0c318f053785d9","fromNode":"0a4d39a73c7b3e50","fromSide":"left","toNode":"724d6c20843e0103","toSide":"right"},
		{"id":"66daf085222faad5","fromNode":"0a4d39a73c7b3e50","fromSide":"left","toNode":"696623097a89d0dd","toSide":"right"},
		{"id":"4bd1db0b8b36a53e","fromNode":"724d6c20843e0103","fromSide":"left","toNode":"f55482544927e28f","toSide":"right","toEnd":"none"},
		{"id":"e6b49b66334641dd","fromNode":"696623097a89d0dd","fromSide":"left","toNode":"e88fe9904fbdad6f","toSide":"right","toEnd":"none"},
		{"id":"a62dd258bdb40931","fromNode":"0a4d39a73c7b3e50","fromSide":"bottom","toNode":"f53b96eed0930c94","toSide":"right"},
		{"id":"dc87421606539aaf","fromNode":"f53b96eed0930c94","fromSide":"left","toNode":"61bb75e9065edc44","toSide":"right","toEnd":"none"},
		{"id":"595006d012e3ccfb","fromNode":"343feb1cb30e3218","fromSide":"bottom","toNode":"f69bca3f9214d2cc","toSide":"top"},
		{"id":"6d0bf900df5350b1","fromNode":"0a4d39a73c7b3e50","fromSide":"bottom","toNode":"343feb1cb30e3218","toSide":"top"},
		{"id":"f93e45c28ab1dd05","fromNode":"f69bca3f9214d2cc","fromSide":"bottom","toNode":"953af21f1fb3e727","toSide":"top"},
		{"id":"41f5375c5da43b22","fromNode":"953af21f1fb3e727","fromSide":"bottom","toNode":"8492d9fa3d7ef8d6","toSide":"top"},
		{"id":"d7c249fc9150f07d","fromNode":"953af21f1fb3e727","fromSide":"bottom","toNode":"03f777314d9a6366","toSide":"top"},
		{"id":"b520c94312852f3d","fromNode":"8492d9fa3d7ef8d6","fromSide":"bottom","toNode":"f96031b1f58fa1eb","toSide":"top"},
		{"id":"4dddceea56e4c4d8","fromNode":"c8cdf8059e8d88de","fromSide":"right","toNode":"f594a3ed1e604e04","toSide":"left","toEnd":"none"},
		{"id":"d7e8dba8ba69a4aa","fromNode":"8489806f62532750","fromSide":"right","toNode":"ea4308bd91928c62","toSide":"left"},
		{"id":"5750c4817c5580d5","fromNode":"ea4308bd91928c62","fromSide":"bottom","toNode":"f6f935b17b9f89e6","toSide":"top"},
		{"id":"68cf2e32703467a0","fromNode":"ea4308bd91928c62","fromSide":"right","toNode":"4ea6e14051f95f76","toSide":"left","toEnd":"none"},
		{"id":"7cd24e86f7a947cd","fromNode":"f6f935b17b9f89e6","fromSide":"right","toNode":"c425e106d1e133b3","toSide":"left","toEnd":"none"},
		{"id":"ba60205c208fe024","fromNode":"f6f935b17b9f89e6","fromSide":"bottom","toNode":"9371c7b1d0bfd9b2","toSide":"top"},
		{"id":"0f1863b75ee81f2a","fromNode":"03f777314d9a6366","fromSide":"bottom","toNode":"f96031b1f58fa1eb","toSide":"top"},
		{"id":"87df9049debb5aa5","fromNode":"1a4e79bf6444923e","fromSide":"left","toNode":"89498cc1c29cb8a6","toSide":"right"},
		{"id":"9e82cb5d8c8aea7d","fromNode":"c34669ec4e86bb64","fromSide":"bottom","toNode":"89498cc1c29cb8a6","toSide":"left"}
	]
}