{
	"nodes":[
		{"type":"text","text":"user-defined types","id":"43c91606955426d1","x":-125,"y":-30,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"enumerated types","id":"6a5b8f7a4da4a420","x":-1050,"y":179,"width":228,"height":61,"color":"5"},
		{"type":"text","text":"type definition","id":"1967b0e622939335","x":-937,"y":-201,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"```cpp\nstruct Fraction\n{\n\tint numerator {};\n\tint denominator {};\n}; // always have a semicolon\n```","id":"6604512b8e4c2624","x":-1460,"y":-261,"width":468,"height":181},
		{"type":"text","text":"The definition for a program-defined type","id":"6338aa731523cbfd","x":-942,"y":-311,"width":260,"height":100},
		{"type":"text","text":"Name your program-defined types starting with a capital letter and do not use a suffix.","id":"38eb2b2187cfc622","x":-1431,"y":-46,"width":439,"height":92,"color":"4"},
		{"type":"text","text":"[data types](notes/studies/programming/c++/4.0%20-%20Fundamental%20Data%20Types.canvas)","id":"abce99f25f3ffe9f","x":251,"y":-420,"width":169,"height":51},
		{"type":"text","text":"Fundamental","id":"16a591bea7db1142","x":451,"y":-336,"width":190,"height":50,"color":"6"},
		{"type":"text","text":"Compound","id":"027bb14c87424719","x":451,"y":-240,"width":190,"height":50,"color":"6"},
		{"type":"text","text":"program-defined types","id":"07930bcbea565e6a","x":451,"y":-140,"width":269,"height":60,"color":"6"},
		{"type":"text","text":"A type built into the core C++ language","id":"cc63707fddea1bc2","x":740,"y":-351,"width":273,"height":80},
		{"type":"text","text":"A type built from fundamental types","id":"926bdce8489aa72c","x":740,"y":-256,"width":273,"height":82},
		{"type":"text","text":"A class type or enumerated type  <br>(Includes those defined in the standard library or implementation)","id":"929a7bfaa93ef4ba","x":451,"y":-33,"width":379,"height":126},
		{"type":"text","text":"enumerated type or an enum) is a compound data type where every possible value is defined as a symbolic constant (called an enumerator)","id":"3e4aee0ad6301e45","x":-1565,"y":148,"width":488,"height":123},
		{"type":"text","text":"unscoped enumerations","id":"6ad8b90d64f1f7b6","x":-760,"y":430,"width":278,"height":61,"color":"5"},
		{"type":"text","text":"defined via the `enum` keyword","id":"77e22f44a501fabc","x":-794,"y":520,"width":346,"height":50},
		{"type":"text","text":"Name enumerated types starting with a capital letter. \nName enumerators starting with a lower case letter.","id":"f4c8835895178c79","x":-621,"y":240,"width":521,"height":80,"color":"4"},
		{"type":"text","text":"underlying type (base)","id":"211466fbd34581f8","x":-1880,"y":182,"width":269,"height":55,"color":"6"},
		{"type":"text","text":"The specific integral type used to represent enumerators","id":"a95734005ea080f0","x":-2260,"y":172,"width":360,"height":75},
		{"type":"text","text":"```cpp\nenum Color : std::int8_t\n```","id":"da903a45bcde07cc","x":-2260,"y":280,"width":360,"height":50},
		{"type":"text","text":"distinct type","id":"f854fa3353fb4e42","x":-721,"y":1182,"width":201,"height":62,"color":"6"},
		{"type":"text","text":"scoped enumerations","id":"d181221686bf60f4","x":-1554,"y":433,"width":250,"height":61,"color":"5"},
		{"type":"text","text":"enum class","id":"b18c7c58ca557432","x":-1521,"y":523,"width":185,"height":53,"color":"6"},
		{"type":"text","text":"`enum class` keyword","id":"ab23e339f812bb92","x":-1554,"y":603,"width":250,"height":60},
		{"type":"text","text":"work similarly to unscoped enumerations, but they are strongly typed (they wonâ€™t implicitly convert to integers) and strongly scoped (the enumerators are _only_ placed into the scope region of the enumeration","id":"c42b6bdbcbbaf1ae","x":-2268,"y":407,"width":673,"height":113},
		{"type":"text","text":"```cpp\nusing enum Color; // bring all Color enumerators into current scope (C++20)\n    // We can now access the enumerators of Color without using a Color:: prefix\n```","id":"cd3ef5934c87f8b5","x":-2620,"y":895,"width":758,"height":102},
		{"type":"text","text":"the compiler can distinguish it from other types (unlike typedefs or type aliases, which are considered non-distinct from the types they are aliasing)","id":"6e659f494915a60b","x":-1521,"y":1172,"width":718,"height":83},
		{"type":"text","text":"enumerators can be initialized with other enumerators","id":"a6150e1a705252c6","x":-1504,"y":1549,"width":553,"height":50},
		{"type":"text","text":"you can force the compiler to convert an integer to an unscoped enumerator using `static_cast`","id":"20eb5991ac6bdb58","x":-1504,"y":1619,"width":553,"height":81},
		{"type":"text","text":"compiler will _not_ implicitly convert an integer to an unscoped enumerator","id":"dd67a06aa7df9720","x":-1427,"y":1734,"width":400,"height":81,"color":"1"},
		{"type":"text","text":"Enumerators not explicitly assigned a value will be implicitly assigned the integer value of the previous enumerator + 1. If there is no previous enumerator, the enumerator will assume value 0","id":"38ec6fd0e1df3abe","x":-1635,"y":1280,"width":684,"height":140},
		{"type":"text","text":"each enumerator is automatically assigned an integer value based on its position in the enumerator list","id":"faaa881d341c2218","x":-905,"y":1300,"width":681,"height":100},
		{"type":"text","text":"Unscoped enumerations will implicitly convert to integral values","id":"429c1fc3aec97a01","x":-905,"y":1749,"width":681,"height":50,"color":"4"},
		{"type":"text","text":"class types","id":"960a1eeda1224862","x":2080,"y":182,"width":240,"height":58,"color":"5"},
		{"type":"text","text":"structs","id":"6434ea7cec9cb143","x":1640,"y":430,"width":140,"height":61,"color":"5"},
		{"type":"text","text":"[classes](notes/studies/programming/c++/13.0%20-%20OOP.canvas)","id":"2cec8a5131b3aeb7","x":2135,"y":433,"width":125,"height":61,"color":"5"},
		{"type":"text","text":"unions","id":"08f4c1bd02648bc6","x":2640,"y":433,"width":124,"height":61,"color":"5"},
		{"type":"text","text":"is a program-defined data type, that allows us to bundle multiple variables together into a single type","id":"da8af8c020791d6d","x":1060,"y":408,"width":536,"height":106},
		{"type":"text","text":"member selection operator `.`","id":"b29757cf4099b359","x":1127,"y":830,"width":371,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\nEmployee joe;\njoe.age = 32;\n```","id":"7c8ced9576fb4fe5","x":851,"y":800,"width":222,"height":110},
		{"type":"text","text":"The variables that are part of the struct","id":"a92a949782d81ab7","x":644,"y":938,"width":429,"height":50},
		{"type":"text","text":"data members (member variables)","id":"63211b26ef076753","x":1127,"y":938,"width":371,"height":50,"color":"6"},
		{"type":"text","text":"aggregate data type","id":"620e4ecb30317264","x":2070,"y":-319,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"- Is a class type (a struct, class, or union), or an array type \n- Has no private or protected non-static data members \n- Has no user-declared or inherited constructors \n- Has no base classes \n- Has no virtual member functions","id":"52ced3011fed2d2b","x":1411,"y":-393,"width":629,"height":209},
		{"type":"text","text":"A class type or enumerated type  \n(Excludes those defined in standard library or implementation)","id":"43f4c70e9edb4fa6","x":740,"y":-162,"width":380,"height":111},
		{"type":"text","text":"memberwise initialization","id":"a2949afdf5ee3a49","x":1181,"y":209,"width":294,"height":50,"color":"6"},
		{"type":"text","text":"aggregate initialization","id":"1fa6fc6039c30d22","x":1187,"y":-60,"width":282,"height":55,"color":"6"},
		{"type":"text","text":"initializer list","id":"a906acbed2b3f5e5","x":1237,"y":24,"width":182,"height":50,"color":"6"},
		{"type":"text","text":"list of comma-separated initialization values","id":"03957be3890b1bac","x":1447,"y":24,"width":440,"height":50},
		{"type":"text","text":"`Employee joe { 2, 28, 45000.0 };`","id":"0b326bfb11a251fd","x":400,"y":209,"width":623,"height":50},
		{"type":"text","text":"`Employee joe {}; // value-initialize all members`","id":"224163b8e83b5282","x":400,"y":280,"width":623,"height":50},
		{"type":"text","text":"`const Rectangle unit { 1.0, 1.0 }; // const str. var`","id":"86cd1b71410dbbd4","x":400,"y":355,"width":623,"height":53},
		{"type":"text","text":"designated initializers `C++20`","id":"f405035bf3cd94c2","x":400,"y":441,"width":324,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\nFoo f1{ .a{ 1 }, .c{ 3 } }; // value initialized\nFoo f2{ .b{ 2 }, .a{ 1 } }; // error: does not match order in struct\n```","id":"4bbdb676a2f34e2c","x":148,"y":514,"width":829,"height":108},
		{"type":"text","text":"non-static member initialization","id":"5d569e2470e4b3a7","x":2465,"y":182,"width":351,"height":56,"color":"6"},
		{"type":"text","text":"default member initializer","id":"755f5798372b3adb","x":2492,"y":274,"width":297,"height":52,"color":"6"},
		{"type":"text","text":"provide a default initialization value for each member as part of the type definition","id":"9e49ad2eb2a95e25","x":2836,"y":173,"width":457,"height":74},
		{"type":"text","text":"initialization value","id":"4cf5eceb94c0d748","x":2836,"y":275,"width":229,"height":51},
		{"type":"text","text":"```cpp\nstruct Something\n{\n    int x;       // no initialization value (bad)\n    int y {};    // value-initialized by default\n    int z { 2 }; // explicit default value\n};\n```","id":"7ae67c361a709be8","x":2720,"y":-80,"width":616,"height":220},
		{"type":"text","text":"Explicit initialization values take precedence over default values","id":"3170e1a961c8b8c9","x":2707,"y":-184,"width":642,"height":63},
		{"type":"text","text":"Always provide default values for your members","id":"0059cf20991d4c5d","x":3109,"y":276,"width":480,"height":50,"color":"4"},
		{"type":"text","text":"member selection from pointer operator `->`","id":"add3326e73a6e30b","x":1031,"y":1040,"width":467,"height":50,"color":"6"},
		{"type":"text","text":" used to select members from a pointer to an object","id":"1acf1eebc9163983","x":692,"y":1020,"width":319,"height":90},
		{"type":"text","text":"```cpp\nstd::cout << ptr->id;\n```","id":"d91a2c556f3b07eb","x":688,"y":1140,"width":328,"height":73},
		{"type":"text","text":"```cpp\nstd::cout << (*ptr).id;\n```","id":"26c87e2ba72aa51d","x":320,"y":1140,"width":344,"height":73},
		{"type":"text","text":"class template","id":"5e893ed62e93a584","x":2711,"y":-280,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"a template definition for instantiating class types","id":"83767886e3537540","x":2993,"y":-293,"width":300,"height":87},
		{"type":"text","text":"```cpp\ntemplate <typename T>\nstruct Pair\n{\n    T first{};\n    T second{};\n};\n```","id":"580efae7a5f0eeda","x":3360,"y":-362,"width":320,"height":224},
		{"type":"text","text":"`<utility>` header","id":"bc17c43c37518d1a","x":1248,"y":1117,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"std::pair","id":"8d2ffebb54e416e3","x":1304,"y":1213,"width":138,"height":67,"color":"6"},
		{"type":"text","text":"```cpp\ntemplate <typename T, typename U>\nstruct Pair\n{\n    T first{};\n    U second{};\n};\n```","id":"82cf0a2a3796212f","x":1147,"y":1320,"width":453,"height":220},
		{"type":"text","text":"deduction guide `C++17`","id":"ddf73a31be77046d","x":233,"y":1398,"width":273,"height":60,"color":"6"},
		{"type":"text","text":"default parametr","id":"3b8f818fda4cb5d8","x":940,"y":1654,"width":207,"height":58,"color":"6"},
		{"type":"text","text":"```cpp\ntemplate <typename T=int, typename U=int> // default T and U to type int\nstruct Pair\n{\n    T first{};\n    U second{};\n};\n```","id":"ae109d6429f4430d","x":1180,"y":1571,"width":537,"height":224},
		{"type":"text","text":"```cpp\n         // Define a new unscoped enumeration named Color\nenum Color\n{\nred,     // These symbolic constants (enumerators) define all the possible values this type can hold\ngreen,   // Each enumerator is separated by a comma, not a semicolon\nblue,    // trailing comma optional but recommended\n};       // must end with a semicolon\nint main()\n{\n         // Define a few variables of enumerated type Color\nColor apple { red };   // my apple is red\nColor shirt { green }; // my shirt is green\nColor cup { blue };    // my cup is blue\n    }\n```","id":"c1297380c4fd2863","x":-1018,"y":718,"width":794,"height":398},
		{"type":"text","text":"```cpp\n\nint main()\nenum class Color // defines this as a scoped enumeration\n{\nred, // red is considered part of Color's scope region\nblue,\n};\nColor color { Color::red }; // red is not directly accessible\nreturn 0;}\n\n```","id":"4eedcec5e5b28e24","x":-1823,"y":804,"width":789,"height":284},
		{"type":"text","text":"```cpp\nenum Animal\n{\n    cat = -3,\n    dog,         // assigned -2\n    pig,         // assigned -1\n    horse = 5,\n    giraffe = 5, // shares same value as horse\n    chicken,      // assigned 6\n};\n```","id":"d13d075067abbb83","x":-905,"y":1443,"width":681,"height":263},
		{"type":"text","text":"```cpp\ntemplate <typename T, typename U>\nstruct Pair\n{T first{}; U second{};};\n// Here's a deduction guide for our Pair (needed in C++17)\n// Pair objects initialized with arguments of type T and U should deduce to Pair<T, U>\ntemplate <typename T, typename U>\nPair(T, U) -> Pair<T, U>;\n\nint main(){\nPair<int, int> p1{ 1, 2 }; // explicitly specify class template Pair<int, int> (C++11 onward)\nPair p2{ 1, 2 };           // CTAD used to deduce Pair<int, int> from the initializers (C++17)\nreturn 0;}\n```","id":"06bb1277c99e7db8","x":-177,"y":1527,"width":1093,"height":312},
		{"type":"text","text":"```cpp\nstruct Employee\n{\n    int id {};\n    int age {};\n    double wage {};\n};\n```","id":"3322e571381ef024","x":1159,"y":568,"width":339,"height":180}
	],
	"edges":[
		{"id":"ca06389f1084c433","fromNode":"43c91606955426d1","fromSide":"bottom","toNode":"6a5b8f7a4da4a420","toSide":"top"},
		{"id":"1c45b8c4a8ec85d5","fromNode":"43c91606955426d1","fromSide":"bottom","toNode":"960a1eeda1224862","toSide":"top"},
		{"id":"407cfb3f260ca691","fromNode":"6a5b8f7a4da4a420","fromSide":"bottom","toNode":"6ad8b90d64f1f7b6","toSide":"top"},
		{"id":"5b1aada6bb3fad4f","fromNode":"6a5b8f7a4da4a420","fromSide":"bottom","toNode":"d181221686bf60f4","toSide":"top"},
		{"id":"37273ee44f246aae","fromNode":"960a1eeda1224862","fromSide":"bottom","toNode":"6434ea7cec9cb143","toSide":"top"},
		{"id":"203d3a3388350913","fromNode":"960a1eeda1224862","fromSide":"bottom","toNode":"2cec8a5131b3aeb7","toSide":"top"},
		{"id":"b5af67549798867b","fromNode":"960a1eeda1224862","fromSide":"bottom","toNode":"08f4c1bd02648bc6","toSide":"top"},
		{"id":"6bea294314405d5e","fromNode":"1967b0e622939335","fromSide":"top","toNode":"6338aa731523cbfd","toSide":"bottom","toEnd":"none"},
		{"id":"1ccd88dccbdb0d42","fromNode":"1967b0e622939335","fromSide":"bottom","toNode":"43c91606955426d1","toSide":"left"},
		{"id":"7640796f44f8cfaf","fromNode":"1967b0e622939335","fromSide":"left","toNode":"6604512b8e4c2624","toSide":"right"},
		{"id":"4eac62d4ab8e6d32","fromNode":"38eb2b2187cfc622","fromSide":"right","toNode":"1967b0e622939335","toSide":"bottom"},
		{"id":"3457d4e7f0e52f1d","fromNode":"abce99f25f3ffe9f","fromSide":"bottom","toNode":"43c91606955426d1","toSide":"top"},
		{"id":"b61773e596261606","fromNode":"abce99f25f3ffe9f","fromSide":"bottom","toNode":"07930bcbea565e6a","toSide":"left"},
		{"id":"487b4098832bcf09","fromNode":"16a591bea7db1142","fromSide":"right","toNode":"cc63707fddea1bc2","toSide":"left","toEnd":"none"},
		{"id":"6d86b2cbf58a162f","fromNode":"abce99f25f3ffe9f","fromSide":"bottom","toNode":"16a591bea7db1142","toSide":"left"},
		{"id":"149e3c358a725df2","fromNode":"abce99f25f3ffe9f","fromSide":"bottom","toNode":"027bb14c87424719","toSide":"left"},
		{"id":"8e4ba3a1425b7682","fromNode":"027bb14c87424719","fromSide":"right","toNode":"926bdce8489aa72c","toSide":"left","toEnd":"none"},
		{"id":"75f6e49d52070289","fromNode":"43c91606955426d1","fromSide":"right","toNode":"929a7bfaa93ef4ba","toSide":"left","toEnd":"none"},
		{"id":"e45fed605f80d305","fromNode":"07930bcbea565e6a","fromSide":"right","toNode":"43f4c70e9edb4fa6","toSide":"left","toEnd":"none"},
		{"id":"cf3d9b528c0bc167","fromNode":"07930bcbea565e6a","fromSide":"left","toNode":"43c91606955426d1","toSide":"right","label":"casually ="},
		{"id":"502f112a8e5fcd7a","fromNode":"6a5b8f7a4da4a420","fromSide":"left","toNode":"3e4aee0ad6301e45","toSide":"right","toEnd":"none"},
		{"id":"e84c838a4555254f","fromNode":"6ad8b90d64f1f7b6","fromSide":"bottom","toNode":"77e22f44a501fabc","toSide":"top"},
		{"id":"f232efd4b2348018","fromNode":"77e22f44a501fabc","fromSide":"bottom","toNode":"c1297380c4fd2863","toSide":"top"},
		{"id":"8e0970503c110e61","fromNode":"f4c8835895178c79","fromSide":"bottom","toNode":"6ad8b90d64f1f7b6","toSide":"right"},
		{"id":"e431747bd7bc8f59","fromNode":"c1297380c4fd2863","fromSide":"bottom","toNode":"f854fa3353fb4e42","toSide":"top"},
		{"id":"c1fd35e86ca790a7","fromNode":"f854fa3353fb4e42","fromSide":"left","toNode":"6e659f494915a60b","toSide":"right","toEnd":"none"},
		{"id":"ce0565376e8f3fe1","fromNode":"c1297380c4fd2863","fromSide":"right","toNode":"faaa881d341c2218","toSide":"right"},
		{"id":"b7252f768f8c2a36","fromNode":"faaa881d341c2218","fromSide":"bottom","toNode":"d13d075067abbb83","toSide":"top"},
		{"id":"729d1939393a24e4","fromNode":"d13d075067abbb83","fromSide":"bottom","toNode":"429c1fc3aec97a01","toSide":"top"},
		{"id":"410ef3de4b053e28","fromNode":"3e4aee0ad6301e45","fromSide":"left","toNode":"211466fbd34581f8","toSide":"right"},
		{"id":"11ef78658a6fa703","fromNode":"211466fbd34581f8","fromSide":"left","toNode":"a95734005ea080f0","toSide":"right","toEnd":"none"},
		{"id":"c9ae753da3fe944b","fromNode":"a95734005ea080f0","fromSide":"bottom","toNode":"da903a45bcde07cc","toSide":"top"},
		{"id":"7eaa42e00dd0779d","fromNode":"20eb5991ac6bdb58","fromSide":"bottom","toNode":"dd67a06aa7df9720","toSide":"top"},
		{"id":"43cd025b083a0280","fromNode":"d181221686bf60f4","fromSide":"bottom","toNode":"b18c7c58ca557432","toSide":"top","toEnd":"none","label":"="},
		{"id":"aac757f71624022d","fromNode":"d181221686bf60f4","fromSide":"left","toNode":"c42b6bdbcbbaf1ae","toSide":"right","toEnd":"none"},
		{"id":"0977aa2fd0ac4853","fromNode":"b18c7c58ca557432","fromSide":"bottom","toNode":"ab23e339f812bb92","toSide":"top"},
		{"id":"7c81eac49bfef4b0","fromNode":"ab23e339f812bb92","fromSide":"bottom","toNode":"4eedcec5e5b28e24","toSide":"top"},
		{"id":"b0b8cecfd1ea57a3","fromNode":"4eedcec5e5b28e24","fromSide":"left","toNode":"cd3ef5934c87f8b5","toSide":"right"},
		{"id":"1772b45934717b60","fromNode":"d13d075067abbb83","fromSide":"left","toNode":"a6150e1a705252c6","toSide":"right"},
		{"id":"b2b3a64325d6d19d","fromNode":"429c1fc3aec97a01","fromSide":"left","toNode":"dd67a06aa7df9720","toSide":"right"},
		{"id":"5018ad9f6428d8dc","fromNode":"faaa881d341c2218","fromSide":"left","toNode":"38ec6fd0e1df3abe","toSide":"right"},
		{"id":"4af7f63679aab931","fromNode":"6434ea7cec9cb143","fromSide":"left","toNode":"da8af8c020791d6d","toSide":"right","toEnd":"none"},
		{"id":"e8149fbd414091c8","fromNode":"da8af8c020791d6d","fromSide":"bottom","toNode":"3322e571381ef024","toSide":"top"},
		{"id":"b2c30726ae21faa4","fromNode":"63211b26ef076753","fromSide":"left","toNode":"a92a949782d81ab7","toSide":"right","toEnd":"none"},
		{"id":"e924d25f654311c3","fromNode":"6434ea7cec9cb143","fromSide":"bottom","toNode":"63211b26ef076753","toSide":"right"},
		{"id":"ff52ceaa9ec466dc","fromNode":"6434ea7cec9cb143","fromSide":"bottom","toNode":"b29757cf4099b359","toSide":"right"},
		{"id":"d851bb1c7e7d2962","fromNode":"b29757cf4099b359","fromSide":"left","toNode":"7c8ced9576fb4fe5","toSide":"right"},
		{"id":"1fc03eb0bb11de9b","fromNode":"3322e571381ef024","fromSide":"left","toNode":"7c8ced9576fb4fe5","toSide":"top"},
		{"id":"57355f8b98444094","fromNode":"620e4ecb30317264","fromSide":"bottom","toNode":"960a1eeda1224862","toSide":"top"},
		{"id":"9b2e42c3b6e57f85","fromNode":"620e4ecb30317264","fromSide":"left","toNode":"52ced3011fed2d2b","toSide":"right"},
		{"id":"606f739b99faec33","fromNode":"620e4ecb30317264","fromSide":"bottom","toNode":"1fa6fc6039c30d22","toSide":"right"},
		{"id":"791d4e642d29653b","fromNode":"1fa6fc6039c30d22","fromSide":"bottom","toNode":"a906acbed2b3f5e5","toSide":"top"},
		{"id":"0bb533938d923e79","fromNode":"a906acbed2b3f5e5","fromSide":"right","toNode":"03957be3890b1bac","toSide":"left","toEnd":"none"},
		{"id":"d013445758a2dfb3","fromNode":"a906acbed2b3f5e5","fromSide":"bottom","toNode":"a2949afdf5ee3a49","toSide":"top"},
		{"id":"39a6b184d6f3d9fd","fromNode":"a2949afdf5ee3a49","fromSide":"bottom","toNode":"6434ea7cec9cb143","toSide":"top"},
		{"id":"88127d0520b84fea","fromNode":"a2949afdf5ee3a49","fromSide":"left","toNode":"0b326bfb11a251fd","toSide":"right"},
		{"id":"4c38533ab36bfc5b","fromNode":"a2949afdf5ee3a49","fromSide":"left","toNode":"224163b8e83b5282","toSide":"right"},
		{"id":"02169ac1beb44a58","fromNode":"a2949afdf5ee3a49","fromSide":"left","toNode":"86cd1b71410dbbd4","toSide":"right"},
		{"id":"2ecc522a57a4274b","fromNode":"0b326bfb11a251fd","fromSide":"left","toNode":"f405035bf3cd94c2","toSide":"left"},
		{"id":"9397b85da1f26dc1","fromNode":"f405035bf3cd94c2","fromSide":"bottom","toNode":"4bbdb676a2f34e2c","toSide":"top"},
		{"id":"67f7a6a7b9009d01","fromNode":"960a1eeda1224862","fromSide":"right","toNode":"5d569e2470e4b3a7","toSide":"left"},
		{"id":"ee857ee4a12ce5a0","fromNode":"5d569e2470e4b3a7","fromSide":"right","toNode":"9e49ad2eb2a95e25","toSide":"left","toEnd":"none"},
		{"id":"43b81bc750de3210","fromNode":"5d569e2470e4b3a7","fromSide":"bottom","toNode":"755f5798372b3adb","toSide":"top"},
		{"id":"9967ddb10f00ccf5","fromNode":"755f5798372b3adb","fromSide":"right","toNode":"4cf5eceb94c0d748","toSide":"left","toEnd":"none"},
		{"id":"e78dc1009eb4caa2","fromNode":"5d569e2470e4b3a7","fromSide":"top","toNode":"7ae67c361a709be8","toSide":"left"},
		{"id":"d0ed7dce656378b8","fromNode":"3170e1a961c8b8c9","fromSide":"bottom","toNode":"7ae67c361a709be8","toSide":"top"},
		{"id":"c5a3fa81963b39b4","fromNode":"4cf5eceb94c0d748","fromSide":"right","toNode":"0059cf20991d4c5d","toSide":"left"},
		{"id":"816a61b010217ab1","fromNode":"6434ea7cec9cb143","fromSide":"bottom","toNode":"add3326e73a6e30b","toSide":"right"},
		{"id":"057f6ad03118a369","fromNode":"add3326e73a6e30b","fromSide":"left","toNode":"1acf1eebc9163983","toSide":"right","toEnd":"none"},
		{"id":"3a8cb65e86e71b35","fromNode":"1acf1eebc9163983","fromSide":"bottom","toNode":"d91a2c556f3b07eb","toSide":"top"},
		{"id":"9e52d75fc6268948","fromNode":"d91a2c556f3b07eb","fromSide":"left","toNode":"26c87e2ba72aa51d","toSide":"right","toEnd":"none","label":"="},
		{"id":"31335dc2ac153ded","fromNode":"960a1eeda1224862","fromSide":"right","toNode":"5e893ed62e93a584","toSide":"left"},
		{"id":"2d749b85af65eada","fromNode":"5e893ed62e93a584","fromSide":"right","toNode":"83767886e3537540","toSide":"left"},
		{"id":"cd8d887d621c63f9","fromNode":"83767886e3537540","fromSide":"right","toNode":"580efae7a5f0eeda","toSide":"left"},
		{"id":"5218d8549c230397","fromNode":"6434ea7cec9cb143","fromSide":"bottom","toNode":"8d2ffebb54e416e3","toSide":"right"},
		{"id":"835111819844d126","fromNode":"bc17c43c37518d1a","fromSide":"bottom","toNode":"8d2ffebb54e416e3","toSide":"top"},
		{"id":"b0ebee83ffef8090","fromNode":"8d2ffebb54e416e3","fromSide":"bottom","toNode":"82cf0a2a3796212f","toSide":"top"},
		{"id":"408d6017db45cdb0","fromNode":"82cf0a2a3796212f","fromSide":"left","toNode":"ddf73a31be77046d","toSide":"right"},
		{"id":"69ccbbbeb2890537","fromNode":"ddf73a31be77046d","fromSide":"bottom","toNode":"06bb1277c99e7db8","toSide":"top"},
		{"id":"d174fad4d6f5fc99","fromNode":"06bb1277c99e7db8","fromSide":"right","toNode":"3b8f818fda4cb5d8","toSide":"left"},
		{"id":"0dcfc808f38483a3","fromNode":"3b8f818fda4cb5d8","fromSide":"right","toNode":"ae109d6429f4430d","toSide":"left"}
	]
}