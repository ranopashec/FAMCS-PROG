{
	"nodes":[
		{"type":"text","text":"Smart pointer ","id":"b8ca445ee8d18dda","x":-125,"y":-30,"width":165,"height":50,"color":"3"},
		{"type":"text","text":"is a composition class that is designed to manage dynamically allocated memory and ensure that memory gets deleted when the smart pointer object goes out of scope.","id":"2c0094acc63993ea","x":80,"y":-46,"width":680,"height":82},
		{"type":"text","text":"Move semantics","id":"ea84b222b8503f3d","x":80,"y":73,"width":188,"height":54,"color":"6"},
		{"type":"text","text":"means the class will transfer ownership of the object rather than making a copy.\n\n","id":"a232817825d54549","x":369,"y":59,"width":391,"height":80},
		{"type":"text","text":"r-value reference","id":"e1e18ab4b57a8df5","x":301,"y":195,"width":180,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\nint& &rref{ 5 }; // r-value reference initialized with r-value 5\n```","id":"0af69122b0ba7e45","x":543,"y":180,"width":434,"height":81},
		{"id":"49fd4f419c6e8d0f","x":543,"y":311,"width":434,"height":100,"type":"text","text":"is a standard library function that casts (using static_cast) its argument into an r-value reference, so that move semantics can be invoked"},
		{"id":"0ebf55d13e4a7ab6","x":301,"y":336,"width":180,"height":50,"color":"6","type":"text","text":"std::move"},
		{"id":"a5d45b3607c408be","x":320,"y":261,"width":140,"height":50,"type":"text","text":"`<utility>`"},
		{"id":"9605d1e656a236d9","x":1120,"y":331,"width":250,"height":60,"color":"6","type":"text","text":"std::move_if_noexcept()"},
		{"id":"02b7d39c93cf2893","x":1400,"y":324,"width":526,"height":75,"type":"text","text":"will return a movable r-value if the object has a noexcept move constructor, otherwise it will return a copyable l-value."},
		{"id":"7bb4db6f26f12f5c","x":-167,"y":331,"width":250,"height":60,"type":"text","text":"```cpp\n#include <memory>\n```"},
		{"id":"acd89719cf8c85de","x":83,"y":440,"width":515,"height":57,"type":"text","text":"```cpp\nstd::unique_ptr<ClassType> name{ new ClassType{} };\n```"},
		{"id":"cfe77c86402b6c7c","x":960,"y":437,"width":600,"height":199,"type":"text","text":"```cpp\ntemplate<class T>\nvoid myswapMove(T& a, T& b)\n{\n\tT tmp { std::move(a) }; // invokes move constructor\n\ta = std::move(b); // invokes move assignment\n\tb = std::move(tmp); // invokes move assignment\n}\n```"},
		{"id":"682ad3d3b97a82cc","x":157,"y":520,"width":367,"height":78,"color":"4","type":"text","text":"Use std::make_unique() instead of creating std::unique_ptr and using new yourself."},
		{"id":"33733a62856fe149","x":543,"y":598,"width":385,"height":104,"type":"text","text":"templated function that constructs an object of the template type and initializes it with the arguments passed into the function."},
		{"id":"814bacf12fe16c88","x":228,"y":621,"width":225,"height":57,"type":"text","text":"`std::make_unique()`"},
		{"id":"3abc28b38bda9934","x":83,"y":760,"width":214,"height":51,"type":"text","text":"`std::shared_ptr`"},
		{"id":"7060a050013b2095","x":391,"y":731,"width":537,"height":109,"type":"text","text":"as long as at least one std::shared_ptr is pointing to the resource, the resource will not be deallocated, even if individual std::shared_ptr are destroyed."},
		{"id":"f8ec23812977e14c","x":-338,"y":171,"width":213,"height":50,"color":"2","type":"text","text":"# [END THIS LATER](https://www.learncpp.com/cpp-tutorial/circular-dependency-issues-with-stdshared_ptr-and-stdweak_ptr/)"}
	],
	"edges":[
		{"id":"d071bba3274c85e1","fromNode":"b8ca445ee8d18dda","fromSide":"right","toNode":"2c0094acc63993ea","toSide":"left","toEnd":"none"},
		{"id":"217f73fca6519d7b","fromNode":"ea84b222b8503f3d","fromSide":"right","toNode":"a232817825d54549","toSide":"left","toEnd":"none"},
		{"id":"eda8be10a7c0d9fe","fromNode":"e1e18ab4b57a8df5","fromSide":"right","toNode":"0af69122b0ba7e45","toSide":"left","toEnd":"none"},
		{"id":"8e6e0a82679150c7","fromNode":"b8ca445ee8d18dda","fromSide":"bottom","toNode":"ea84b222b8503f3d","toSide":"left"},
		{"id":"8a97cee5fab275c1","fromNode":"ea84b222b8503f3d","fromSide":"bottom","toNode":"e1e18ab4b57a8df5","toSide":"left"},
		{"id":"bfba884864852331","fromNode":"ea84b222b8503f3d","fromSide":"bottom","toNode":"0ebf55d13e4a7ab6","toSide":"left"},
		{"id":"3c2384cd08562fdf","fromNode":"0ebf55d13e4a7ab6","fromSide":"right","toNode":"49fd4f419c6e8d0f","toSide":"left","toEnd":"none"},
		{"id":"ba98c036a675fb32","fromNode":"49fd4f419c6e8d0f","fromSide":"bottom","toNode":"cfe77c86402b6c7c","toSide":"left"},
		{"id":"ba7738f75762d9d6","fromNode":"a5d45b3607c408be","fromSide":"bottom","toNode":"0ebf55d13e4a7ab6","toSide":"top"},
		{"id":"d43c442532863566","fromNode":"49fd4f419c6e8d0f","fromSide":"right","toNode":"9605d1e656a236d9","toSide":"left","fromEnd":"arrow","color":"6"},
		{"id":"4a4ed8088af00711","fromNode":"9605d1e656a236d9","fromSide":"right","toNode":"02b7d39c93cf2893","toSide":"left","toEnd":"none"},
		{"id":"ff0725593e60ea37","fromNode":"b8ca445ee8d18dda","fromSide":"bottom","toNode":"7bb4db6f26f12f5c","toSide":"top"},
		{"id":"bad0c5623b373811","fromNode":"7bb4db6f26f12f5c","fromSide":"bottom","toNode":"acd89719cf8c85de","toSide":"left"},
		{"id":"ba12e88ee15aec1e","fromNode":"7bb4db6f26f12f5c","fromSide":"bottom","toNode":"814bacf12fe16c88","toSide":"left"},
		{"id":"ed0de2af9efd4bb3","fromNode":"814bacf12fe16c88","fromSide":"right","toNode":"33733a62856fe149","toSide":"left","toEnd":"none"},
		{"id":"7caba2acd04cf80b","fromNode":"acd89719cf8c85de","fromSide":"bottom","toNode":"682ad3d3b97a82cc","toSide":"top"},
		{"id":"f6e80385bd4e31ec","fromNode":"682ad3d3b97a82cc","fromSide":"bottom","toNode":"814bacf12fe16c88","toSide":"top"},
		{"id":"7df643153faac659","fromNode":"7bb4db6f26f12f5c","fromSide":"bottom","toNode":"3abc28b38bda9934","toSide":"left"},
		{"id":"6ebca69e051b00d5","fromNode":"3abc28b38bda9934","fromSide":"right","toNode":"7060a050013b2095","toSide":"left","toEnd":"none"},
		{"id":"0598a1bbc0a1632b","fromNode":"b8ca445ee8d18dda","fromSide":"bottom","toNode":"f8ec23812977e14c","toSide":"top"}
	]
}