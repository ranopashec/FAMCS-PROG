{
	"nodes":[
		{"type":"text","text":"memory areas, used by program","id":"e111193888a9e58f","x":-2040,"y":-910,"width":220,"height":73,"color":"6"},
		{"type":"text","text":"code segment","id":"b43c449758e97dfc","x":-3120,"y":-620,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"data segment","id":"d8de8157534471ee","x":-2055,"y":-620,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"call stack","id":"347957bbf50bce43","x":-990,"y":-620,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"heap","id":"4d345d3233a46636","x":-1520,"y":-620,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"bss segment","id":"e306bdf6ca622ce1","x":-2560,"y":-620,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"where the compiled program sits in memory. The code segment is typically read-only.","id":"3bb97f3aab01ea96","x":-3228,"y":-520,"width":466,"height":100},
		{"type":"text","text":"where zero-initialized global and static variables are stored","id":"19d1731b2fc527be","x":-2610,"y":-520,"width":350,"height":100},
		{"type":"text","text":"where initialized global and static variables are stored","id":"637aa8bd645bfdb5","x":-2086,"y":-520,"width":312,"height":100},
		{"type":"text","text":"where dynamically allocated variables are allocated from","id":"541c359b45bc59d1","x":-1570,"y":-520,"width":350,"height":100},
		{"type":"text","text":"`new` operator","id":"fdc0ad7077ae2470","x":-1494,"y":-360,"width":199,"height":65},
		{"type":"text","text":"where function parameters, local variables, and other function-related information are stored","id":"9f0ee146acdd5622","x":-1115,"y":-274,"width":500,"height":100},
		{"type":"text","text":"**data structure**","id":"e8f0e48b48094167","x":-1257,"y":21,"width":190,"height":65,"color":"6"},
		{"type":"text","text":"is a programming mechanism for organizing data so that it can be used efficiently","id":"0161208a4366b538","x":-1394,"y":135,"width":465,"height":99},
		{"type":"text","text":"is a container data structure that holds multiple variables (much like an array)","id":"6850809a4c4be717","x":-1919,"y":0,"width":400,"height":107},
		{"type":"text","text":"stack","id":"766afa9b5faab871","x":-1459,"y":21,"width":130,"height":65,"color":"6"},
		{"type":"text","text":"- Look at the top item on the stack (usually done via a function called `top()`, but sometimes called `peek()`)\n- Take the top item off of the stack (done via a function called `pop()`)\n- Put a new item on top of the stack (done via a function called `push()`)","id":"2391b902130abc52","x":-2254,"y":257,"width":1070,"height":121},
		{"type":"text","text":"call stack segment","id":"145cbe68091d7741","x":-980,"y":21,"width":230,"height":65,"color":"6"},
		{"type":"text","text":"holds the memory used for the call stack.","id":"c9d9a59eec7d0d31","x":-700,"y":0,"width":265,"height":106},
		{"type":"text","text":"When a function call is encountered, the function is pushed onto the call stack","id":"fb1ca59a62534fe1","x":-1084,"y":268,"width":439,"height":99},
		{"type":"text","text":"unwinding the stack","id":"ae66d98668cec255","x":-983,"y":426,"width":238,"height":50,"color":"6"},
		{"type":"text","text":"When the current function ends, that function is popped off the call stack","id":"f1249d559a07b586","x":-700,"y":396,"width":386,"height":110},
		{"type":"text","text":"**stack frames**","id":"a45dbe2356780615","x":-962,"y":657,"width":195,"height":67,"color":"6"},
		{"type":"text","text":"The mailboxes are memory addresses, and the “items” we’re pushing and popping on the stack","id":"c1766a9a6035e438","x":-700,"y":638,"width":500,"height":106},
		{"type":"text","text":"```cpp\n// fcnPtr is a pointer to a function that takes no arguments and returns an integer\nint (*fcnPtr)();\n```","id":"30f51de7dc2f8b4c","x":231,"y":-234,"width":612,"height":120},
		{"type":"text","text":"const function pointer","id":"bfbcb3eba262a1db","x":231,"y":-83,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"```cpp\nint (*const fcnPtr)();\n```","id":"1b4368ff563adbd2","x":513,"y":-92,"width":330,"height":78},
		{"type":"text","text":"```cpp\n    int (*fcnPtr)(){ &foo }; // fcnPtr points to function foo\n    fcnPtr = &goo; // fcnPtr now points to function goo\n```","id":"79790a751a9531f7","x":871,"y":-222,"width":840,"height":97},
		{"type":"text","text":"```cpp\nint (*fcnPtr)(int){ &foo }; // Initialize fcnPtr with function foo\n(*fcnPtr)(5); // call function foo(5) through fcnPtr.\nfcnPtr(5); // call function foo(5) through fcnPtr.\n```","id":"f3fc12d35e855829","x":871,"y":-107,"width":840,"height":124},
		{"type":"text","text":"```cpp\n#include <functional> // header\n```","id":"a97b3a8766fc0711","x":414,"y":17,"width":429,"height":80},
		{"type":"text","text":"```cpp\nstd::function<int()> fcnPtr{ &foo }; // declare function pointer that returns an int and takes no parameters\n```","id":"f2c0a1e7b814a735","x":280,"y":146,"width":698,"height":102},
		{"type":"text","text":"`std::function` only allows calling the function via implicit dereference (e.g. `fcnPtr()`), not explicit dereference (e.g. `(*fcnPtr)()`).","id":"c843b69db8840466","x":1015,"y":154,"width":696,"height":85},
		{"type":"text","text":"```cpp\nvoid selectionSort(int* x, int y, bool (*comparisonFcn)(int, int)) {  }\n```","id":"d6aa5866ab9c565b","x":-677,"y":146,"width":908,"height":79},
		{"type":"text","text":"Functions used as arguments to another function","id":"34e685760dfdb418","x":-396,"y":37,"width":346,"height":78},
		{"type":"text","text":"callback functions","id":"06cfd06fde98c5bf","x":-336,"y":-76,"width":226,"height":53,"color":"6"},
		{"type":"text","text":"**Pointers to functions**","id":"674e8e67d482ce71","x":-75,"y":-205,"width":266,"height":62,"color":"6"},
		{"type":"text","text":"[Functions](notes/studies/programming/c++/2.0%20-%20functions%20and%20files.canvas)","id":"15f9890f1e702092","x":2160,"y":-600,"width":160,"height":60,"color":"3"},
		{"type":"text","text":"**recursive function**","id":"65a5c1ceced39ce5","x":1753,"y":-204,"width":250,"height":62,"color":"6"},
		{"type":"text","text":"is a function that calls itself","id":"93d847661b0534f7","x":2027,"y":-211,"width":212,"height":76},
		{"type":"text","text":"**recursive termination**","id":"9503107ee80c4403","x":2027,"y":-95,"width":266,"height":50,"color":"6"},
		{"type":"text","text":"base case","id":"c449812ecee402b2","x":2027,"y":17,"width":186,"height":50,"color":"6"},
		{"type":"text","text":"is a condition that, when met, will cause the recursive function to stop calling itself.","id":"bc130e49f7ff83ff","x":2333,"y":-114,"width":462,"height":89},
		{"type":"text","text":"Inputs for which an algorithm trivially produces an output","id":"a92197cc0536ab90","x":2333,"y":1,"width":462,"height":83},
		{"type":"text","text":"**memoization**","id":"c41ffc8188a09af9","x":2027,"y":157,"width":186,"height":50,"color":"6"},
		{"type":"text","text":"technique, that caches the results of expensive function calls so the result can be returned when the same input occurs again","id":"9b9e06d8c8057429","x":2333,"y":120,"width":462,"height":125},
		{"type":"text","text":"```cpp\nint main(int argc, char* argv[])\n{\n    std::cout << \"There are \" << argc << \" arguments:\\n\";\n    // Loop through each argument and print its number and value\n    for (int count{ 0 }; count < argc; ++count)\n    {\n        std::cout << count << ' ' << argv[count] << '\\n';\n    }\n```","id":"edd084ba729368e7","x":2700,"y":280,"width":720,"height":240},
		{"type":"text","text":"are optional string arguments that are passed by the operating system to the program when it is launched","id":"3edea151a7f114f6","x":2286,"y":-220,"width":577,"height":95},
		{"type":"text","text":"Command line arguments","id":"e84c1358f7375d9e","x":2910,"y":-204,"width":291,"height":62,"color":"6"},
		{"type":"text","text":"```cpp\n#include <iostream>\n#include <cstdarg> // needed to use ellipsis\ndouble findAverage(int count, ...) // The ellipsis must be the last parameter. Сount is how many additional arguments we're passing.\n{\n    int sum{ 0 };\n    std::va_list list; // We access the ellipsis through a va_list\n    // We initialize the va_list using va_start.  The first argument is the list to initialize.  The second argument is the last non-ellipsis parameter.\n    va_start(list, count);\n    for (int arg{ 0 }; arg < count; ++arg)// Loop through all the ellipsis values\n    {\n         // We use va_arg to get values out of our ellipsis\n         // The first argument is the va_list we're using\n         // The second argument is the type of the value\n         sum += va_arg(list, int);\n    }\n    va_end(list);  // Cleanup the va_list when we're done.\n    return static_cast<double>(sum) / count;\n}\nint main()\n{\n    std::cout << findAverage(5, 1, 2, 3, 4, 5) << '\\n';\n    std::cout << findAverage(6, 1, 2, 3, 4, 5, 6) << '\\n';\n}\n```","id":"95db03bc54d8a5a8","x":3460,"y":-2,"width":802,"height":602},
		{"type":"text","text":"ellipsis","id":"d9a867fb160179ec","x":3802,"y":-204,"width":117,"height":62,"color":"6"},
		{"type":"text","text":"return_type function_name(argument_list, ...)","id":"c1c4042bba84b5e8","x":3621,"y":-114,"width":480,"height":53},
		{"type":"text","text":"```cpp\n[ captureClause ] ( parameters ) -> returnType\n{\n    statements;\n}\n```","id":"be767ce61986c99d","x":4320,"y":40,"width":598,"height":166},
		{"type":"text","text":"(also called a lambda or closure) allows us to define an anonymous function inside another function","id":"1bce0aa937b39332","x":4440,"y":-114,"width":357,"height":117},
		{"type":"text","text":"lambda expression","id":"4e3a99b20c9bc371","x":4507,"y":-204,"width":222,"height":62,"color":"6"},
		{"type":"text","text":"function literal","id":"beb3c089ced97ebf","x":4522,"y":240,"width":193,"height":60,"color":"6"},
		{"type":"text","text":"use of a lambda right where it was needed","id":"34ced6b495452332","x":4767,"y":225,"width":254,"height":90},
		{"type":"text","text":"Functor","id":"13f9ed47947b476b","x":4555,"y":-500,"width":127,"height":56,"color":"6"},
		{"type":"text","text":"object that contain an overloaded `operator()` that make it callable like a function","id":"d2ebaaf1ca75d439","x":4729,"y":-519,"width":475,"height":94},
		{"type":"text","text":"capture clause","id":"e485f4df2f413432","x":4526,"y":357,"width":185,"height":59,"color":"6"},
		{"type":"text","text":"is used to (indirectly) give a lambda access to variables available in the surrounding scope that it normally would not have access to.","id":"ee6a785e727df5fb","x":4767,"y":336,"width":655,"height":101},
		{"type":"text","text":"The captured variables of a lambda are _clones_ of the outer scope variables, not the actual variables.","id":"984156db3c1a68cc","x":4896,"y":480,"width":398,"height":124},
		{"type":"text","text":"By default, variables are captured by `const value`","id":"073a57a1ed5ed58a","x":5334,"y":500,"width":319,"height":84},
		{"type":"text","text":"Because captured variables are members of the lambda object, their values are persisted across multiple calls to the lambda!","id":"2e5e5f4e0ccb2809","x":5680,"y":497,"width":643,"height":87,"color":"1"},
		{"type":"text","text":" Variables that are captured by reference are non-const, unless the variable they’re capturing is `const`","id":"f6f279925e4f0685","x":5732,"y":336,"width":540,"height":85},
		{"type":"text","text":"removes the `const` qualification from _all_ variables captured by value.","id":"f425021a68e6f6c7","x":5249,"y":670,"width":374,"height":91},
		{"type":"text","text":"```cpp\n[capturedVariable]() mutable {\n      // We're allowed to modify capturedVariable now\n      --capturedVariable;\n```","id":"d61933a9e69550d4","x":5662,"y":656,"width":680,"height":119},
		{"type":"text","text":"`mutable` keyword","id":"4df8be010c544ced","x":4986,"y":689,"width":229,"height":53,"color":"6"},
		{"type":"text","text":"default capture","id":"d1b687e1f63042a6","x":4986,"y":830,"width":229,"height":60,"color":"6"},
		{"type":"text","text":"aptures all variables that are mentioned in the lambda. Variables not mentioned in the lambda are not captured if a default capture is used.","id":"7a91ca4b779aa8d6","x":5249,"y":804,"width":684,"height":113},
		{"type":"text","text":"To capture all used variables by value, use a capture value of =.  \nTo capture all used variables by reference, use a capture value of &.","id":"06ffbd1ccc6c0631","x":5990,"y":819,"width":704,"height":84},
		{"type":"text","text":"If you want to provide lambdas with mutable captured variables, pass them by reference using `std::ref()`.","id":"e8fac36c3d16dad7","x":4986,"y":960,"width":1040,"height":71,"color":"4"},
		{"type":"text","text":"1. **Pass a length parameter**\n2. **Use a sentinel value**\n3. **Use a decoder string**","id":"1906fd8559a32a9d","x":3687,"y":640,"width":349,"height":140}
	],
	"edges":[
		{"id":"3b646769aa7550c1","fromNode":"674e8e67d482ce71","fromSide":"right","toNode":"30f51de7dc2f8b4c","toSide":"left"},
		{"id":"bff5a8118e3b31c2","fromNode":"674e8e67d482ce71","fromSide":"bottom","toNode":"bfbcb3eba262a1db","toSide":"left"},
		{"id":"06104688639f7b37","fromNode":"bfbcb3eba262a1db","fromSide":"right","toNode":"1b4368ff563adbd2","toSide":"left"},
		{"id":"57bb9142b9a7aaa1","fromNode":"30f51de7dc2f8b4c","fromSide":"right","toNode":"79790a751a9531f7","toSide":"left"},
		{"id":"7a35e1271a313dad","fromNode":"79790a751a9531f7","fromSide":"bottom","toNode":"f3fc12d35e855829","toSide":"top"},
		{"id":"05f79629aacddaab","fromNode":"15f9890f1e702092","fromSide":"bottom","toNode":"674e8e67d482ce71","toSide":"top"},
		{"id":"adbdcb35a6dc1014","fromNode":"06cfd06fde98c5bf","fromSide":"bottom","toNode":"34e685760dfdb418","toSide":"top","toEnd":"none"},
		{"id":"6c70f3e3a0440969","fromNode":"34e685760dfdb418","fromSide":"bottom","toNode":"d6aa5866ab9c565b","toSide":"top"},
		{"id":"1d78f5b4c6a35550","fromNode":"a97b3a8766fc0711","fromSide":"bottom","toNode":"f2c0a1e7b814a735","toSide":"top"},
		{"id":"08ad17daf04937ff","fromNode":"674e8e67d482ce71","fromSide":"bottom","toNode":"06cfd06fde98c5bf","toSide":"right"},
		{"id":"c43163ba29f8b522","fromNode":"674e8e67d482ce71","fromSide":"bottom","toNode":"a97b3a8766fc0711","toSide":"left"},
		{"id":"de5cc8034347c3e1","fromNode":"f2c0a1e7b814a735","fromSide":"right","toNode":"c843b69db8840466","toSide":"left"},
		{"id":"040d3ad9c7666f64","fromNode":"e111193888a9e58f","fromSide":"bottom","toNode":"b43c449758e97dfc","toSide":"top"},
		{"id":"ccd466ca0b692337","fromNode":"e111193888a9e58f","fromSide":"bottom","toNode":"e306bdf6ca622ce1","toSide":"top"},
		{"id":"7b96a58c2319fc9b","fromNode":"e111193888a9e58f","fromSide":"bottom","toNode":"d8de8157534471ee","toSide":"top"},
		{"id":"b18d4d44a9873125","fromNode":"e111193888a9e58f","fromSide":"bottom","toNode":"4d345d3233a46636","toSide":"top"},
		{"id":"53a2ca92e7c3736c","fromNode":"e111193888a9e58f","fromSide":"bottom","toNode":"347957bbf50bce43","toSide":"top"},
		{"id":"9b8152f8e5ed56c5","fromNode":"b43c449758e97dfc","fromSide":"bottom","toNode":"3bb97f3aab01ea96","toSide":"top","toEnd":"none"},
		{"id":"3aaf85b2fb6593d5","fromNode":"e306bdf6ca622ce1","fromSide":"bottom","toNode":"19d1731b2fc527be","toSide":"top","toEnd":"none"},
		{"id":"93d1b9ea71d3e67e","fromNode":"d8de8157534471ee","fromSide":"bottom","toNode":"637aa8bd645bfdb5","toSide":"top","toEnd":"none"},
		{"id":"b3ac73882d9239d3","fromNode":"4d345d3233a46636","fromSide":"bottom","toNode":"541c359b45bc59d1","toSide":"top","toEnd":"none"},
		{"id":"41fff83a9dc91412","fromNode":"347957bbf50bce43","fromSide":"bottom","toNode":"9f0ee146acdd5622","toSide":"top","toEnd":"none"},
		{"id":"a139be7308fbae05","fromNode":"541c359b45bc59d1","fromSide":"bottom","toNode":"fdc0ad7077ae2470","toSide":"top"},
		{"id":"7b55d348cf64c221","fromNode":"9f0ee146acdd5622","fromSide":"bottom","toNode":"e8f0e48b48094167","toSide":"top"},
		{"id":"69de2a3aca65422c","fromNode":"e8f0e48b48094167","fromSide":"bottom","toNode":"0161208a4366b538","toSide":"top","toEnd":"none"},
		{"id":"4913203b0ef7c90a","fromNode":"e8f0e48b48094167","fromSide":"left","toNode":"766afa9b5faab871","toSide":"right"},
		{"id":"0762a3de2f05dea7","fromNode":"766afa9b5faab871","fromSide":"left","toNode":"6850809a4c4be717","toSide":"right"},
		{"id":"f6bebcc012427e10","fromNode":"6850809a4c4be717","fromSide":"bottom","toNode":"2391b902130abc52","toSide":"top"},
		{"id":"ac2e4e28a4212da1","fromNode":"9f0ee146acdd5622","fromSide":"bottom","toNode":"145cbe68091d7741","toSide":"top"},
		{"id":"3237d11fb29f3b93","fromNode":"145cbe68091d7741","fromSide":"right","toNode":"c9d9a59eec7d0d31","toSide":"left","toEnd":"none"},
		{"id":"dc400987f70ae86b","fromNode":"145cbe68091d7741","fromSide":"bottom","toNode":"fb1ca59a62534fe1","toSide":"top"},
		{"id":"bcefad2907160c86","fromNode":"fb1ca59a62534fe1","fromSide":"bottom","toNode":"ae66d98668cec255","toSide":"top"},
		{"id":"768f7f45d7ad12b6","fromNode":"ae66d98668cec255","fromSide":"right","toNode":"f1249d559a07b586","toSide":"left","toEnd":"none"},
		{"id":"a875690575de34d3","fromNode":"ae66d98668cec255","fromSide":"bottom","toNode":"a45dbe2356780615","toSide":"top"},
		{"id":"9c4e066c51dea403","fromNode":"a45dbe2356780615","fromSide":"right","toNode":"c1766a9a6035e438","toSide":"left","toEnd":"none"},
		{"id":"3456e65811e3e02b","fromNode":"15f9890f1e702092","fromSide":"bottom","toNode":"65a5c1ceced39ce5","toSide":"top"},
		{"id":"b168e27203983fe7","fromNode":"65a5c1ceced39ce5","fromSide":"right","toNode":"93d847661b0534f7","toSide":"left","toEnd":"none"},
		{"id":"0ace40e06647b6ec","fromNode":"65a5c1ceced39ce5","fromSide":"bottom","toNode":"9503107ee80c4403","toSide":"left"},
		{"id":"468eb888f411e7a4","fromNode":"9503107ee80c4403","fromSide":"right","toNode":"bc130e49f7ff83ff","toSide":"left","toEnd":"none"},
		{"id":"a8f12c3eb0404918","fromNode":"65a5c1ceced39ce5","fromSide":"bottom","toNode":"c449812ecee402b2","toSide":"left"},
		{"id":"46a2d15e9a4c1d26","fromNode":"c449812ecee402b2","fromSide":"right","toNode":"a92197cc0536ab90","toSide":"left","toEnd":"none"},
		{"id":"aebb3ba212a51718","fromNode":"65a5c1ceced39ce5","fromSide":"bottom","toNode":"c41ffc8188a09af9","toSide":"left"},
		{"id":"4a003eff022a4081","fromNode":"c41ffc8188a09af9","fromSide":"right","toNode":"9b9e06d8c8057429","toSide":"left","toEnd":"none"},
		{"id":"ab239caf3e0bcb18","fromNode":"15f9890f1e702092","fromSide":"bottom","toNode":"e84c1358f7375d9e","toSide":"top"},
		{"id":"f97ceba2821d0342","fromNode":"e84c1358f7375d9e","fromSide":"left","toNode":"3edea151a7f114f6","toSide":"right","toEnd":"none"},
		{"id":"2863d3099e012dc9","fromNode":"e84c1358f7375d9e","fromSide":"bottom","toNode":"edd084ba729368e7","toSide":"top"},
		{"id":"624a12413b5e1c34","fromNode":"15f9890f1e702092","fromSide":"bottom","toNode":"d9a867fb160179ec","toSide":"top"},
		{"id":"322168d3457c35f9","fromNode":"d9a867fb160179ec","fromSide":"bottom","toNode":"c1c4042bba84b5e8","toSide":"top"},
		{"id":"7203d33212eecfb4","fromNode":"c1c4042bba84b5e8","fromSide":"bottom","toNode":"95db03bc54d8a5a8","toSide":"top"},
		{"id":"04804e76b4a6c521","fromNode":"95db03bc54d8a5a8","fromSide":"bottom","toNode":"1906fd8559a32a9d","toSide":"top"},
		{"id":"bdca1f6b52f86b11","fromNode":"15f9890f1e702092","fromSide":"bottom","toNode":"4e3a99b20c9bc371","toSide":"top"},
		{"id":"0d5dd59293bc6ebd","fromNode":"4e3a99b20c9bc371","fromSide":"bottom","toNode":"1bce0aa937b39332","toSide":"top","toEnd":"none"},
		{"id":"392334afeb450619","fromNode":"1bce0aa937b39332","fromSide":"bottom","toNode":"be767ce61986c99d","toSide":"top"},
		{"id":"a1d22e5eba66867a","fromNode":"be767ce61986c99d","fromSide":"bottom","toNode":"beb3c089ced97ebf","toSide":"top"},
		{"id":"44249d3f7314665b","fromNode":"beb3c089ced97ebf","fromSide":"right","toNode":"34ced6b495452332","toSide":"left","toEnd":"none"},
		{"id":"13965fd2ae6c1392","fromNode":"13f9ed47947b476b","fromSide":"right","toNode":"d2ebaaf1ca75d439","toSide":"left","toEnd":"none"},
		{"id":"0c6fa9462575009e","fromNode":"13f9ed47947b476b","fromSide":"bottom","toNode":"4e3a99b20c9bc371","toSide":"top"},
		{"id":"8348a486848c9f2e","fromNode":"beb3c089ced97ebf","fromSide":"bottom","toNode":"e485f4df2f413432","toSide":"top"},
		{"id":"27f025700a0db177","fromNode":"e485f4df2f413432","fromSide":"right","toNode":"ee6a785e727df5fb","toSide":"left","toEnd":"none"},
		{"id":"d508039cbc79b0c3","fromNode":"ee6a785e727df5fb","fromSide":"bottom","toNode":"984156db3c1a68cc","toSide":"top"},
		{"id":"3c7d1ae2a0d4e49d","fromNode":"984156db3c1a68cc","fromSide":"right","toNode":"073a57a1ed5ed58a","toSide":"left"},
		{"id":"c16b758b117d62f0","fromNode":"e485f4df2f413432","fromSide":"bottom","toNode":"4df8be010c544ced","toSide":"left"},
		{"id":"9a55287057425a04","fromNode":"4df8be010c544ced","fromSide":"right","toNode":"f425021a68e6f6c7","toSide":"left","toEnd":"none"},
		{"id":"a19743709cfa746d","fromNode":"f425021a68e6f6c7","fromSide":"right","toNode":"d61933a9e69550d4","toSide":"left"},
		{"id":"8adbaf0a772c7dec","fromNode":"2e5e5f4e0ccb2809","fromSide":"bottom","toNode":"d61933a9e69550d4","toSide":"top"},
		{"id":"7bbf492cc39d823f","fromNode":"073a57a1ed5ed58a","fromSide":"top","toNode":"f6f279925e4f0685","toSide":"left"},
		{"id":"96c19b2864af4728","fromNode":"2e5e5f4e0ccb2809","fromSide":"top","toNode":"f6f279925e4f0685","toSide":"bottom"},
		{"id":"583e61107aefdfd1","fromNode":"e485f4df2f413432","fromSide":"bottom","toNode":"d1b687e1f63042a6","toSide":"left"},
		{"id":"26f9c61532e0fb5b","fromNode":"d1b687e1f63042a6","fromSide":"right","toNode":"7a91ca4b779aa8d6","toSide":"left","toEnd":"none"},
		{"id":"d7d7e887179bc719","fromNode":"7a91ca4b779aa8d6","fromSide":"right","toNode":"06ffbd1ccc6c0631","toSide":"left"},
		{"id":"0381c0dfb3ba3ff7","fromNode":"e485f4df2f413432","fromSide":"bottom","toNode":"e8fac36c3d16dad7","toSide":"left"}
	]
}