{
	"nodes":[
		{"type":"text","text":"**Looking for exceptions**","id":"28a1684e596d13bd","x":-177,"y":191,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"`try` keyword","id":"7a33b53e08312f5e","x":-142,"y":280,"width":180,"height":54,"color":"6"},
		{"type":"text","text":"used to define a block of statements (called a **try block**).","id":"f92f209bdf0b3def","x":-220,"y":361,"width":340,"height":83},
		{"type":"text","text":"acts as an observer, looking for any exceptions that are thrown by any of the statements within the try block.","id":"b9c05bba652f0a1d","x":-220,"y":550,"width":340,"height":110},
		{"type":"text","text":"is used to signal that an exception or error case has occurred.","id":"46f7055ce4f73f54","x":-580,"y":360,"width":314,"height":84},
		{"type":"text","text":"**Throwing exceptions**","id":"d7e424a56c7424c7","x":-548,"y":191,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Signaling that an exception has occurred","id":"81a322a3669c0a3d","x":-580,"y":540,"width":314,"height":65},
		{"type":"text","text":"**throw statement**","id":"8692ea3dcef371ea","x":-521,"y":280,"width":196,"height":54,"color":"6"},
		{"type":"text","text":"**raising**","id":"51ffee80cf7c6de9","x":-521,"y":475,"width":196,"height":50,"color":"6"},
		{"type":"text","text":"exception handling process","id":"883ee7b411cad012","x":-194,"y":0,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"```cpp\ntry\n{\n    // Statements that may throw exceptions you want to handle go here\n    throw -1; // here's a trivial throw statement\n}\n```","id":"b694e80188c649bf","x":-220,"y":700,"width":340,"height":229},
		{"type":"text","text":"**Handling exceptions**","id":"814b420302b9ed53","x":220,"y":191,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"**catch** keyword","id":"1bbe499398f4cd98","x":255,"y":280,"width":180,"height":54,"color":"6"},
		{"type":"text","text":"is used to define a block of code (called a **catch block**) that handles exceptions for a single data type.","id":"1f259dd8d309de33","x":191,"y":361,"width":308,"height":83},
		{"type":"text","text":"```cpp\ncatch (int x)\n{\n    // Handle an exception of type int here\n    std::cerr << \"We caught an int exception with value\" << x << '\\n';\n}\n```","id":"a48f6e620c908377","x":150,"y":512,"width":390,"height":208},
		{"type":"text","text":"try block","id":"ab4e7b717de6248f","x":-140,"y":475,"width":180,"height":50,"color":"6"},
		{"type":"text","text":"catch-all handler","id":"071382e01f909b19","x":220,"y":755,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"works just like a normal catch block, except that instead of using a specific type to catch, it uses the ellipses operator (…) as the type to catch","id":"5a29ded93612a134","x":146,"y":840,"width":399,"height":108},
		{"type":"text","text":"```cpp\ncatch(...)\n    {\n        std::cerr << \"Abnormal termination\\n\";\n    }\n```","id":"60ad38d134265f68","x":182,"y":980,"width":328,"height":157},
		{"type":"text","text":"exceptions","id":"d08b618c8a0c136e","x":290,"y":-240,"width":145,"height":50,"color":"3"},
		{"type":"text","text":"**exception class**","id":"3c6e143122488edc","x":1271,"y":0,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"`<exception> header`","id":"f8da12e1995c70b9","x":1469,"y":99,"width":257,"height":60,"color":"6"},
		{"type":"text","text":"**std::exception**","id":"0d147bf849b67b0c","x":1499,"y":190,"width":197,"height":60,"color":"6"},
		{"type":"text","text":"is just a normal class that is designed specifically to be thrown as an exception","id":"7689b21ab22e6b8c","x":1591,"y":-17,"width":374,"height":95},
		{"type":"text","text":"is a small interface class designed to serve as a base class to any exception thrown by the C++ standard library.","id":"5c7ce42ce5fe664d","x":1799,"y":166,"width":333,"height":107},
		{"type":"text","text":"```cpp\n// This handler will catch std::exception and all the derived exceptions too\n    catch (const std::exception& exception)\n    {std::cerr << \"Standard exception: \" << exception.what() << '\\n';}\n```","id":"51fda99d68514f24","x":1696,"y":305,"width":795,"height":97},
		{"type":"text","text":"Handlers for derived exception classes should be listed before those for base classes.","id":"f9ed49b1142d23a6","x":760,"y":-73,"width":390,"height":99,"color":"4"},
		{"type":"text","text":"When rethrowing the same exception, use the throw keyword by itself","id":"1a55bc601fd1a1c8","x":760,"y":46,"width":390,"height":83,"color":"4"},
		{"type":"text","text":"function try block","id":"e6951c892ab52662","x":861,"y":384,"width":197,"height":50,"color":"6"},
		{"type":"text","text":"Destructors should not throw exceptions.","id":"da3ad7da2d985ae8","x":785,"y":289,"width":349,"height":50,"color":"4"},
		{"type":"text","text":"are designed to allow you to establish an exception handler around the body of an entire function, rather than around a block of code.","id":"2543bb596b07aaf8","x":540,"y":545,"width":391,"height":103},
		{"type":"text","text":"```cpp\nclass B : public A\n{\npublic:\nB(int x) try : A{x} // note addition of try keyword here\n{\nif (x <= 0)\nthrow 1;\n}\n```","id":"00b97475887897c7","x":955,"y":467,"width":484,"height":260},
		{"type":"text","text":"Avoid letting control reach the end of a function-level catch block. Instead, explicitly throw, rethrow, or return","id":"b6957c64ec31cab4","x":785,"y":168,"width":349,"height":103,"color":"4"},
		{"type":"text","text":"are a language mechanism that was originally designed to document what kind of exceptions a function might throw as part of a function specification.","id":"fdbe6a77aba81e4a","x":1772,"y":430,"width":456,"height":113},
		{"type":"text","text":"Exception specifications","id":"805d0ac825db151f","x":1473,"y":461,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"is one that promises not to throw exceptions that are visible to the caller","id":"527ca82319a77ebc","x":2169,"y":716,"width":363,"height":82},
		{"type":"text","text":"Functions that are implicitly non-throwing: **Destructors**\nFunctions that are non-throwing by default for implicitly-declared or defaulted functions: **Constructors**: default, copy, move, **Assignments**: copy, move, **Comparison operators**\n","id":"6d2c9ab153b51743","x":2588,"y":696,"width":500,"height":122},
		{"type":"text","text":"```cpp\nvoid doSomething() noexcept; // this function is specified as non-throwing\n```","id":"e2ae1a285c614cdb","x":2175,"y":836,"width":714,"height":73},
		{"type":"text","text":"It takes an expression as an argument, and returns `true` or `false` if the compiler thinks it will throw an exception or not.","id":"9aa7f1f43f28ec31","x":1951,"y":919,"width":362,"height":112},
		{"type":"text","text":"functions differing only in their exception specification can not be overloaded","id":"63095fb09de6d778","x":2353,"y":936,"width":358,"height":69,"color":"4"},
		{"type":"text","text":"The noexcept operator","id":"480aad8769412eb0","x":1666,"y":945,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"```cpp\nvoid foo() {throw -1;}\nvoid boo() {};\nvoid goo() noexcept {};\nstruct S{};\nconstexpr bool b1{ noexcept(5 + 3) }; // true; ints are non-throwing\nconstexpr bool b2{ noexcept(foo()) }; // false; foo() throws an exception\nconstexpr bool b3{ noexcept(boo()) }; // false; boo() is implicitly noexcept(false)\nconstexpr bool b4{ noexcept(goo()) }; // true; goo() is explicitly noexcept(true)\nconstexpr bool b5{ noexcept(S{}) };   // true; a struct's default constructor is noexcept by default\n```","id":"0f9b2b7bb74e14b0","x":1892,"y":1056,"width":946,"height":254},
		{"type":"text","text":"\nFunctions that are potentially throwing (if not implicitly-declared or defaulted): **Normal functions**, **User-defined constructors**, **User-defined operators**","id":"a34c5f7f7f2c0efc","x":2588,"y":578,"width":500,"height":100},
		{"type":"text","text":"`noexcept` specifier","id":"a1fcca6ef609f8f3","x":1689,"y":727,"width":203,"height":60,"color":"6"},
		{"type":"text","text":"non-throwing function","id":"36439e41f7b2aeb8","x":1929,"y":727,"width":203,"height":60,"color":"6"},
		{"type":"text","text":"may throw exceptions that are visible to the caller.","id":"056fe58bedf9764b","x":2169,"y":598,"width":250,"height":60},
		{"type":"text","text":"potentially throwing function","id":"c90066de3a2ee442","x":1929,"y":598,"width":203,"height":60,"color":"6"},
		{"id":"727a5790c6d38be8","x":1072,"y":755,"width":250,"height":60,"color":"6","type":"text","text":"exception safety guarantee"},
		{"id":"6ef0f9487253c54a","x":562,"y":746,"width":450,"height":79,"type":"text","text":"is a contractual guideline about how functions or classes will behave in the event an exception occurs."},
		{"id":"07012629ed2dc1b7","x":737,"y":860,"width":920,"height":314,"type":"text","text":"levels of exception safety:\n- **No guarantee** -- There are no guarantees about what will happen if an exception is thrown (e.g. a class may be left in an unusable state)\n- **Basic guarantee** -- If an exception is thrown, no memory will be leaked and the object is still usable, but the program may be left in a modified state.\n- **Strong guarantee** -- If an exception is thrown, no memory will be leaked and the program state will not be changed. This means the function must either completely succeed or have no side effects if it fails. This is easy if the failure happens before anything is modified in the first place, but can also be achieved by rolling back any changes so the program is returned to the pre-failure state.\n- **No throw / No fail** -- The function will always succeed (no-fail) or fail without throwing an exception (no-throw)."},
		{"id":"4fa860a78577c203","x":2960,"y":832,"width":697,"height":82,"color":"4","type":"text","text":"Make constructors and overloaded assignment operators `noexcept` when you can. Use `noexcept` on other functions to express a no-fail or no-throw guarantee."}
	],
	"edges":[
		{"id":"50ba1d7e11389446","fromNode":"883ee7b411cad012","fromSide":"left","toNode":"d7e424a56c7424c7","toSide":"top"},
		{"id":"1e75fd8f2c25adba","fromNode":"d7e424a56c7424c7","fromSide":"bottom","toNode":"8692ea3dcef371ea","toSide":"top"},
		{"id":"339f2a1b31696bf1","fromNode":"8692ea3dcef371ea","fromSide":"bottom","toNode":"46f7055ce4f73f54","toSide":"top","toEnd":"none","color":"6"},
		{"id":"0706e7876db86306","fromNode":"46f7055ce4f73f54","fromSide":"bottom","toNode":"51ffee80cf7c6de9","toSide":"top","color":"6"},
		{"id":"22b9dc61504d0e0c","fromNode":"51ffee80cf7c6de9","fromSide":"bottom","toNode":"81a322a3669c0a3d","toSide":"top","toEnd":"none","color":"6"},
		{"id":"ca45c7673d2d1014","fromNode":"d08b618c8a0c136e","fromSide":"bottom","toNode":"883ee7b411cad012","toSide":"top"},
		{"id":"914fd1760d446c32","fromNode":"28a1684e596d13bd","fromSide":"bottom","toNode":"7a33b53e08312f5e","toSide":"top"},
		{"id":"1e3fb1a79944475f","fromNode":"7a33b53e08312f5e","fromSide":"bottom","toNode":"f92f209bdf0b3def","toSide":"top","toEnd":"none","color":"6"},
		{"id":"2867c8f321be5c66","fromNode":"f92f209bdf0b3def","fromSide":"bottom","toNode":"ab4e7b717de6248f","toSide":"top"},
		{"id":"8fce5dbcb7f5b680","fromNode":"ab4e7b717de6248f","fromSide":"bottom","toNode":"b9c05bba652f0a1d","toSide":"top","toEnd":"none"},
		{"id":"52440844e6d8fde9","fromNode":"b9c05bba652f0a1d","fromSide":"bottom","toNode":"b694e80188c649bf","toSide":"top"},
		{"id":"b841d13adcdc90cb","fromNode":"d7e424a56c7424c7","fromSide":"right","toNode":"28a1684e596d13bd","toSide":"left"},
		{"id":"d1bd1c5dac6fc531","fromNode":"28a1684e596d13bd","fromSide":"right","toNode":"814b420302b9ed53","toSide":"left"},
		{"id":"663eff3b953725ac","fromNode":"814b420302b9ed53","fromSide":"bottom","toNode":"1bbe499398f4cd98","toSide":"top"},
		{"id":"45da55f6af2f3016","fromNode":"1bbe499398f4cd98","fromSide":"bottom","toNode":"1f259dd8d309de33","toSide":"top","toEnd":"none"},
		{"id":"8b78300ff65cf186","fromNode":"1f259dd8d309de33","fromSide":"bottom","toNode":"a48f6e620c908377","toSide":"top"},
		{"id":"1b1c132c80f81188","fromNode":"a48f6e620c908377","fromSide":"bottom","toNode":"071382e01f909b19","toSide":"top"},
		{"id":"c9c4f1930e8ad7f1","fromNode":"071382e01f909b19","fromSide":"bottom","toNode":"5a29ded93612a134","toSide":"top","toEnd":"none"},
		{"id":"e20d02dfe9bb0d1e","fromNode":"5a29ded93612a134","fromSide":"bottom","toNode":"60ad38d134265f68","toSide":"top"},
		{"id":"e4ea1d0a2ecfb2ff","fromNode":"d08b618c8a0c136e","fromSide":"bottom","toNode":"3c6e143122488edc","toSide":"top"},
		{"id":"ef5783f75cb1778f","fromNode":"3c6e143122488edc","fromSide":"right","toNode":"7689b21ab22e6b8c","toSide":"left","toEnd":"none"},
		{"id":"47dc30f985fe2b89","fromNode":"f9ed49b1142d23a6","fromSide":"right","toNode":"3c6e143122488edc","toSide":"left"},
		{"id":"6a6c78286d2b4140","fromNode":"3c6e143122488edc","fromSide":"bottom","toNode":"0d147bf849b67b0c","toSide":"left"},
		{"id":"97a646dbb8971aa4","fromNode":"f8da12e1995c70b9","fromSide":"bottom","toNode":"0d147bf849b67b0c","toSide":"top"},
		{"id":"1d9df5f416e6825e","fromNode":"0d147bf849b67b0c","fromSide":"right","toNode":"5c7ce42ce5fe664d","toSide":"left","toEnd":"none"},
		{"id":"4320c5e96748ee12","fromNode":"0d147bf849b67b0c","fromSide":"bottom","toNode":"51fda99d68514f24","toSide":"left"},
		{"id":"7ad761830593cab1","fromNode":"1a55bc601fd1a1c8","fromSide":"right","toNode":"3c6e143122488edc","toSide":"left"},
		{"id":"f96293d11ce73d02","fromNode":"3c6e143122488edc","fromSide":"bottom","toNode":"e6951c892ab52662","toSide":"right"},
		{"id":"ab23641f58616b6a","fromNode":"e6951c892ab52662","fromSide":"left","toNode":"2543bb596b07aaf8","toSide":"top","toEnd":"none"},
		{"id":"c0baff5fd83e6688","fromNode":"2543bb596b07aaf8","fromSide":"right","toNode":"00b97475887897c7","toSide":"left","toEnd":"none"},
		{"id":"a1ad69dc1b6cc329","fromNode":"da3ad7da2d985ae8","fromSide":"top","toNode":"b6957c64ec31cab4","toSide":"bottom","toEnd":"none"},
		{"id":"7b3ef19213389eec","fromNode":"3c6e143122488edc","fromSide":"bottom","toNode":"805d0ac825db151f","toSide":"left"},
		{"id":"5e078bce84aec4b3","fromNode":"805d0ac825db151f","fromSide":"right","toNode":"fdbe6a77aba81e4a","toSide":"left","toEnd":"none"},
		{"id":"8b54fe4e7f212d74","fromNode":"805d0ac825db151f","fromSide":"bottom","toNode":"a1fcca6ef609f8f3","toSide":"left"},
		{"id":"08a297f1116a4522","fromNode":"36439e41f7b2aeb8","fromSide":"right","toNode":"527ca82319a77ebc","toSide":"left","toEnd":"none"},
		{"id":"8ba46c20ad6fbd08","fromNode":"c90066de3a2ee442","fromSide":"right","toNode":"056fe58bedf9764b","toSide":"left"},
		{"id":"b788fc3fc311a31d","fromNode":"a1fcca6ef609f8f3","fromSide":"right","toNode":"36439e41f7b2aeb8","toSide":"left"},
		{"id":"17cda42a3cc73ca5","fromNode":"36439e41f7b2aeb8","fromSide":"bottom","toNode":"e2ae1a285c614cdb","toSide":"left"},
		{"id":"543352b94198441b","fromNode":"63095fb09de6d778","fromSide":"top","toNode":"e2ae1a285c614cdb","toSide":"bottom"},
		{"id":"d3882cba3f77e9e7","fromNode":"527ca82319a77ebc","fromSide":"right","toNode":"6d2c9ab153b51743","toSide":"left"},
		{"id":"2aec7f16b8b1381f","fromNode":"056fe58bedf9764b","fromSide":"right","toNode":"a34c5f7f7f2c0efc","toSide":"left"},
		{"id":"43dd8bc107229bfd","fromNode":"a1fcca6ef609f8f3","fromSide":"bottom","toNode":"480aad8769412eb0","toSide":"top"},
		{"id":"d26b4ac0273ba4ad","fromNode":"480aad8769412eb0","fromSide":"right","toNode":"9aa7f1f43f28ec31","toSide":"left","toEnd":"none"},
		{"id":"01d15096f3ceb3ae","fromNode":"480aad8769412eb0","fromSide":"bottom","toNode":"0f9b2b7bb74e14b0","toSide":"left"},
		{"id":"c0f832d698622ec6","fromNode":"da3ad7da2d985ae8","fromSide":"bottom","toNode":"e6951c892ab52662","toSide":"top"},
		{"id":"76120a9884fbdf00","fromNode":"805d0ac825db151f","fromSide":"bottom","toNode":"c90066de3a2ee442","toSide":"left"},
		{"id":"0b65d7da2f89744e","fromNode":"805d0ac825db151f","fromSide":"bottom","toNode":"727a5790c6d38be8","toSide":"right"},
		{"id":"651e3cf45cd68199","fromNode":"727a5790c6d38be8","fromSide":"left","toNode":"6ef0f9487253c54a","toSide":"right","toEnd":"none"},
		{"id":"4f276fbaf2f68816","fromNode":"727a5790c6d38be8","fromSide":"bottom","toNode":"07012629ed2dc1b7","toSide":"top"},
		{"id":"8c9b9b43eebd8798","fromNode":"4fa860a78577c203","fromSide":"left","toNode":"e2ae1a285c614cdb","toSide":"right"}
	]
}