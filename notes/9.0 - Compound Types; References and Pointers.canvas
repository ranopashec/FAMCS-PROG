{
	"nodes":[
		{"type":"text","text":"expressions ","id":"c1d1cfa73abf94cb","x":280,"y":-33,"width":176,"height":54,"color":"6"},
		{"type":"text","text":"type","id":"79f1a4bc6400380a","x":230,"y":125,"width":100,"height":50,"color":"6"},
		{"type":"text","text":"value category","id":"a5b66d423bbea52d","x":368,"y":125,"width":172,"height":50,"color":"6"},
		{"type":"text","text":"is equivalent to the type of the value, object, or function that results from the evaluated expression","id":"4bbe424c4f85915c","x":-300,"y":95,"width":474,"height":110},
		{"type":"text","text":"[4.0 - Fundamental Data Types](notes/studies/programming/c++/4.0%20-%20Fundamental%20Data%20Types.canvas)","id":"99c4e2e208a959bd","x":-660,"y":-360,"width":320,"height":80,"color":"3"},
		{"type":"text","text":"rvalue","id":"668ed85f1f4f3f84","x":728,"y":313,"width":105,"height":50,"color":"5"},
		{"type":"text","text":"- (short for “right value”, and sometimes written as `r-value`) is an expression that is not an l-value.\n- Rvalues include literals (except C-style string literals, which are lvalues) and the return value of functions and operators. \n- Rvalues aren’t identifiable (meaning they have to be used immediately), and only exist within the scope of the expression in which they are used (discarded at the end of the expression)","id":"4ff7860b70a1e87e","x":868,"y":269,"width":1240,"height":138},
		{"type":"text","text":"```cpp\nint x{ 5 }; // 5 is an rvalue expression\nconst double d{ 1.2 }; // 1.2 is an rvalue expression\nint y { x }; // x is a modifiable lvalue expression\nconst double e { d }; // d is a non-modifiable lvalue expression\nint z { return5() }; // return5() is an rvalue expression (since the result is returned by value)\nint w { x + 1 }; // x + 1 is an rvalue expression\nint q { static_cast<int>(d) }; // the result of static casting d to an int is an rvalue expression\n```","id":"f89565cfb6a81ae0","x":923,"y":21,"width":1130,"height":225},
		{"type":"text","text":"lvalue","id":"f420d32e2db3e764","x":121,"y":313,"width":109,"height":50,"color":"5"},
		{"type":"text","text":"Compound data types","id":"2c2aa2275f1711bb","x":-1864,"y":-33,"width":250,"height":54,"color":"6"},
		{"type":"text","text":"(short for “left value” or “locator value”, and sometimes written as “l-value”) is an expression that evaluates to an **identifiable** object or function (or bit-field)","id":"984b307268af6611","x":-1200,"y":288,"width":670,"height":100},
		{"type":"text","text":"An entity (such as an object or function) that has an identity can be differentiated from other similar entities (typically by comparing the addresses of the entity).","id":"2553009ff7cca105","x":-1200,"y":420,"width":670,"height":100},
		{"type":"text","text":"lvalue reference","id":"7525d5f2be4f25cb","x":-1545,"y":760,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"When following a type name, & denotes an lvalue reference: `int& ref`","id":"5b51915bb655c1f6","x":-2230,"y":838,"width":300,"height":119},
		{"type":"text","text":"When used in a unary context in an expression, & is the address-of operator","id":"48beea93251d33b1","x":-3160,"y":1001,"width":420,"height":71},
		{"type":"text","text":"pointer","id":"ae19b837abd5c684","x":-3680,"y":763,"width":134,"height":50,"color":"6"},
		{"type":"text","text":"reference","id":"a6d6646e8a600b11","x":-1500,"y":95,"width":160,"height":50,"color":"6"},
		{"type":"text","text":"- An alias for an existing object. \n- Once a reference has been defined, any operation on the reference is applied to the object being referenced","id":"ab14c70dd05ca7e0","x":-1295,"y":55,"width":590,"height":130},
		{"type":"text","text":"`rvalue references`","id":"f74a75337e886be4","x":-1396,"y":542,"width":249,"height":50,"color":"2"},
		{"type":"text","text":"(also sometimes called composite data types) are data types that can be constructed from fundamental data types (or other compound data types)","id":"41fdae18a7469214","x":-2440,"y":-60,"width":553,"height":109},
		{"type":"text","text":"null value","id":"96bec6f59cac95d2","x":-2940,"y":-33,"width":167,"height":50,"color":"6"},
		{"type":"text","text":"s a special value that means something has no value","id":"c8bcc0e32a1530a1","x":-2752,"y":-45,"width":292,"height":75},
		{"type":"text","text":"pointer that is holding a null value (pointer that is not pointing at anything)","id":"c0d0b599e474bae8","x":-4080,"y":511,"width":368,"height":100},
		{"type":"text","text":"represents a null pointer literal","id":"effda707cefc6d25","x":-4428,"y":517,"width":316,"height":94},
		{"type":"text","text":"s an object that holds a _memory address_ (typically of another variable) as its value","id":"4e83b8d332619d49","x":-4115,"y":631,"width":403,"height":83},
		{"type":"text","text":"```cpp\nint* ptr; // a pointer to an integer\n```","id":"0d93a804cc52277c","x":-4456,"y":625,"width":286,"height":95},
		{"type":"text","text":"aka “raw pointers” or “dumb pointers”","id":"47a45a3e640ae90a","x":-3522,"y":641,"width":219,"height":64},
		{"type":"text","text":"pointer that has not been initialized","id":"4c1808b185750cad","x":-4236,"y":866,"width":339,"height":50},
		{"type":"text","text":"wild pointer","id":"8c39407383b202f3","x":-3882,"y":866,"width":160,"height":50,"color":"6"},
		{"type":"text","text":"- the type of the pointer has to match the type of the object being pointed to\n- initializing a pointer with a literal value is disallowed","id":"5067424f89264a89","x":-4276,"y":959,"width":554,"height":118},
		{"type":"text","text":"is a pointer that is holding the address of an object that is no longer valid (e.g. because it has been destroyed).","id":"f1b5fa77afadef47","x":-4448,"y":1114,"width":500,"height":75},
		{"type":"text","text":"dangling pointer","id":"04509c7b70a23069","x":-3928,"y":1126,"width":206,"height":50,"color":"6"},
		{"type":"text","text":"`const` keyword","id":"842205783ce65dd0","x":-3921,"y":1232,"width":199,"height":50,"color":"6"},
		{"type":"text","text":"pointer to a const value","id":"ff4a17b5e78b5149","x":-4382,"y":1424,"width":267,"height":50,"color":"6"},
		{"type":"text","text":"const pointers to non-const variables","id":"42517e7b1a5347af","x":-4656,"y":1408,"width":249,"height":83},
		{"type":"text","text":"```cpp\nint x{ 5 }; // non-const\nconst int* ptr { &x }; // points to a \"const int\"\n*ptr = 6;  // not allowed\nx = 6; // allowed\n```","id":"e3edf235bcc89af8","x":-5308,"y":1378,"width":620,"height":143},
		{"type":"text","text":"```cpp\nint* ptr0 { &value };             // ptr0 points to an \"int\" and is not const itself, so this is a normal pointer.\nconst int* ptr1 { &value };       // ptr1 points to a \"const int\", but is not const itself, so this is a pointer to a const value.\nint* const ptr2 { &value };       // ptr2 points to an \"int\", but is const itself, so this is a const pointer (to a non-const value).\nconst int* const ptr3 { &value }; // ptr3 points to an \"const int\", and it is const itself, so this is a const pointer to a const value.\n```","id":"0d8c1b14df55179d","x":-4115,"y":2019,"width":582,"height":360},
		{"type":"text","text":"is a pointer whose address can not be changed after initialization","id":"345c4530e1704b2d","x":-3575,"y":1510,"width":335,"height":91},
		{"type":"text","text":"const pointer","id":"0981e2094c7626cd","x":-3533,"y":1424,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"it is possible to change the value being pointed to via dereferencing the const pointer","id":"a60eccb857ed1ae8","x":-3240,"y":1414,"width":469,"height":70},
		{"type":"text","text":"```cpp\nconst int* const ptr { &value }; // a const pointer to a const value\n```","id":"d384dd3c2c147d17","x":-4040,"y":1839,"width":428,"height":126},
		{"type":"text","text":"const pointer to a const value","id":"a93d5e995fb87d2c","x":-3972,"y":1739,"width":301,"height":62,"color":"6"},
		{"type":"text","text":"“Pass by reference when you can, pass by address when you must”","id":"59df5d8b6e9b81f5","x":-2789,"y":755,"width":658,"height":58,"color":"4"},
		{"type":"text","text":"is a variable that acts as a reference to an lvalue (usually another variable)","id":"0c2405029300dbf2","x":-822,"y":943,"width":722,"height":50},
		{"type":"text","text":"non-const reference","id":"b030dbc8798ff24a","x":-1094,"y":1499,"width":235,"height":50,"color":"6"},
		{"type":"text","text":"reference that left referencing an object that no longer exists","id":"2c7886bffb6b17b4","x":-1399,"y":1674,"width":540,"height":75},
		{"type":"text","text":"lvalue reference to a const value","id":"427ddf9bafec35e6","x":98,"y":1179,"width":350,"height":50,"color":"6"},
		{"type":"text","text":"lvalues references to const can also bind to rvalues","id":"303ca1b7cf455601","x":98,"y":1261,"width":350,"height":86},
		{"type":"text","text":"temporary object ","id":"2e4b09f6620ecffc","x":411,"y":1421,"width":239,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\nconst int x { 5 };    // x is a non-modifiable lvalue\nconst int& ref { x }; // okay: ref is a an lvalue reference to a const value\n```","id":"9e24b007007992b3","x":478,"y":1151,"width":918,"height":107},
		{"type":"text","text":"```cpp\n const int& ref { 5 }; // okay: 5 is an rvalue\n```","id":"eb5cad11108d5948","x":478,"y":1279,"width":918,"height":50},
		{"type":"text","text":"(also sometimes called an **anonymous object**) is an object that is created for temporary use (and then destroyed) within a single expression. It have no scope at all and can only be used directly at the point where it is created, since there is no way to refer to it beyond that point.","id":"69fb033ce3798b55","x":698,"y":1375,"width":698,"height":143},
		{"type":"text","text":"dangling reference","id":"7c3d7d01575bb69e","x":-1254,"y":1590,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"- When a reference is initialized with an object (or function), it is **bound** to that object (or function).\n- The process by which such a reference is bound is **reference binding**. \n- The object (or function) being referenced is called the **referent**.","id":"e906abd763bb1e00","x":-1614,"y":1020,"width":533,"height":200},
		{"type":"text","text":"pass by reference","id":"a7987a484ba7cf71","x":-2006,"y":1258,"width":222,"height":50,"color":"6"},
		{"type":"text","text":"(**indirection operator**) returns the value at a given memory address as an lvalue","id":"7736b0ca493e27e4","x":-4623,"y":837,"width":334,"height":109},
		{"type":"text","text":"```cpp\nstd::cout << *(&x) << '\\n'; // print the value at the memory address of variable x (parentheses not required, but make it easier to read)\n```","id":"a7ed078dcf6d537d","x":-5120,"y":987,"width":589,"height":139},
		{"type":"text","text":"```cpp\n std::cout << &x << '\\n'; // print the memory address of variable x\n```","id":"7f8132ebd4b4275c","x":-3400,"y":860,"width":380,"height":119},
		{"type":"text","text":"- allows to pass arguments to a function without making copies of those arguments each call\n- using pass by reference, any changes made to the reference parameter will affect the argument","id":"9a3d48bf518f3882","x":-1930,"y":1577,"width":473,"height":140},
		{"type":"text","text":"declaration of a function parameter as a reference type (or const reference type)","id":"45acb94a61d1b469","x":-1917,"y":1383,"width":446,"height":82},
		{"type":"text","text":"```cpp\nvoid printValue(std::string& y){}\n```","id":"4340060b1b9fa744","x":-1917,"y":1477,"width":446,"height":74},
		{"type":"text","text":"Pass fundamental types by value, and class (or struct) types by const reference.","id":"099841b6adfdce0f","x":-1891,"y":1749,"width":394,"height":98,"color":"4"},
		{"type":"text","text":"pass by address","id":"f179de86cdf0471e","x":-2540,"y":1258,"width":216,"height":50,"color":"6"},
		{"type":"text","text":"return by reference","id":"6360a2e2b51d8886","x":-2006,"y":2120,"width":222,"height":50,"color":"6"},
		{"type":"text","text":"returns a reference that is bound to the object being returned, which avoids making a copy of the return value","id":"7aaec43bd50b2631","x":-1760,"y":2092,"width":410,"height":106},
		{"type":"text","text":"- The object being returned by reference must exist after the function returns\n- Avoid returning references to non-const local static variables\n- If a function returns a reference, and that reference is used to initialize or assign to a non-reference variable, the return value will be copied (as if it had been returned by value)\n- It’s okay to return reference parameters by reference\n- The caller can modify values through the reference","id":"00973e5228c0aff2","x":-1254,"y":2025,"width":880,"height":240},
		{"type":"text","text":"Return by address","id":"5da3a1c4a662290f","x":-2540,"y":2120,"width":216,"height":50,"color":"6"},
		{"type":"text","text":"Prefer return by reference over return by address unless the ability to return “no object” (using `nullptr`) is important.","id":"016f6f7c6bd0c4c4","x":-3024,"y":2085,"width":444,"height":120},
		{"type":"text","text":"lvalue reference variable","id":"9728604b67dae126","x":-1120,"y":936,"width":288,"height":67,"color":"6"},
		{"type":"text","text":"Pass by address… by reference","id":"6543b29985976774","x":-2340,"y":1658,"width":364,"height":69,"color":"6"},
		{"type":"text","text":"`nullptr` keyword","id":"3a444b681460f7a6","x":-4418,"y":442,"width":296,"height":50,"color":"6"},
		{"type":"text","text":"null pointer","id":"af94edf97c731dd6","x":-3994,"y":442,"width":197,"height":50,"color":"6"},
		{"type":"text","text":"Type deduction drops references","id":"41561dd2f2e77f9f","x":-1987,"y":592,"width":380,"height":70},
		{"type":"text","text":"```cpp\nint* const ptr { &x }; // const after the asterisk\n```","id":"156b16064051afd6","x":-3205,"y":1518,"width":665,"height":75},
		{"type":"text","text":"pointer to const is not const itself (it just points to a const value), we can change what the pointer is pointing at by assigning the pointer a new address","id":"c9795c151ddcdf38","x":-5680,"y":1539,"width":680,"height":89},
		{"type":"text","text":"```cpp\nconst int x{ 5 }; // top-level const\nconst int* ptr { &x }; // low-level const\n```","id":"dd36825f008c63c5","x":-4984,"y":1539,"width":553,"height":89},
		{"type":"text","text":"low-level const","id":"1b46d48101817cd2","x":-5060,"y":1879,"width":201,"height":50,"color":"6"},
		{"type":"text","text":"is a const qualifier that applies to the object being referenced or pointed to","id":"2c58fcbdcdc5ea10","x":-5400,"y":1844,"width":309,"height":121},
		{"type":"text","text":"```cpp\nint& ref { x }; // ref is an lvalue reference variable that can now be used as an alias for variable x\n```","id":"73b42de34afb8de0","x":-760,"y":1012,"width":600,"height":88},
		{"type":"text","text":"- An alias for an existing lvalue (such as a variable)","id":"9ad1c5cad76325c7","x":-1280,"y":754,"width":500,"height":75},
		{"type":"text","text":"```CPP\nvoid nullify(int*& refptr) // refptr is now a reference to a pointer\n{\nrefptr = nullptr; // Make the function parameter a null pointer\n}\n```","id":"ed3d0a4f60056f33","x":-3080,"y":1819,"width":839,"height":141},
		{"type":"text","text":"is a const qualifier that applies to an object itself","id":"38ce8b78f28dfaa2","x":-3313,"y":1683,"width":309,"height":93},
		{"type":"text","text":"top-level const","id":"444bde59e098d36b","x":-2973,"y":1704,"width":201,"height":50,"color":"6"},
		{"type":"text","text":"deduction drops const qualifiers, it only drops top-level consts. Low-level consts are not dropped","id":"d36a40e7a1da3d69","x":-3447,"y":2440,"width":578,"height":100,"color":"4"},
		{"type":"text","text":"```cpp\nconst std::string* const getConstPtr(); // some function that returns a const pointer to a const value\nint main()\n{\n    auto ptr1{ getConstPtr() };  // const std::string*\n    auto* ptr2{ getConstPtr() }; // const std::string*\n    auto const ptr3{ getConstPtr() };  // const std::string* const\n    const auto ptr4{ getConstPtr() };  // const std::string* const\n    auto* const ptr5{ getConstPtr() }; // const std::string* const\n    const auto* ptr6{ getConstPtr() }; // const std::string*\n    const auto const ptr7{ getConstPtr() };  // error: const qualifer can not be applied twice\n    const auto* const ptr8{ getConstPtr() }; // const std::string* const\n    return 0;\n```","id":"531e1cb6c757bd54","x":-3771,"y":2580,"width":1226,"height":391},
		{"type":"text","text":"```cpp\n    int x { 5 };\n    int& ref { x }; // valid: lvalue reference bound to a modifiable lvalue\n/*--------------------------------------------------------------------------*/\n    const int y { 5 };\n    int& invalidRef { y };  // invalid: can't bind to a non-modifiable lvalue\n    int& invalidRef2 { 0 }; // invalid: can't bind to an r-value\n```","id":"e927f6b1bcb29aa5","x":-822,"y":1395,"width":1001,"height":195},
		{"type":"text","text":"```cpp\nint&     // an lvalue reference to an int object\ndouble&  // an lvalue reference to a double object\n```","id":"22c30a2077a45745","x":-760,"y":738,"width":620,"height":107},
		{"type":"text","text":"address-of operator (&)","id":"b1b26669bfcf22d3","x":-2700,"y":1004,"width":250,"height":66,"color":"6"},
		{"type":"text","text":"When used in a binary context in an expression, & is the Bitwise AND operator: `std::cout << x & y`","id":"0b2c19c7a588a5af","x":-2280,"y":985,"width":486,"height":104},
		{"type":"text","text":"The caller provides an object’s _address_, pointer is copied into a pointer parameter of the called function . The function can access the object whose address was passed","id":"198a5d7e5a0cb7b3","x":-2712,"y":1100,"width":561,"height":138},
		{"type":"text","text":"```cpp\nstd::string&       returnByReference(); // returns a reference to an existing std::string (cheap)\nconst std::string& returnByReferenceToConst(); // returns a const reference to an existing std::string (cheap)\n```","id":"2900bd5f8dce9874","x":-1841,"y":1940,"width":573,"height":140},
		{"type":"text","text":"dereference operator (*)","id":"b24550e52fb36af0","x":-4602,"y":760,"width":292,"height":57,"color":"6"},
		{"type":"text","text":"is a (non-const) pointer that points to a constant value","id":"fb8c9de6ec464338","x":-4387,"y":1523,"width":278,"height":121},
		{"type":"text","text":"Lvalue references must be bound to a _modifiable_ lvalue","id":"f6f373c43d532e04","x":-635,"y":1180,"width":627,"height":50,"color":"4"},
		{"type":"text","text":"modifiable lvalue","id":"e8702930c70b9560","x":56,"y":660,"width":239,"height":51,"color":"5"},
		{"type":"text","text":"is an lvalue whose value can be modified.","id":"8205915a0f60d202","x":-402,"y":654,"width":408,"height":63},
		{"type":"text","text":"non-modifiable lvalue","id":"a3b36a19d699e3a4","x":336,"y":660,"width":284,"height":51,"color":"5"},
		{"type":"text","text":"is an lvalue whose value can’t be modified (because the lvalue is const or constexpr)","id":"1b2db083ee3cddc7","x":648,"y":645,"width":408,"height":82},
		{"type":"text","text":"reference  cannot be reseated, meaning it cannot be changed to reference another object","id":"33e51db044895be4","x":-1577,"y":1260,"width":460,"height":82,"color":"4"},
		{"type":"text","text":"indicates whether an expression resolves to a value, a function, or an object of some kind","id":"6fe8d3434616a2ee","x":575,"y":93,"width":307,"height":114}
	],
	"edges":[
		{"id":"98d94412a9e9198e","fromNode":"99c4e2e208a959bd","fromSide":"bottom","toNode":"2c2aa2275f1711bb","toSide":"top"},
		{"id":"4bc16f26d745d8f0","fromNode":"2c2aa2275f1711bb","fromSide":"left","toNode":"41fdae18a7469214","toSide":"right","toEnd":"none"},
		{"id":"4846fff0fd2cefe5","fromNode":"99c4e2e208a959bd","fromSide":"bottom","toNode":"c1d1cfa73abf94cb","toSide":"top"},
		{"id":"af2d708d92c161c2","fromNode":"c1d1cfa73abf94cb","fromSide":"bottom","toNode":"79f1a4bc6400380a","toSide":"top"},
		{"id":"93269138bbcfee13","fromNode":"c1d1cfa73abf94cb","fromSide":"bottom","toNode":"a5b66d423bbea52d","toSide":"top"},
		{"id":"e413784295196853","fromNode":"a5b66d423bbea52d","fromSide":"right","toNode":"6fe8d3434616a2ee","toSide":"left","toEnd":"none"},
		{"id":"3d3d037e0c20f0f0","fromNode":"79f1a4bc6400380a","fromSide":"left","toNode":"4bbe424c4f85915c","toSide":"right","toEnd":"none"},
		{"id":"15cc362867746900","fromNode":"a5b66d423bbea52d","fromSide":"bottom","toNode":"f420d32e2db3e764","toSide":"right"},
		{"id":"0c5d1e8cc5845a6b","fromNode":"f420d32e2db3e764","fromSide":"left","toNode":"984b307268af6611","toSide":"right","toEnd":"none"},
		{"id":"79deaffd2c061a03","fromNode":"984b307268af6611","fromSide":"bottom","toNode":"2553009ff7cca105","toSide":"top"},
		{"id":"4fa0d6515ed55ca0","fromNode":"f420d32e2db3e764","fromSide":"bottom","toNode":"e8702930c70b9560","toSide":"top"},
		{"id":"20eae398ee1b3303","fromNode":"e8702930c70b9560","fromSide":"left","toNode":"8205915a0f60d202","toSide":"right","toEnd":"none"},
		{"id":"98d9947b9de05125","fromNode":"f420d32e2db3e764","fromSide":"bottom","toNode":"a3b36a19d699e3a4","toSide":"top"},
		{"id":"73029552735901e6","fromNode":"a5b66d423bbea52d","fromSide":"bottom","toNode":"668ed85f1f4f3f84","toSide":"left"},
		{"id":"6e920f9d753a9183","fromNode":"668ed85f1f4f3f84","fromSide":"right","toNode":"4ff7860b70a1e87e","toSide":"left","toEnd":"none"},
		{"id":"836ca133115c203c","fromNode":"4ff7860b70a1e87e","fromSide":"top","toNode":"f89565cfb6a81ae0","toSide":"bottom"},
		{"id":"4cf7f76970b58cbf","fromNode":"f420d32e2db3e764","fromSide":"bottom","toNode":"7525d5f2be4f25cb","toSide":"top"},
		{"id":"a7066938f380d6a0","fromNode":"a6d6646e8a600b11","fromSide":"bottom","toNode":"7525d5f2be4f25cb","toSide":"top"},
		{"id":"7992ff2a54bcb824","fromNode":"a6d6646e8a600b11","fromSide":"right","toNode":"ab14c70dd05ca7e0","toSide":"left","toEnd":"none"},
		{"id":"78af472d82afc9b5","fromNode":"a6d6646e8a600b11","fromSide":"bottom","toNode":"f74a75337e886be4","toSide":"top"},
		{"id":"9ad7ed0b3969fbbd","fromNode":"a3b36a19d699e3a4","fromSide":"right","toNode":"1b2db083ee3cddc7","toSide":"left","toEnd":"none"},
		{"id":"6b5b0285ee00eb81","fromNode":"2c2aa2275f1711bb","fromSide":"bottom","toNode":"a6d6646e8a600b11","toSide":"left"},
		{"id":"7afca39550786d56","fromNode":"7525d5f2be4f25cb","fromSide":"right","toNode":"9ad1c5cad76325c7","toSide":"left","toEnd":"none"},
		{"id":"e1f9b52535927001","fromNode":"9ad1c5cad76325c7","fromSide":"right","toNode":"22c30a2077a45745","toSide":"left"},
		{"id":"c1131ca760e862c9","fromNode":"7525d5f2be4f25cb","fromSide":"bottom","toNode":"9728604b67dae126","toSide":"left"},
		{"id":"7548eb347747b144","fromNode":"9728604b67dae126","fromSide":"right","toNode":"0c2405029300dbf2","toSide":"left","toEnd":"none"},
		{"id":"a37795215d0ffc99","fromNode":"0c2405029300dbf2","fromSide":"bottom","toNode":"73b42de34afb8de0","toSide":"top"},
		{"id":"7441f4dede7362de","fromNode":"7525d5f2be4f25cb","fromSide":"bottom","toNode":"e906abd763bb1e00","toSide":"top"},
		{"id":"e0b8d191010ff5f1","fromNode":"e8702930c70b9560","fromSide":"bottom","toNode":"f6f373c43d532e04","toSide":"right"},
		{"id":"8cdf8c39d155021c","fromNode":"f6f373c43d532e04","fromSide":"bottom","toNode":"e927f6b1bcb29aa5","toSide":"top"},
		{"id":"0a353facab08893c","fromNode":"9728604b67dae126","fromSide":"bottom","toNode":"b030dbc8798ff24a","toSide":"top","label":"="},
		{"id":"7ac04cfc6bbb3072","fromNode":"f6f373c43d532e04","fromSide":"left","toNode":"b030dbc8798ff24a","toSide":"top"},
		{"id":"aba24082dc96f0ed","fromNode":"9728604b67dae126","fromSide":"bottom","toNode":"7c3d7d01575bb69e","toSide":"top"},
		{"id":"061a3760bdecf568","fromNode":"7c3d7d01575bb69e","fromSide":"bottom","toNode":"2c7886bffb6b17b4","toSide":"top","toEnd":"none"},
		{"id":"47dbb15bd7f217b3","fromNode":"f6f373c43d532e04","fromSide":"right","toNode":"427ddf9bafec35e6","toSide":"left","fromEnd":"arrow"},
		{"id":"0c253d7829209b1a","fromNode":"427ddf9bafec35e6","fromSide":"bottom","toNode":"303ca1b7cf455601","toSide":"top"},
		{"id":"98b5b3bbf5dd7995","fromNode":"427ddf9bafec35e6","fromSide":"right","toNode":"9e24b007007992b3","toSide":"left"},
		{"id":"f42e2ec56f37b976","fromNode":"303ca1b7cf455601","fromSide":"right","toNode":"eb5cad11108d5948","toSide":"left"},
		{"id":"f17e9057065a2a4e","fromNode":"303ca1b7cf455601","fromSide":"bottom","toNode":"2e4b09f6620ecffc","toSide":"left","label":"produces"},
		{"id":"f7ebe871afb36437","fromNode":"2e4b09f6620ecffc","fromSide":"right","toNode":"69fb033ce3798b55","toSide":"left","toEnd":"none"},
		{"id":"4dbcc24bf21a2857","fromNode":"a7987a484ba7cf71","fromSide":"right","toNode":"45acb94a61d1b469","toSide":"top","toEnd":"none"},
		{"id":"bc7e991615b69352","fromNode":"45acb94a61d1b469","fromSide":"bottom","toNode":"4340060b1b9fa744","toSide":"top"},
		{"id":"6e01980718b0bd2f","fromNode":"4340060b1b9fa744","fromSide":"bottom","toNode":"9a3d48bf518f3882","toSide":"top"},
		{"id":"68eaea597387134b","fromNode":"9a3d48bf518f3882","fromSide":"bottom","toNode":"099841b6adfdce0f","toSide":"top"},
		{"id":"30dad4fe94c0f31e","fromNode":"b1b26669bfcf22d3","fromSide":"left","toNode":"48beea93251d33b1","toSide":"right"},
		{"id":"87f11ff881c96c90","fromNode":"b1b26669bfcf22d3","fromSide":"right","toNode":"5b51915bb655c1f6","toSide":"left"},
		{"id":"356035b7d958e3c2","fromNode":"5b51915bb655c1f6","fromSide":"right","toNode":"7525d5f2be4f25cb","toSide":"left"},
		{"id":"72f860d81ddb50ed","fromNode":"b1b26669bfcf22d3","fromSide":"right","toNode":"0b2c19c7a588a5af","toSide":"left"},
		{"id":"4483d410b98f6ab9","fromNode":"b24550e52fb36af0","fromSide":"bottom","toNode":"7736b0ca493e27e4","toSide":"top","toEnd":"none"},
		{"id":"d57f99198a9c3dea","fromNode":"7736b0ca493e27e4","fromSide":"bottom","toNode":"a7ed078dcf6d537d","toSide":"right"},
		{"id":"09c4095d6dd5060e","fromNode":"b1b26669bfcf22d3","fromSide":"top","toNode":"ae19b837abd5c684","toSide":"right"},
		{"id":"8ad83f27418b7f3a","fromNode":"ae19b837abd5c684","fromSide":"top","toNode":"4e83b8d332619d49","toSide":"right","toEnd":"none"},
		{"id":"f665abf71c087d07","fromNode":"4e83b8d332619d49","fromSide":"left","toNode":"0d93a804cc52277c","toSide":"right"},
		{"id":"7104a81d21495b96","fromNode":"ae19b837abd5c684","fromSide":"bottom","toNode":"8c39407383b202f3","toSide":"right"},
		{"id":"bc3b2bf8d775585d","fromNode":"8c39407383b202f3","fromSide":"left","toNode":"4c1808b185750cad","toSide":"right","toEnd":"none"},
		{"id":"ba9ea07161e10f91","fromNode":"ae19b837abd5c684","fromSide":"bottom","toNode":"5067424f89264a89","toSide":"right"},
		{"id":"8cdc25ce9570cdb2","fromNode":"ae19b837abd5c684","fromSide":"bottom","toNode":"04509c7b70a23069","toSide":"right"},
		{"id":"83c199d829fb668f","fromNode":"04509c7b70a23069","fromSide":"left","toNode":"f1b5fa77afadef47","toSide":"right","toEnd":"none"},
		{"id":"a29fc4fa0f0097f6","fromNode":"2c2aa2275f1711bb","fromSide":"bottom","toNode":"ae19b837abd5c684","toSide":"right"},
		{"id":"5e81ee9b55595309","fromNode":"99c4e2e208a959bd","fromSide":"left","toNode":"96bec6f59cac95d2","toSide":"top"},
		{"id":"b74eaf544a2190e8","fromNode":"96bec6f59cac95d2","fromSide":"right","toNode":"c8bcc0e32a1530a1","toSide":"left","toEnd":"none"},
		{"id":"c1c9dd296975873f","fromNode":"96bec6f59cac95d2","fromSide":"bottom","toNode":"af94edf97c731dd6","toSide":"right"},
		{"id":"23e6bddd1de80659","fromNode":"ae19b837abd5c684","fromSide":"top","toNode":"af94edf97c731dd6","toSide":"right"},
		{"id":"dfe0bb7dac703b23","fromNode":"af94edf97c731dd6","fromSide":"bottom","toNode":"c0d0b599e474bae8","toSide":"top","toEnd":"none"},
		{"id":"fb3afe4cf690b18a","fromNode":"af94edf97c731dd6","fromSide":"left","toNode":"3a444b681460f7a6","toSide":"right"},
		{"id":"471225f3a5abd2de","fromNode":"3a444b681460f7a6","fromSide":"bottom","toNode":"effda707cefc6d25","toSide":"top","toEnd":"none"},
		{"id":"b31d806f8120ba44","fromNode":"ff4a17b5e78b5149","fromSide":"bottom","toNode":"fb8c9de6ec464338","toSide":"top","toEnd":"none"},
		{"id":"f861917e30e59bdc","fromNode":"42517e7b1a5347af","fromSide":"left","toNode":"e3edf235bcc89af8","toSide":"right"},
		{"id":"361d9f085b5f42fa","fromNode":"345c4530e1704b2d","fromSide":"right","toNode":"156b16064051afd6","toSide":"left"},
		{"id":"372c7fe521a84030","fromNode":"ae19b837abd5c684","fromSide":"bottom","toNode":"842205783ce65dd0","toSide":"right"},
		{"id":"b8482452028c79f4","fromNode":"fb8c9de6ec464338","fromSide":"left","toNode":"dd36825f008c63c5","toSide":"right"},
		{"id":"da26936b2e90cd53","fromNode":"ff4a17b5e78b5149","fromSide":"left","toNode":"42517e7b1a5347af","toSide":"right"},
		{"id":"2751ed602b4a10d1","fromNode":"dd36825f008c63c5","fromSide":"left","toNode":"c9795c151ddcdf38","toSide":"right"},
		{"id":"2746968729cd1ff9","fromNode":"842205783ce65dd0","fromSide":"bottom","toNode":"ff4a17b5e78b5149","toSide":"top","label":"before asterisk"},
		{"id":"df996a51ffae6da6","fromNode":"842205783ce65dd0","fromSide":"bottom","toNode":"0981e2094c7626cd","toSide":"top","label":"after asterisk"},
		{"id":"444198074b12045c","fromNode":"0981e2094c7626cd","fromSide":"bottom","toNode":"345c4530e1704b2d","toSide":"top"},
		{"id":"a4738e1c6458f184","fromNode":"0981e2094c7626cd","fromSide":"right","toNode":"a60eccb857ed1ae8","toSide":"left"},
		{"id":"e45d9525e5d8a3f2","fromNode":"ff4a17b5e78b5149","fromSide":"right","toNode":"a93d5e995fb87d2c","toSide":"top"},
		{"id":"d23c64dcc9579247","fromNode":"0981e2094c7626cd","fromSide":"left","toNode":"a93d5e995fb87d2c","toSide":"top"},
		{"id":"0a41a7a2c3990751","fromNode":"a93d5e995fb87d2c","fromSide":"bottom","toNode":"d384dd3c2c147d17","toSide":"top"},
		{"id":"0902026e5d8c3ab0","fromNode":"fb8c9de6ec464338","fromSide":"bottom","toNode":"0d8c1b14df55179d","toSide":"left"},
		{"id":"59c7413c60a4149f","fromNode":"345c4530e1704b2d","fromSide":"bottom","toNode":"0d8c1b14df55179d","toSide":"right"},
		{"id":"4ecf5f89d3a78f89","fromNode":"d384dd3c2c147d17","fromSide":"bottom","toNode":"0d8c1b14df55179d","toSide":"top"},
		{"id":"9063a19cee56d408","fromNode":"ae19b837abd5c684","fromSide":"top","toNode":"47a45a3e640ae90a","toSide":"left","toEnd":"none"},
		{"id":"feb67deed856634b","fromNode":"f179de86cdf0471e","fromSide":"top","toNode":"198a5d7e5a0cb7b3","toSide":"bottom"},
		{"id":"ff11706603a80d4a","fromNode":"59df5d8b6e9b81f5","fromSide":"left","toNode":"ae19b837abd5c684","toSide":"right"},
		{"id":"949f084a85eb2383","fromNode":"59df5d8b6e9b81f5","fromSide":"right","toNode":"7525d5f2be4f25cb","toSide":"left"},
		{"id":"5b08d9d6df406afe","fromNode":"e906abd763bb1e00","fromSide":"bottom","toNode":"33e51db044895be4","toSide":"top"},
		{"id":"bffc1b60238a34a7","fromNode":"7525d5f2be4f25cb","fromSide":"bottom","toNode":"a7987a484ba7cf71","toSide":"top"},
		{"id":"c68da001f325cae0","fromNode":"ae19b837abd5c684","fromSide":"left","toNode":"b24550e52fb36af0","toSide":"right"},
		{"id":"dc867e8de54a1378","fromNode":"ae19b837abd5c684","fromSide":"bottom","toNode":"f179de86cdf0471e","toSide":"left"},
		{"id":"78f4f094f86542d7","fromNode":"48beea93251d33b1","fromSide":"top","toNode":"7f8132ebd4b4275c","toSide":"right"},
		{"id":"b9c6ee450e63ab18","fromNode":"f179de86cdf0471e","fromSide":"right","toNode":"6543b29985976774","toSide":"top"},
		{"id":"e4948160393cfd40","fromNode":"a7987a484ba7cf71","fromSide":"left","toNode":"6543b29985976774","toSide":"top"},
		{"id":"ea696592600505fe","fromNode":"6543b29985976774","fromSide":"left","toNode":"ed3d0a4f60056f33","toSide":"top"},
		{"id":"078b59ffc0c17909","fromNode":"6543b29985976774","fromSide":"bottom","toNode":"6360a2e2b51d8886","toSide":"left"},
		{"id":"bfef689b24c66d9f","fromNode":"6360a2e2b51d8886","fromSide":"right","toNode":"7aaec43bd50b2631","toSide":"left","toEnd":"none"},
		{"id":"adc03c10c20eac93","fromNode":"7aaec43bd50b2631","fromSide":"top","toNode":"2900bd5f8dce9874","toSide":"bottom"},
		{"id":"db50c411f2d9cd0e","fromNode":"7aaec43bd50b2631","fromSide":"right","toNode":"00973e5228c0aff2","toSide":"left"},
		{"id":"dc20cf98c8100891","fromNode":"6543b29985976774","fromSide":"bottom","toNode":"5da3a1c4a662290f","toSide":"right"},
		{"id":"8dd1fd23bc061a84","fromNode":"5da3a1c4a662290f","fromSide":"left","toNode":"016f6f7c6bd0c4c4","toSide":"right","toEnd":"none"},
		{"id":"371e2ca85e0214db","fromNode":"41561dd2f2e77f9f","fromSide":"right","toNode":"7525d5f2be4f25cb","toSide":"top"},
		{"id":"b95558744817d1de","fromNode":"dd36825f008c63c5","fromSide":"bottom","toNode":"1b46d48101817cd2","toSide":"right"},
		{"id":"23c9f6d0adbc169c","fromNode":"444bde59e098d36b","fromSide":"left","toNode":"38ce8b78f28dfaa2","toSide":"right","toEnd":"none"},
		{"id":"9ffeb7a04241a9d1","fromNode":"1b46d48101817cd2","fromSide":"left","toNode":"2c58fcbdcdc5ea10","toSide":"right","toEnd":"none"},
		{"id":"53012bef3aca93b5","fromNode":"d36a40e7a1da3d69","fromSide":"top","toNode":"38ce8b78f28dfaa2","toSide":"bottom"},
		{"id":"e030c7fd5025eb0c","fromNode":"156b16064051afd6","fromSide":"bottom","toNode":"444bde59e098d36b","toSide":"top"},
		{"id":"a718439e83057e6c","fromNode":"d36a40e7a1da3d69","fromSide":"bottom","toNode":"531e1cb6c757bd54","toSide":"top"}
	]
}