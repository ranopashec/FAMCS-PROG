{
	"nodes":[
		{"type":"text","text":"array","id":"81e1831cd7a99de6","x":-245,"y":-163,"width":105,"height":50,"color":"3"},
		{"type":"text","text":"(**fixed length array** or **fixed size array**)","id":"84f8d8c95434f033","x":-140,"y":60,"width":421,"height":50},
		{"type":"text","text":"fixed array","id":"32a588822e915fb1","x":-10,"y":160,"width":161,"height":50,"color":"6"},
		{"type":"text","text":"array length","id":"64c0772ea3ae4bed","x":-10,"y":-40,"width":161,"height":50,"color":"6"},
		{"type":"text","text":"element","id":"491103399f37e99c","x":-10,"y":240,"width":161,"height":50,"color":"6"},
		{"type":"text","text":"**subscript** (or **index**)","id":"a074222efc718a7c","x":-51,"y":490,"width":243,"height":60,"color":"6"},
		{"type":"text","text":"array **subscripting** or **indexing**","id":"bdad468bedb3e3ad","x":-103,"y":360,"width":348,"height":73,"color":"6"},
		{"type":"text","text":"array’s **range**.","id":"fbf4bb982690f5b2","x":-51,"y":620,"width":243,"height":60,"color":"6"},
		{"type":"text","text":"**initializer list**","id":"0061cdb35ef47de2","x":-52,"y":720,"width":243,"height":60,"color":"6"},
		{"type":"text","text":"Omitted length","id":"abe1ae0b20a87759","x":-50,"y":980,"width":243,"height":60,"color":"6"},
		{"type":"text","text":"`<iterator>` header","id":"6df514727c0c220d","x":-51,"y":1080,"width":242,"height":60},
		{"type":"text","text":"```cpp\nstd::size(arrayName)\n```","id":"0c9e44a5d4dceef9","x":-90,"y":1180,"width":320,"height":60},
		{"type":"text","text":"**zero initialization**","id":"a79202376f614b04","x":257,"y":862,"width":243,"height":50,"color":"6"},
		{"type":"text","text":"if there are less initializers in the list than the array can hold, the remaining elements are initialized to 0","id":"ad94a10123d5973f","x":533,"y":837,"width":550,"height":100},
		{"type":"text","text":"```cpp\nint prime[5]{ 2, 3, 5, 7, 11 };\n```","id":"0ceffb662361213b","x":840,"y":725,"width":554,"height":50},
		{"type":"text","text":"```cpp\nint array[]{ 0, 1, 2, 3, 4 };\n```","id":"198709e2d6754d0d","x":851,"y":975,"width":420,"height":70},
		{"type":"text","text":"```cpp\nint array[5]{};          // Initialize all elements to 0\ndouble array[5] {};      // Initialize all elements to 0.0\nstd::string array[5] {}; // Initialize all elements to an empty string\n```","id":"1b3ef867bf40fcc2","x":1127,"y":820,"width":885,"height":135},
		{"type":"text","text":"convenient way to initialize entire arrays","id":"d876be9c46478006","x":256,"y":725,"width":551,"height":50},
		{"type":"text","text":"a parameter. used to access individual elements of an array by array name and subscript operator `[ ]`, that tells the compiler which element we want","id":"d06e3d4d0d498ddc","x":257,"y":460,"width":550,"height":120},
		{"type":"text","text":"For an array of length N, the array elements are numbered 0 through N-1.","id":"44f37ed77eb7a8bd","x":257,"y":600,"width":550,"height":100},
		{"type":"text","text":"let the initializer list set length of the array","id":"1a84bcc9fa22c8e7","x":257,"y":980,"width":550,"height":60},
		{"type":"text","text":"how many variables are allocated in the array\n( in sqare brackets - `[ ]`)","id":"eee86afb5ddf48c3","x":257,"y":-65,"width":550,"height":100},
		{"type":"text","text":"is an array where the length is known at compile time","id":"5580de097ed0e6ac","x":257,"y":160,"width":550,"height":50},
		{"type":"text","text":"Each of the variables in an array","id":"f5274ae99be1a2aa","x":257,"y":240,"width":550,"height":50},
		{"type":"text","text":"used to determine the length of arrays","id":"c000c5e0a48e1ba2","x":257,"y":1180,"width":550,"height":60},
		{"type":"text","text":"```cpp\nint arrayName[30]{}; // allocate 30 integer variables in a fixed array\n```","id":"e1e1a47f5778427b","x":840,"y":-183,"width":554,"height":91},
		{"type":"text","text":"is an aggregate data type that lets us access many variables of the same type through a single identifier","id":"fb89cf0b162e8ac5","x":257,"y":-183,"width":550,"height":91},
		{"type":"text","text":"```cpp\n    int arrayName[5]{}; // hold the first 5 prime numbers\n    arrayName[0] = 2; // The first element has index 0\n    arrayName[1] = 3;\n    arrayName[2] = 5;\n    arrayName[3] = 7;\n    arrayName[4] = 11; // The last element has index 4 (array length-1)\n```","id":"956e4b2883a7886c","x":687,"y":-440,"width":860,"height":220},
		{"type":"text","text":"**iterating** through the array","id":"b37566cbb52fea0f","x":-660,"y":-40,"width":315,"height":50,"color":"6"},
		{"type":"text","text":"When a loop is used to access each array element in turn","id":"d8539084b78d172b","x":-1040,"y":-55,"width":340,"height":80},
		{"type":"text","text":"```cpp\nconstexpr int numElementsInArray{ static_cast<int>(std::size(arrayName)) };\nconst int numElementsInArray{ sizeof(arrayName) / sizeof(arrayName[0]) }; \n// use this instead if not C++17 capable\n```","id":"7d1af6dfa674a42c","x":140,"y":1280,"width":900,"height":140},
		{"type":"text","text":"off-by-one errors","id":"1696c484b5c74e10","x":-1300,"y":-42,"width":215,"height":54,"color":"1"},
		{"type":"text","text":"std::sort","id":"fe0985b717711395","x":-932,"y":220,"width":125,"height":50,"color":"6"},
		{"type":"text","text":"**multidimensional array**","id":"ff6677b97a0431d2","x":-660,"y":306,"width":315,"height":54,"color":"6"},
		{"type":"text","text":"**row-major** order","id":"43d1d2528a2fd839","x":-836,"y":420,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"In a two-dimensional array, the first (left) subscript as being the row, and the second (right) subscript as being the column","id":"aa72610654a6fb45","x":-1491,"y":400,"width":621,"height":101},
		{"type":"text","text":"[0][0]  [0][1]  [0][2]  [0][3]  [0][4] // row 0\n[1][0]  [1][1]  [1][2]  [1][3]  [1][4] // row 1\n[2][0]  [2][1]  [2][2]  [2][3]  [2][4] // row 2","id":"38dc0ab04719c429","x":-1385,"y":540,"width":409,"height":111},
		{"type":"text","text":"Initializing two-dimensional arrays","id":"9378f86752760f87","x":-937,"y":552,"width":224,"height":88},
		{"type":"text","text":"```cpp\nint array[3][5]\n{\n  { 1, 2, 3, 4, 5 }, // row 0\n  { 6, 7, 8, 9, 10 }, // row 1\n  { 11, 12, 13, 14, 15 } // row 2\n};\n```","id":"c23dde81e3a62473","x":-1042,"y":680,"width":434,"height":230},
		{"type":"text","text":"Two-dimensional arrays with initializer lists can omit (only) the leftmost length specification","id":"eaed04721f0fd3a5","x":-1664,"y":745,"width":472,"height":100},
		{"type":"text","text":"when a fixed array is used in an expression, the fixed array will **decay** (be implicitly converted) into a pointer that points to the first element of the array.","id":"51f3edb4180d17e5","x":-1084,"y":953,"width":739,"height":87},
		{"type":"text","text":"**scaling**","id":"b3d79ab1da5dd2bb","x":-783,"y":1085,"width":137,"height":50,"color":"6"},
		{"type":"text","text":"calculating the result of a pointer arithmetic expression, by multiplying the integer operand by the size of the object being pointed to","id":"25c8be27473cc17c","x":-1497,"y":1067,"width":672,"height":86},
		{"type":"text","text":"`std::count_if`","id":"a0b4c2f61476fb8f","x":-595,"y":1220,"width":250,"height":60},
		{"type":"text","text":"```cpp\n// walk through all the elements of name and count how many calls to isVowel return true\nauto numVowels{ std::count_if(std::begin(name), std::end(name), isVowel) };\n```","id":"158561c10578eb4a","x":-1668,"y":1200,"width":1022,"height":100},
		{"type":"text","text":"`std::begin` returns an iterator (pointer) to the first element, while `std::end` returns an iterator to the element that would be one after the last.","id":"84c0eb9b38d14306","x":-2161,"y":910,"width":733,"height":112},
		{"type":"text","text":"```cpp\n#include <iterator>\n```","id":"2d8e15f76bc2f304","x":-1951,"y":609,"width":313,"height":84},
		{"type":"text","text":"The subscript operator (`[]`) is identical to an addition and an indirection, the operands can be swapped.","id":"0e4f02cae173d66d","x":840,"y":479,"width":554,"height":81},
		{"type":"text","text":"```cpp\narr[2]\n// same as\n*(arr + 2)\n// same as\n*(2 + arr)\n// same as\n2[arr]\n```","id":"fa1599b33ac6ac34","x":1437,"y":393,"width":203,"height":253},
		{"type":"text","text":"an array of characters that uses a null terminator","id":"faad4240f1a6a01a","x":-2621,"y":135,"width":290,"height":75},
		{"type":"text","text":"C-style strings","id":"9452495f756f82c4","x":-2301,"y":147,"width":200,"height":50,"color":"5"},
		{"type":"text","text":"a special character (‘\\0’, ascii code 0) used to indicate the end of the string","id":"2531a30405840232","x":-3035,"y":237,"width":414,"height":94},
		{"type":"text","text":"**null terminator**","id":"81eba61d6af3260e","x":-2575,"y":259,"width":199,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\nchar myString[]{ \"string\" };\n```","id":"40d51d5e103cbfca","x":-2771,"y":410,"width":393,"height":76},
		{"type":"text","text":"null-terminated string","id":"484bdf5b6bd256c7","x":-2326,"y":418,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"`strcpy()`","id":"31c187632e83ee6d","x":-2982,"y":1027,"width":160,"height":56},
		{"type":"text","text":"```cpp\nstd::strcpy(dest, source); \n// source will be copied to dest\n```","id":"63ba97abd41b6ef2","x":-3129,"y":1130,"width":454,"height":100},
		{"type":"text","text":"returns the the number of characters before the null terminator","id":"c439cc92797934ba","x":-2632,"y":1152,"width":406,"height":100},
		{"type":"text","text":"strcat() -- Appends one string to another (dangerous)  \nstrncat() -- Appends one string to another (with buffer length check)  \nstrcmp() -- Compare two strings (returns 0 if equal)  \nstrncmp() -- Compare two strings up to a specific number of characters (returns 0 if equal)","id":"ab31d54107e1f161","x":-2632,"y":1370,"width":863,"height":160},
		{"type":"text","text":"```cpp\nstd::strlen(cstringName)\n```","id":"22278ecdafcb1da7","x":-2606,"y":1292,"width":354,"height":61},
		{"type":"text","text":"`strlen()`","id":"f0f7b8ed902515f7","x":-2516,"y":1049,"width":174,"height":56},
		{"type":"text","text":"You can initialize the string upon creation, but you can not assign values to it using the assignment operator after that. (Because it is an array).","id":"c0d7901154e33093","x":-2836,"y":535,"width":522,"height":120,"color":"4"},
		{"type":"text","text":"**Manipulating C-style strings**","id":"aee54b877c639ee8","x":-2364,"y":730,"width":326,"height":50},
		{"type":"text","text":"```\n<cstring> header\n```","id":"ecf5300c07256045","x":-2342,"y":811,"width":282,"height":53},
		{"type":"text","text":"```cpp\nchar cstringName[255] {}; // declare array large enough to hold 254 characters + null terminator\nstd::cin.getline(cstringName, std::size(cstringName)); // Any excess characters will be discarded\n```","id":"4e9f8ebfee2e75a4","x":-3566,"y":711,"width":1168,"height":89},
		{"type":"text","text":"strings","id":"077181a222671db5","x":-1491,"y":-163,"width":147,"height":50,"color":"6"},
		{"type":"text","text":"use std::string instead","id":"3f60b4cbc28ec937","x":-2032,"y":-168,"width":263,"height":61,"color":"4"},
		{"type":"text","text":"C++ does _not_ copy an array when an array is passed into a function. Instead, the _actual_ array is passed","id":"96d5fe10bc3b2343","x":-791,"y":160,"width":546,"height":101,"color":"4"},
		{"type":"text","text":"**for-each** loop ","id":"9b3c40a1fc3806ac","x":-52,"y":1480,"width":245,"height":60,"color":"6"},
		{"type":"text","text":"(**range-based for-loop**) used for cases where we want to iterate through every element in an array (or other list-type structure)","id":"5e82e89946bcd371","x":230,"y":1466,"width":650,"height":89},
		{"type":"text","text":"for (element_declaration : array)\n   statement;","id":"87b0bccfe0611880","x":923,"y":1475,"width":408,"height":72},
		{"type":"text","text":"```cpp\nint array[3][5]; // a 3-element array of 5-element arrays\n```","id":"0daf55e04f35177c","x":-1389,"y":287,"width":417,"height":92},
		{"type":"text","text":"An array of arrays","id":"b5c7157ed449fd30","x":-932,"y":303,"width":250,"height":60},
		{"type":"text","text":"selection sort","id":"e79cbed063d155f6","x":-972,"y":53,"width":200,"height":57,"color":"6"},
		{"type":"text","text":"```cpp\n#include <algorithm>\n```","id":"4da43944dccf7c79","x":-1273,"y":128,"width":301,"height":57},
		{"type":"text","text":"```cpp\nstd::sort(myArray.begin(), myArray.end()); \n// sort the array forwards\nstd::sort(myArray.rbegin(), myArray.rend());\n// sort the array backwards\n```","id":"4b5d042c5a0220b7","x":-1985,"y":161,"width":557,"height":169},
		{"type":"text","text":"```cpp\n#include <array>\n```","id":"509dbc6edcee6ce5","x":-553,"y":1734,"width":265,"height":77},
		{"type":"text","text":"```cpp\n// std::array myArray { 9, 7, 5, 3, 1 }; // Since C++17\nstd::array<int, 5> myArray { 9, 7, 5, 3, 1 }; // Before C++17\n```","id":"76798ee74fedd60d","x":-2060,"y":1865,"width":842,"height":101},
		{"type":"text","text":"```cpp\nauto myArray1 { std::to_array<int, 5>({ 9, 7, 5, 3, 1 }) }; // Specify type and size\nauto myArray2 { std::to_array<int>({ 9, 7, 5, 3, 1 }) }; // Specify type only, deduce size\nauto myArray3 { std::to_array({ 9, 7, 5, 3, 1 }) }; // Deduce type and size\n```","id":"a8bcea0804ca2ac4","x":-2337,"y":2016,"width":1119,"height":129},
		{"type":"text","text":"```cpp\nmyArray[1] = 6; // Accessing `std::array` values using the subscript operator\nmyArray.at(1) = 6; // second form of array element access (the `at()` function) that does (runtime) bounds checking\n```","id":"fe44d0b10d7115f2","x":-2650,"y":2201,"width":1432,"height":100},
		{"type":"text","text":"```cpp\nmyArray.size() // retrieve the length of the std::array\n```","id":"317746f90a3ef4a8","x":-1910,"y":2346,"width":692,"height":80},
		{"type":"text","text":"to pass std::array by value we use templates","id":"3a09ff460280460f","x":-1675,"y":2472,"width":457,"height":72},
		{"type":"text","text":"- the length must be known at compile time\n- can be initialized using initializer list","id":"9f75c3b1193f7f08","x":-1049,"y":2095,"width":516,"height":100},
		{"type":"text","text":"Every type that can be used in a regular array can be used in a `std::array`.","id":"2b460ac7d2376647","x":-1049,"y":2251,"width":515,"height":90},
		{"type":"text","text":"provides fixed array functionality that won’t decay when passed into a function","id":"53e7f89e7ce26f1c","x":-1026,"y":1932,"width":470,"height":92},
		{"type":"text","text":"`std::array`","id":"37610513bedc2af4","x":-508,"y":1950,"width":169,"height":56,"color":"6"},
		{"type":"text","text":"```cpp\nstruct House\n{\n    int number{};\n    int stories{};\n    int roomsPerStory{};\n};\n\n    std::array<House, 3> houses{};\n```","id":"1b65edca40102f93","x":-1116,"y":2371,"width":650,"height":249},
		{"type":"text","text":"`std::array::size_type` is an alias for `std::size_t` ","id":"88a7fab87f4f26e0","x":-3473,"y":2474,"width":540,"height":68},
		{"type":"text","text":"```cpp\n#include <vector>\n```","id":"b4251afa3440622f","x":-90,"y":1734,"width":313,"height":77},
		{"type":"text","text":"```cpp\nfor (auto& element: array) // The ampersand makes element a reference to the actual array element, preventing a copy from being made\n{\n    std::cout << element << ' ';\n}\n```","id":"aec1a2c7c2d9f4ca","x":1394,"y":1428,"width":840,"height":166},
		{"type":"text","text":"```cpp\nint** ptrptr; // pointer to a pointer to an int, two asterisks\n```","id":"6f43756662c48803","x":615,"y":-745,"width":480,"height":96},
		{"type":"text","text":"pointer to a pointer","id":"0faa7942f8e4e6e1","x":1021,"y":-980,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"```cpp\nint** ptrptr { &&value }; // not valid\n```","id":"f25478ede5067461","x":1149,"y":-625,"width":501,"height":50},
		{"type":"text","text":"you can not set a pointer to a pointer directly to a value","id":"47c685c62e6e2d84","x":1236,"y":-745,"width":327,"height":82,"color":"1"},
		{"type":"text","text":"```cpp\nint** array { new int*[10] }; // allocate an array of 10 int pointers\n```","id":"4b7514136dfcd0c7","x":575,"y":-625,"width":561,"height":99},
		{"type":"text","text":"[pointers](notes/studies/programming/c++/9.0%20-%20Compound%20Types;%20References%20and%20Pointers.canvas)","id":"56e173f90111836d","x":1186,"y":-1204,"width":139,"height":59,"color":"6"},
		{"type":"text","text":"(generic pointer) is a special type of pointer that can be pointed at objects of any data type.","id":"4af514287097ac24","x":1611,"y":-996,"width":541,"height":93},
		{"type":"text","text":"dereferencing a void pointer is illegal. (void pointer must first be cast to another pointer type before the dereference can be performed.)","id":"013ccec25d02f506","x":1547,"y":-1116,"width":669,"height":82,"color":"1"},
		{"type":"text","text":"**void pointer**","id":"bd6ebe43bc6347da","x":1340,"y":-980,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"stack ","id":"5343592b6b860fcc","x":287,"y":-1639,"width":113,"height":56,"color":"6"},
		{"type":"text","text":"**heap**","id":"405e051998f1f21f","x":287,"y":-1494,"width":113,"height":50,"color":"6"},
		{"type":"text","text":"`new` operator","id":"6d519c89d08ebdc2","x":40,"y":-1311,"width":200,"height":50,"color":"6"},
		{"type":"text","text":"`new[]`","id":"b7612e8da565bcb8","x":83,"y":-1011,"width":115,"height":54},
		{"type":"text","text":"happens for static and global variables. Memory for these types of variables is allocated once when your program is run and persists throughout the life of your program.","id":"7bcf4c8274eeb35b","x":-1860,"y":-1592,"width":584,"height":116},
		{"type":"text","text":"- The size of the variable / array must be known at compile time.\n- Memory allocation and deallocation happens automatically (when the variable is instantiated / destroyed).","id":"c4c847bcc1de1b27","x":-1740,"y":-1298,"width":1043,"height":94},
		{"type":"text","text":"**Static memory allocation**","id":"8f13ced35fd4635d","x":-1665,"y":-1743,"width":193,"height":91,"color":"5"},
		{"type":"text","text":"A pointer that is pointing to deallocated memory","id":"c950e8946b1f809d","x":-1579,"y":-1134,"width":314,"height":80,"color":"4"},
		{"type":"text","text":"happens for function parameters and local variables. Memory for these types of variables is allocated when the relevant block is entered, and freed when the block is exited, as many times as necessary.","id":"8922f9e54ac3474d","x":-1251,"y":-1592,"width":728,"height":116},
		{"type":"text","text":"```cpp\ndelete ptr; // return the memory pointed to by ptr to the operating system\nptr = nullptr; // set ptr to be a null pointer\n```","id":"d8aad9dc4b8f4f11","x":-1200,"y":-1157,"width":653,"height":126},
		{"type":"text","text":"is used to allocate a _single_ variable dynamically (called the scalar (non-array) form of new operator)","id":"4777c3a3bd60009e","x":264,"y":-1341,"width":528,"height":111},
		{"type":"text","text":"```cpp\nint* ptr{ new int }; // dynamically allocate an integer and assign the address to ptr so we can access it later\n```","id":"3b7aed44c5ae14aa","x":264,"y":-1210,"width":700,"height":89},
		{"type":"text","text":"```cpp\nint* ptr1{ new int (5) }; // use direct initialization\nint* ptr2{ new int { 6 } }; // use uniform initialization\n```","id":"bc0ebeebca6d470d","x":264,"y":-1081,"width":701,"height":100},
		{"type":"text","text":"```cpp\nint* array{ new int[length]{} }; // use array new.\n```","id":"138c6626b1276247","x":264,"y":-935,"width":422,"height":97},
		{"type":"text","text":"a portion of memmory, where most normal variables (including fixed arrayy) are allocated","id":"1423ada50382560a","x":434,"y":-1652,"width":503,"height":83},
		{"type":"text","text":"large pool of memory, managed by the operating system.","id":"0f9413497a609b3a","x":434,"y":-1512,"width":503,"height":87},
		{"type":"text","text":"`delete[]`","id":"c295d865305fcae2","x":-399,"y":-1011,"width":162,"height":54},
		{"type":"text","text":"A pointer that is pointing to deallocated memory","id":"693e04820382cb04","x":-719,"y":-1000,"width":277,"height":92},
		{"type":"text","text":"**dangling pointer**","id":"fbaabb5bd3dfae3b","x":-998,"y":-984,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"memory allocation","id":"2a0a323586e1c022","x":-1009,"y":-1978,"width":234,"height":60,"color":"6"},
		{"type":"text","text":"**Automatic memory allocation**","id":"b5d975c3deff3d6d","x":-1009,"y":-1743,"width":244,"height":91,"color":"5"},
		{"type":"text","text":"`delete` operator","id":"404f73def8015a60","x":-568,"y":-1311,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"is a way for running programs to request memory from the operating system when needed. This memory does not come from stack memory -- instead, it is allocated from a  **heap**.","id":"8500dbad490a1aa3","x":-484,"y":-1592,"width":624,"height":116},
		{"type":"text","text":"**Dynamic memory allocation**","id":"1c8d4d880e7273af","x":-295,"y":-1743,"width":246,"height":91,"color":"5"},
		{"type":"text","text":"```cpp\nint* value { new (std::nothrow) int }; // value will be set to a null pointer if the integer allocation fails\n```","id":"88883b12a2efc3b6","x":832,"y":-1339,"width":701,"height":106},
		{"type":"text","text":"**memory leak**","id":"ad6f18df1609e84b","x":992,"y":-1728,"width":250,"height":60,"color":"1"},
		{"type":"text","text":"happen when your program loses the address of some bit of dynamically allocated memory before giving it back to the operating system","id":"0ac891e35a4760ee","x":1288,"y":-1740,"width":732,"height":85},
		{"type":"text","text":"invalidated iterator","id":"043d28071cfdbc2d","x":2515,"y":1806,"width":220,"height":54,"color":"6"},
		{"type":"text","text":"```cpp\n#include <iterator>\n```","id":"b852db3e7a023a72","x":2819,"y":1655,"width":321,"height":61},
		{"type":"text","text":"`begin()`","id":"0da88e644405b536","x":3270,"y":1600,"width":145,"height":60},
		{"type":"text","text":"`end()`","id":"5c7b4dbca8b81145","x":3270,"y":1710,"width":145,"height":52},
		{"type":"text","text":"```cpp\nauto begin{ array.begin() };\nauto end{ array.end() };\n```","id":"7cf3302341e5d026","x":3495,"y":1630,"width":400,"height":92},
		{"type":"text","text":"if the elements being iterated over change address or are destroyed","id":"34d2477a04841063","x":2773,"y":1793,"width":367,"height":80},
		{"type":"text","text":"iterator","id":"fd9cb8fe6979cd93","x":2355,"y":1486,"width":122,"height":50,"color":"6"},
		{"type":"text","text":"is an object designed to traverse through a container (e.g. the values in an array, or the characters in a string), providing access to each element along the way.","id":"4c4e7f08ae99cbb2","x":2515,"y":1463,"width":780,"height":96},
		{"type":"text","text":"Standard library iterators","id":"3c385df262ccc96b","x":2515,"y":1660,"width":273,"height":50},
		{"type":"text","text":"```cpp\n// no need to specify length at the declaration\nstd::vector<int> v;\nstd::vector<int> v2 = { 9, 7, 5, 3, 1 }; // use initializer list to initialize vector (before C++11)\nstd::vector<int> v3 { 9, 7, 5, 3, 1 }; // use uniform initialization to initialize vector\n// as with std::array, the type can be omitted since C++17\nstd::vector v4 { 9, 7, 5, 3, 1 }; // deduced to std::vector<int>\n```","id":"28fca8d0fd5cc400","x":760,"y":1921,"width":1153,"height":224},
		{"type":"text","text":"```cpp\nv[6] = 2; // no bounds checking\nv.at(7) = 3; // does bounds checking\n```","id":"c0d27f0b84e3d8dc","x":985,"y":2195,"width":478,"height":108},
		{"type":"text","text":"```cpp\nv = { 0, 1, 2, 3, 4 }; // okay, vector length is now 5\nv = { 9, 8, 7 }; // okay, vector length is now 3\n```","id":"39f716166e43d2af","x":1145,"y":2351,"width":696,"height":94},
		{"type":"text","text":"```cpp\nvectorName.size()\n```","id":"78106dedb88b87d1","x":1173,"y":2575,"width":290,"height":60},
		{"type":"text","text":"`size()` returns a value of nested type `size_type` = ( `std::vector<int>::size_type` )","id":"20a27be8d76374f6","x":1498,"y":2575,"width":831,"height":60},
		{"type":"text","text":"```cpp\n// Using direct initialization, we can create a vector with 5 elements, each element has value 0. If we use brace initialization, the vector would  have 1 element with value 5\nstd::vector a { 1, 2, 3 }; // allocate 3 elements with values 1, 2, and 3\nstd::vector b { 3 }; // allocate 1 element with value 3\nstd::vector<int> c ( 3 ); // allocate 3 elements with values 0, 0, and 0\nstd::vector<int> d ( 3, 4 ); // allocate 3 elements with values 4, 4, and 4\n```","id":"e66ec7dd54f7fdd7","x":1949,"y":1921,"width":956,"height":224},
		{"type":"text","text":"Accessing array elements can be done via the `[]` operator (which does no bounds checking) or the `at()` function (which does bounds checking)","id":"65ed4f8b19b95591","x":218,"y":2200,"width":712,"height":98},
		{"type":"text","text":"memory will be deallocated as soon as `std::vector` goes out of scope","id":"1d0d39db63a418e0","x":218,"y":2475,"width":712,"height":60},
		{"type":"text","text":"std::vector keeps track of its length. We can ask for the vector’s length via the `size()` function","id":"626db6f7a67af68d","x":218,"y":2575,"width":890,"height":60},
		{"type":"text","text":"resizing a vector","id":"3ada5135a5023b83","x":218,"y":2681,"width":207,"height":60},
		{"type":"text","text":"```cpp\nstd::vector v{ 0, 1, 2 };\nv.resize(5); // set size to 5\n```","id":"0a57428cb140efb4","x":485,"y":2665,"width":623,"height":93},
		{"type":"text","text":"you can also assign values to a `std::vector` using an initializer-list","id":"bf02afca2007ca37","x":702,"y":2355,"width":406,"height":86,"color":"6"},
		{"type":"text","text":"`std::vector`","id":"659cecef4dfe2496","x":-25,"y":2005,"width":193,"height":56,"color":"6"},
		{"type":"text","text":"provides dynamic array functionality that handles its own memory management.","id":"9e55ff745b73b7fc","x":218,"y":1991,"width":484,"height":84},
		{"type":"text","text":"[standard library algorithms](https://www.youtube.com/watch?v=2olsGf6JIkU&ab_channel=CppCon)","id":"c0e1f9ce9240ea34","x":-2882,"y":-1978,"width":322,"height":60,"color":"6"},
		{"type":"text","text":"[0_C++_0](notes/studies/programming/c++/0_C++_0.canvas)","id":"de7e57db5501733b","x":-1916,"y":-2280,"width":176,"height":58,"color":"3"},
		{"type":"text","text":"```cpp\nauto found{ std::find(arr.begin(), arr.end(), search) };\n// Algorithms that don't find what they were looking for return the end iterator.\n```","id":"cacef366915f0277","x":-4300,"y":-968,"width":693,"height":121},
		{"type":"text","text":"Used to view (but not modify) data in a container. Examples include searching and counting.","id":"fc1adcd0d9ac5b12","x":-3330,"y":-1199,"width":550,"height":92},
		{"type":"text","text":"`std::find_if`","id":"dcd201f0ea142ad7","x":-3576,"y":-817,"width":216,"height":60},
		{"type":"text","text":"[`std::find`](https://en.cppreference.com/w/cpp/algorithm/find)","id":"a18d08635fb2c863","x":-3576,"y":-934,"width":216,"height":57},
		{"type":"text","text":"Inspectors","id":"d550332e84b513b4","x":-3180,"y":-1426,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Used to modify data in a container. Examples include sorting and shuffling.","id":"e48d1ab15db8ac12","x":-2924,"y":-1311,"width":406,"height":84},
		{"type":"text","text":"Mutators","id":"237ce178a85e2cc9","x":-2846,"y":-1426,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Used to generate a result based on values of the data members. Examples include objects that multiply values, or objects that determine what order pairs of elements should be sorted in.","id":"122a89e6cfbe68c9","x":-2695,"y":-1213,"width":641,"height":121},
		{"type":"text","text":"Facilitators","id":"c954714b33a9bf05","x":-2500,"y":-1426,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"```cpp\n#include <algorithm>\n```","id":"d5177eb2d1ea0a30","x":-2870,"y":-1766,"width":299,"height":69},
		{"type":"text","text":"For each element being iterated over, `std::find_if` will call this function (passing the element as an argument to the function)","id":"44e722050ebb633e","x":-4300,"y":-833,"width":693,"height":93},
		{"type":"text","text":"`std::count`","id":"f3460b2883eecb68","x":-3576,"y":-660,"width":216,"height":60},
		{"type":"text","text":"`std::count_if`","id":"997531e1777c3109","x":-3576,"y":-540,"width":216,"height":60},
		{"type":"text","text":"search for all occurrences of an element or an element fulfilling a condition","id":"ba53c75bac847f06","x":-4400,"y":-600,"width":724,"height":60},
		{"type":"text","text":"takes a list as input and applies a custom function to every element. This is useful when we want to perform the same operation to every element in a list.","id":"c17d0d455294718c","x":-1957,"y":-1006,"width":739,"height":97},
		{"type":"text","text":"`std::for_each`","id":"642f3f833c8187ce","x":-2224,"y":-984,"width":224,"height":52},
		{"type":"text","text":"```cpp\nstd::for_each(arr.begin(), arr.end(), doubleNumber);\n```","id":"5d30eed52f9a6a27","x":-1957,"y":-880,"width":739,"height":75},
		{"type":"text","text":"```cpp\nauto found{ std::find_if(arr.begin(), arr.end(), boolfoo) };\n```","id":"cb1e2cca8644b24a","x":-5300,"y":-815,"width":826,"height":58},
		{"type":"text","text":"12.0 ch","id":"974e7307a0fa6768","x":43,"y":2803,"width":125,"height":60},
		{"type":"text","text":"```cpp\nv.capacity()\n```","id":"c50073b77f0a0ace","x":218,"y":2803,"width":250,"height":60},
		{"type":"text","text":"is how many elements were allocated in memory","id":"5fb3250dfbb6da30","x":496,"y":2794,"width":301,"height":79},
		{"type":"text","text":"`std::sort`","id":"c220c184f782f021","x":-2846,"y":-902,"width":250,"height":60},
		{"type":"text","text":"```cpp\nstd::sort(s.begin(), s.end());\n// sorted with the default operator<\nstd::sort(s.begin(), s.end(), std::greater<int>());\n// sorted with the standard library compare function object\n```","id":"1ff14f74984d4d5a","x":-3092,"y":-791,"width":742,"height":149},
		{"type":"text","text":"```cpp\n// printArray is a template function\ntemplate <typename T, std::size_t size> // parameterize the element type and size\nvoid printArray(const std::array<T, size>& myArray)\n{\n    for (auto element : myArray)\n        std::cout << element << ' ';\n    std::cout << '\\n';\n}\n```","id":"53c7064ba4fca00d","x":-2893,"y":2386,"width":959,"height":241},
		{"type":"text","text":"```cpp\nint* findValue(int* begin, int* end, int value)\n{\n    for (int* p{ begin }; p != end; ++p)\n    {\n        if (*p == value)\n        {\n            return p;\n        }\n    }\n    return end;\n}\n```","id":"d1bc484c366944c7","x":-5300,"y":-1190,"width":826,"height":313},
		{"type":"text","text":"```cpp\nstd::array<House, 3> houses { // initializer for houses\n    { // extra set of braces to initialize the C-style array member inside the std::array struct\n        { 13, 4, 30 }, // initializer for array element 0\n        { 14, 3, 10 }, // initializer for array element 1\n        { 15, 3, 40 }, // initializer for array element 2\n     }\n};\n```","id":"2ee1fb6901654b64","x":-1343,"y":2680,"width":1104,"height":234}
	],
	"edges":[
		{"id":"44a624eb3fd2cafe","fromNode":"81e1831cd7a99de6","fromSide":"right","toNode":"fb89cf0b162e8ac5","toSide":"left","toEnd":"none"},
		{"id":"10d8864551954166","fromNode":"fb89cf0b162e8ac5","fromSide":"right","toNode":"e1e1a47f5778427b","toSide":"left"},
		{"id":"474af7612760629b","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"64c0772ea3ae4bed","toSide":"left"},
		{"id":"3fa30f0f62ba9fa9","fromNode":"64c0772ea3ae4bed","fromSide":"right","toNode":"eee86afb5ddf48c3","toSide":"left","toEnd":"none"},
		{"id":"af22f91dcf0af13c","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"32a588822e915fb1","toSide":"left"},
		{"id":"907ff225ad104b51","fromNode":"32a588822e915fb1","fromSide":"top","toNode":"84f8d8c95434f033","toSide":"bottom","toEnd":"none","label":"="},
		{"id":"8fc34693866d5875","fromNode":"64c0772ea3ae4bed","fromSide":"bottom","toNode":"84f8d8c95434f033","toSide":"top"},
		{"id":"227b24c97e5c2235","fromNode":"32a588822e915fb1","fromSide":"right","toNode":"5580de097ed0e6ac","toSide":"left","toEnd":"none"},
		{"id":"3ff3738f5af16655","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"491103399f37e99c","toSide":"left"},
		{"id":"093a17c3ec56447c","fromNode":"491103399f37e99c","fromSide":"right","toNode":"f5274ae99be1a2aa","toSide":"left","toEnd":"none"},
		{"id":"266b5fa4ee107639","fromNode":"a074222efc718a7c","fromSide":"right","toNode":"d06e3d4d0d498ddc","toSide":"left","toEnd":"none"},
		{"id":"c0ef180753fd885e","fromNode":"bdad468bedb3e3ad","fromSide":"top","toNode":"491103399f37e99c","toSide":"bottom"},
		{"id":"d76de16375863bc1","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"a074222efc718a7c","toSide":"left"},
		{"id":"a29bc8f26cda9cf0","fromNode":"a074222efc718a7c","fromSide":"top","toNode":"bdad468bedb3e3ad","toSide":"bottom"},
		{"id":"db364946d332f219","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"fbf4bb982690f5b2","toSide":"left"},
		{"id":"ad8329cee0ce0aaf","fromNode":"fbf4bb982690f5b2","fromSide":"right","toNode":"44f37ed77eb7a8bd","toSide":"left","toEnd":"none"},
		{"id":"7f31589feb9f52ff","fromNode":"e1e1a47f5778427b","fromSide":"top","toNode":"956e4b2883a7886c","toSide":"bottom"},
		{"id":"dfb505681990dfa6","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"0061cdb35ef47de2","toSide":"left"},
		{"id":"db7178d6b3faad9c","fromNode":"0061cdb35ef47de2","fromSide":"right","toNode":"d876be9c46478006","toSide":"left","toEnd":"none"},
		{"id":"a2bd06d63284763b","fromNode":"d876be9c46478006","fromSide":"right","toNode":"0ceffb662361213b","toSide":"left"},
		{"id":"579dfe9a022e0710","fromNode":"0061cdb35ef47de2","fromSide":"bottom","toNode":"a79202376f614b04","toSide":"left"},
		{"id":"bfed349a53b7303a","fromNode":"a79202376f614b04","fromSide":"right","toNode":"ad94a10123d5973f","toSide":"left","toEnd":"none"},
		{"id":"adc4427554500f40","fromNode":"ad94a10123d5973f","fromSide":"right","toNode":"1b3ef867bf40fcc2","toSide":"left"},
		{"id":"47966ca35d70d138","fromNode":"0061cdb35ef47de2","fromSide":"bottom","toNode":"abe1ae0b20a87759","toSide":"top"},
		{"id":"50fc1e7045d93301","fromNode":"abe1ae0b20a87759","fromSide":"right","toNode":"1a84bcc9fa22c8e7","toSide":"left","toEnd":"none"},
		{"id":"958ab3fcabc087e2","fromNode":"1a84bcc9fa22c8e7","fromSide":"right","toNode":"198709e2d6754d0d","toSide":"left"},
		{"id":"b4fa2dad3213736f","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"96d5fe10bc3b2343","toSide":"top"},
		{"id":"2b6897b15afe96eb","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"0c9e44a5d4dceef9","toSide":"left"},
		{"id":"2229e8364774ce84","fromNode":"6df514727c0c220d","fromSide":"bottom","toNode":"0c9e44a5d4dceef9","toSide":"top"},
		{"id":"7d2a038ebeeef498","fromNode":"0c9e44a5d4dceef9","fromSide":"right","toNode":"c000c5e0a48e1ba2","toSide":"left","toEnd":"none"},
		{"id":"a3e09fa26f7c1d5c","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"b37566cbb52fea0f","toSide":"right"},
		{"id":"772a33ed6deeac61","fromNode":"b37566cbb52fea0f","fromSide":"left","toNode":"d8539084b78d172b","toSide":"right","toEnd":"none"},
		{"id":"4fb73baa0548148b","fromNode":"0c9e44a5d4dceef9","fromSide":"bottom","toNode":"7d1af6dfa674a42c","toSide":"left"},
		{"id":"2c094991de136582","fromNode":"d8539084b78d172b","fromSide":"left","toNode":"1696c484b5c74e10","toSide":"right"},
		{"id":"2fee9e2d36ffc0fc","fromNode":"d8539084b78d172b","fromSide":"bottom","toNode":"e79cbed063d155f6","toSide":"top"},
		{"id":"dad3250bf817534b","fromNode":"e79cbed063d155f6","fromSide":"bottom","toNode":"fe0985b717711395","toSide":"top"},
		{"id":"e514b88c80776d09","fromNode":"4da43944dccf7c79","fromSide":"right","toNode":"fe0985b717711395","toSide":"top"},
		{"id":"7436dad782ad2ba1","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"ff6677b97a0431d2","toSide":"right"},
		{"id":"849ecbe8c1fe6f89","fromNode":"ff6677b97a0431d2","fromSide":"left","toNode":"b5c7157ed449fd30","toSide":"right","toEnd":"none"},
		{"id":"23f198a6a803874d","fromNode":"b5c7157ed449fd30","fromSide":"left","toNode":"0daf55e04f35177c","toSide":"right"},
		{"id":"2c194fc01f814877","fromNode":"ff6677b97a0431d2","fromSide":"bottom","toNode":"43d1d2528a2fd839","toSide":"right"},
		{"id":"b4303c58a3ae2d9f","fromNode":"43d1d2528a2fd839","fromSide":"left","toNode":"aa72610654a6fb45","toSide":"right","toEnd":"none"},
		{"id":"2e605832c605db31","fromNode":"aa72610654a6fb45","fromSide":"bottom","toNode":"38dc0ab04719c429","toSide":"top"},
		{"id":"ed465f87d148a981","fromNode":"ff6677b97a0431d2","fromSide":"bottom","toNode":"9378f86752760f87","toSide":"right"},
		{"id":"ce6065c602cba5d6","fromNode":"38dc0ab04719c429","fromSide":"bottom","toNode":"c23dde81e3a62473","toSide":"left"},
		{"id":"3afa78d66ca6416f","fromNode":"9378f86752760f87","fromSide":"bottom","toNode":"c23dde81e3a62473","toSide":"top"},
		{"id":"a9d27992d623a907","fromNode":"eaed04721f0fd3a5","fromSide":"right","toNode":"c23dde81e3a62473","toSide":"left"},
		{"id":"975b85324e2be974","fromNode":"81e1831cd7a99de6","fromSide":"left","toNode":"077181a222671db5","toSide":"right"},
		{"id":"23cd0a368b8b3c1b","fromNode":"9452495f756f82c4","fromSide":"left","toNode":"faad4240f1a6a01a","toSide":"right","toEnd":"none"},
		{"id":"60020702b803062a","fromNode":"faad4240f1a6a01a","fromSide":"bottom","toNode":"81eba61d6af3260e","toSide":"top"},
		{"id":"f346b326968ae1e0","fromNode":"81eba61d6af3260e","fromSide":"left","toNode":"2531a30405840232","toSide":"right","toEnd":"none"},
		{"id":"be4688039e100e74","fromNode":"9452495f756f82c4","fromSide":"bottom","toNode":"484bdf5b6bd256c7","toSide":"top","label":"="},
		{"id":"2ab84be0667d13fc","fromNode":"81eba61d6af3260e","fromSide":"right","toNode":"484bdf5b6bd256c7","toSide":"top"},
		{"id":"cab68bdab4380569","fromNode":"484bdf5b6bd256c7","fromSide":"left","toNode":"40d51d5e103cbfca","toSide":"right","toEnd":"none"},
		{"id":"7e8de267738d038f","fromNode":"40d51d5e103cbfca","fromSide":"bottom","toNode":"c0d7901154e33093","toSide":"top"},
		{"id":"1f83da30c510332d","fromNode":"484bdf5b6bd256c7","fromSide":"bottom","toNode":"aee54b877c639ee8","toSide":"top"},
		{"id":"96741e4f70840917","fromNode":"aee54b877c639ee8","fromSide":"bottom","toNode":"ecf5300c07256045","toSide":"top"},
		{"id":"5b39be31e92e555a","fromNode":"ecf5300c07256045","fromSide":"bottom","toNode":"31c187632e83ee6d","toSide":"top"},
		{"id":"8c0e20a1fc08d6bc","fromNode":"31c187632e83ee6d","fromSide":"bottom","toNode":"63ba97abd41b6ef2","toSide":"top"},
		{"id":"49cc17ae8aa6811b","fromNode":"ecf5300c07256045","fromSide":"bottom","toNode":"f0f7b8ed902515f7","toSide":"top"},
		{"id":"a7574cc41346001b","fromNode":"f0f7b8ed902515f7","fromSide":"bottom","toNode":"c439cc92797934ba","toSide":"top","toEnd":"none"},
		{"id":"06b465e18c4f7ed5","fromNode":"c439cc92797934ba","fromSide":"bottom","toNode":"22278ecdafcb1da7","toSide":"top"},
		{"id":"a711793a08536c57","fromNode":"ecf5300c07256045","fromSide":"bottom","toNode":"ab31d54107e1f161","toSide":"top"},
		{"id":"17aea7817a449eb3","fromNode":"aee54b877c639ee8","fromSide":"left","toNode":"4e9f8ebfee2e75a4","toSide":"right"},
		{"id":"ba0002606c8982c4","fromNode":"077181a222671db5","fromSide":"left","toNode":"3f60b4cbc28ec937","toSide":"right"},
		{"id":"0b2cbe977edb4d8c","fromNode":"3f60b4cbc28ec937","fromSide":"left","toNode":"9452495f756f82c4","toSide":"top"},
		{"id":"9ab6cb6c4b9f9b5b","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"51f3edb4180d17e5","toSide":"right"},
		{"id":"693b1f2c83bb6a8f","fromNode":"51f3edb4180d17e5","fromSide":"bottom","toNode":"b3d79ab1da5dd2bb","toSide":"top"},
		{"id":"2469f75db03830c8","fromNode":"b3d79ab1da5dd2bb","fromSide":"left","toNode":"25c8be27473cc17c","toSide":"right","toEnd":"none"},
		{"id":"5fa0a8a20bf9cd1d","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"51f3edb4180d17e5","toSide":"right"},
		{"id":"42fbbcb344e750ec","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"a0b4c2f61476fb8f","toSide":"right"},
		{"id":"1eaae39f86b89e01","fromNode":"a0b4c2f61476fb8f","fromSide":"left","toNode":"158561c10578eb4a","toSide":"right"},
		{"id":"1db752d23f51096d","fromNode":"84c0eb9b38d14306","fromSide":"bottom","toNode":"158561c10578eb4a","toSide":"left"},
		{"id":"4aff5de8f9701d6f","fromNode":"2d8e15f76bc2f304","fromSide":"bottom","toNode":"84c0eb9b38d14306","toSide":"top"},
		{"id":"cc7ffa931ed2db62","fromNode":"d06e3d4d0d498ddc","fromSide":"right","toNode":"0e4f02cae173d66d","toSide":"left"},
		{"id":"1e1e9e80331b4541","fromNode":"0e4f02cae173d66d","fromSide":"right","toNode":"fa1599b33ac6ac34","toSide":"left"},
		{"id":"e690af95fcb1aceb","fromNode":"de7e57db5501733b","fromSide":"bottom","toNode":"2a0a323586e1c022","toSide":"top"},
		{"id":"dd97255228b2b279","fromNode":"2a0a323586e1c022","fromSide":"bottom","toNode":"8f13ced35fd4635d","toSide":"top"},
		{"id":"58a583a86b193678","fromNode":"2a0a323586e1c022","fromSide":"bottom","toNode":"b5d975c3deff3d6d","toSide":"top"},
		{"id":"023056e76ac10166","fromNode":"2a0a323586e1c022","fromSide":"bottom","toNode":"1c8d4d880e7273af","toSide":"top"},
		{"id":"b8e8bfb39cf6bebc","fromNode":"8f13ced35fd4635d","fromSide":"bottom","toNode":"7bcf4c8274eeb35b","toSide":"top","toEnd":"none"},
		{"id":"5d4ae5add83048b0","fromNode":"b5d975c3deff3d6d","fromSide":"bottom","toNode":"8922f9e54ac3474d","toSide":"top","toEnd":"none"},
		{"id":"26077af58ef483c6","fromNode":"7bcf4c8274eeb35b","fromSide":"bottom","toNode":"c4c847bcc1de1b27","toSide":"top"},
		{"id":"1006860d2b50d716","fromNode":"8922f9e54ac3474d","fromSide":"bottom","toNode":"c4c847bcc1de1b27","toSide":"top"},
		{"id":"c6f1815985dee9bd","fromNode":"1c8d4d880e7273af","fromSide":"bottom","toNode":"8500dbad490a1aa3","toSide":"top","toEnd":"none"},
		{"id":"2aec394255db80d0","fromNode":"8500dbad490a1aa3","fromSide":"right","toNode":"5343592b6b860fcc","toSide":"left"},
		{"id":"5ffce2f6f1b98c55","fromNode":"5343592b6b860fcc","fromSide":"right","toNode":"1423ada50382560a","toSide":"left","toEnd":"none"},
		{"id":"4c4e18c4887398fc","fromNode":"8500dbad490a1aa3","fromSide":"right","toNode":"405e051998f1f21f","toSide":"left"},
		{"id":"11ab1efcc09dd932","fromNode":"405e051998f1f21f","fromSide":"right","toNode":"0f9413497a609b3a","toSide":"left","toEnd":"none"},
		{"id":"d84b237603660499","fromNode":"8500dbad490a1aa3","fromSide":"bottom","toNode":"6d519c89d08ebdc2","toSide":"top"},
		{"id":"5ab829d51337a24f","fromNode":"6d519c89d08ebdc2","fromSide":"right","toNode":"4777c3a3bd60009e","toSide":"left","toEnd":"none"},
		{"id":"ac2ae0dc477435b6","fromNode":"6d519c89d08ebdc2","fromSide":"bottom","toNode":"3b7aed44c5ae14aa","toSide":"left"},
		{"id":"ccf77cae88af6aed","fromNode":"3b7aed44c5ae14aa","fromSide":"bottom","toNode":"bc0ebeebca6d470d","toSide":"top"},
		{"id":"52bd511a971ddb26","fromNode":"8500dbad490a1aa3","fromSide":"bottom","toNode":"404f73def8015a60","toSide":"top"},
		{"id":"0688ffd028a9ca3a","fromNode":"404f73def8015a60","fromSide":"bottom","toNode":"d8aad9dc4b8f4f11","toSide":"right"},
		{"id":"f9829ac5eced7f30","fromNode":"d8aad9dc4b8f4f11","fromSide":"bottom","toNode":"fbaabb5bd3dfae3b","toSide":"top"},
		{"id":"114e2f8b76300136","fromNode":"fbaabb5bd3dfae3b","fromSide":"right","toNode":"693e04820382cb04","toSide":"left","toEnd":"none"},
		{"id":"ebc5a4895d8b1ef5","fromNode":"c950e8946b1f809d","fromSide":"right","toNode":"d8aad9dc4b8f4f11","toSide":"left"},
		{"id":"ee07d610d84225d1","fromNode":"4777c3a3bd60009e","fromSide":"right","toNode":"88883b12a2efc3b6","toSide":"left"},
		{"id":"f31be220c1526784","fromNode":"ad6f18df1609e84b","fromSide":"right","toNode":"0ac891e35a4760ee","toSide":"left"},
		{"id":"21ff482e609cdd18","fromNode":"6d519c89d08ebdc2","fromSide":"bottom","toNode":"b7612e8da565bcb8","toSide":"top"},
		{"id":"b2f9382fa8f76204","fromNode":"1c8d4d880e7273af","fromSide":"right","toNode":"ad6f18df1609e84b","toSide":"left"},
		{"id":"c9fd0e307465a94a","fromNode":"b7612e8da565bcb8","fromSide":"bottom","toNode":"138c6626b1276247","toSide":"left"},
		{"id":"b9eb1b6596045532","fromNode":"404f73def8015a60","fromSide":"bottom","toNode":"c295d865305fcae2","toSide":"top"},
		{"id":"1aecad6f3b492da5","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"9b3c40a1fc3806ac","toSide":"left"},
		{"id":"d9705fd82e1064f4","fromNode":"9b3c40a1fc3806ac","fromSide":"right","toNode":"5e82e89946bcd371","toSide":"left","toEnd":"none"},
		{"id":"358983ecf36b092c","fromNode":"5e82e89946bcd371","fromSide":"right","toNode":"87b0bccfe0611880","toSide":"left"},
		{"id":"549d2e5c0ad1bf54","fromNode":"87b0bccfe0611880","fromSide":"right","toNode":"aec1a2c7c2d9f4ca","toSide":"left"},
		{"id":"e55cfa752fa2b87d","fromNode":"bd6ebe43bc6347da","fromSide":"right","toNode":"4af514287097ac24","toSide":"left","toEnd":"none"},
		{"id":"5468a3f62118244d","fromNode":"013ccec25d02f506","fromSide":"left","toNode":"bd6ebe43bc6347da","toSide":"top"},
		{"id":"6f036f584d6e752f","fromNode":"56e173f90111836d","fromSide":"bottom","toNode":"bd6ebe43bc6347da","toSide":"top"},
		{"id":"af08c945bde48191","fromNode":"56e173f90111836d","fromSide":"bottom","toNode":"0faa7942f8e4e6e1","toSide":"top"},
		{"id":"8cb4b71bfecc388d","fromNode":"0faa7942f8e4e6e1","fromSide":"bottom","toNode":"6f43756662c48803","toSide":"top"},
		{"id":"d8eb207c2eacd73e","fromNode":"0faa7942f8e4e6e1","fromSide":"bottom","toNode":"47c685c62e6e2d84","toSide":"top"},
		{"id":"164fa098ab848bf9","fromNode":"47c685c62e6e2d84","fromSide":"bottom","toNode":"f25478ede5067461","toSide":"top"},
		{"id":"e01737ae41c14b41","fromNode":"6f43756662c48803","fromSide":"bottom","toNode":"4b7514136dfcd0c7","toSide":"top"},
		{"id":"a46146da92f58d51","fromNode":"0daf55e04f35177c","fromSide":"bottom","toNode":"aa72610654a6fb45","toSide":"top"},
		{"id":"bbd82da5914d313b","fromNode":"509dbc6edcee6ce5","fromSide":"bottom","toNode":"37610513bedc2af4","toSide":"top"},
		{"id":"e379e660a2b1fe12","fromNode":"37610513bedc2af4","fromSide":"left","toNode":"53e7f89e7ce26f1c","toSide":"right","toEnd":"none"},
		{"id":"7a1e484cedeb633f","fromNode":"53e7f89e7ce26f1c","fromSide":"bottom","toNode":"9f75c3b1193f7f08","toSide":"top"},
		{"id":"1f69c08490e5122f","fromNode":"9f75c3b1193f7f08","fromSide":"left","toNode":"76798ee74fedd60d","toSide":"right"},
		{"id":"5605c21c44d68d2e","fromNode":"9f75c3b1193f7f08","fromSide":"left","toNode":"a8bcea0804ca2ac4","toSide":"right"},
		{"id":"86d908eaf3b109bd","fromNode":"9f75c3b1193f7f08","fromSide":"left","toNode":"fe44d0b10d7115f2","toSide":"right"},
		{"id":"fb14df3162c52944","fromNode":"9f75c3b1193f7f08","fromSide":"left","toNode":"317746f90a3ef4a8","toSide":"right"},
		{"id":"4ed2bfeb5f5355ce","fromNode":"fe0985b717711395","fromSide":"left","toNode":"4b5d042c5a0220b7","toSide":"right"},
		{"id":"d59da6cc85eed8f8","fromNode":"9f75c3b1193f7f08","fromSide":"left","toNode":"3a09ff460280460f","toSide":"right"},
		{"id":"3481b3a569bab42e","fromNode":"3a09ff460280460f","fromSide":"left","toNode":"53c7064ba4fca00d","toSide":"right"},
		{"id":"f2343ab2e788e02e","fromNode":"53c7064ba4fca00d","fromSide":"left","toNode":"88a7fab87f4f26e0","toSide":"right"},
		{"id":"21c9c3392a1a7c47","fromNode":"9f75c3b1193f7f08","fromSide":"bottom","toNode":"2b460ac7d2376647","toSide":"top"},
		{"id":"c26976661f745e39","fromNode":"2b460ac7d2376647","fromSide":"bottom","toNode":"1b65edca40102f93","toSide":"top"},
		{"id":"42268b454d9ef6fc","fromNode":"1b65edca40102f93","fromSide":"bottom","toNode":"2ee1fb6901654b64","toSide":"top"},
		{"id":"28c8d8072d8c0003","fromNode":"b4251afa3440622f","fromSide":"bottom","toNode":"659cecef4dfe2496","toSide":"top"},
		{"id":"fed6d924a864dcbe","fromNode":"659cecef4dfe2496","fromSide":"right","toNode":"9e55ff745b73b7fc","toSide":"left","toEnd":"none"},
		{"id":"c18b3a9b203d37d2","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"b4251afa3440622f","toSide":"left"},
		{"id":"07f7609351b57762","fromNode":"81e1831cd7a99de6","fromSide":"bottom","toNode":"509dbc6edcee6ce5","toSide":"right"},
		{"id":"78d7a1c6c48ff568","fromNode":"9e55ff745b73b7fc","fromSide":"right","toNode":"28fca8d0fd5cc400","toSide":"left"},
		{"id":"4a9915f9b84128e9","fromNode":"659cecef4dfe2496","fromSide":"bottom","toNode":"65ed4f8b19b95591","toSide":"left"},
		{"id":"04c8d42da069a26d","fromNode":"65ed4f8b19b95591","fromSide":"right","toNode":"c0d27f0b84e3d8dc","toSide":"left"},
		{"id":"349aecc40c84bd3c","fromNode":"65ed4f8b19b95591","fromSide":"bottom","toNode":"bf02afca2007ca37","toSide":"left"},
		{"id":"df513b63341b7a36","fromNode":"bf02afca2007ca37","fromSide":"right","toNode":"39f716166e43d2af","toSide":"left"},
		{"id":"cf5ff9786a8fcd01","fromNode":"659cecef4dfe2496","fromSide":"bottom","toNode":"1d0d39db63a418e0","toSide":"left"},
		{"id":"44c5ef992c727f0a","fromNode":"659cecef4dfe2496","fromSide":"bottom","toNode":"626db6f7a67af68d","toSide":"left"},
		{"id":"b7b1631eb067b479","fromNode":"626db6f7a67af68d","fromSide":"right","toNode":"78106dedb88b87d1","toSide":"left"},
		{"id":"d228e27b6d17cb01","fromNode":"78106dedb88b87d1","fromSide":"right","toNode":"20a27be8d76374f6","toSide":"left"},
		{"id":"aee74442bbcf6c3d","fromNode":"659cecef4dfe2496","fromSide":"bottom","toNode":"3ada5135a5023b83","toSide":"left"},
		{"id":"ca469ae212293c23","fromNode":"3ada5135a5023b83","fromSide":"right","toNode":"0a57428cb140efb4","toSide":"left"},
		{"id":"cbaf09b22c048dc4","fromNode":"28fca8d0fd5cc400","fromSide":"right","toNode":"e66ec7dd54f7fdd7","toSide":"left"},
		{"id":"af4303ef45d699f7","fromNode":"aec1a2c7c2d9f4ca","fromSide":"right","toNode":"fd9cb8fe6979cd93","toSide":"left"},
		{"id":"c3b49bff319bcd46","fromNode":"fd9cb8fe6979cd93","fromSide":"right","toNode":"4c4e7f08ae99cbb2","toSide":"left","toEnd":"none"},
		{"id":"a45b9b05ada576f5","fromNode":"fd9cb8fe6979cd93","fromSide":"bottom","toNode":"3c385df262ccc96b","toSide":"left"},
		{"id":"7778f7e739242aa7","fromNode":"b852db3e7a023a72","fromSide":"right","toNode":"0da88e644405b536","toSide":"left"},
		{"id":"d19f850e77596d94","fromNode":"b852db3e7a023a72","fromSide":"right","toNode":"5c7b4dbca8b81145","toSide":"left"},
		{"id":"1fefa6ff4a65f184","fromNode":"0da88e644405b536","fromSide":"right","toNode":"7cf3302341e5d026","toSide":"left"},
		{"id":"aca83c1258519f13","fromNode":"5c7b4dbca8b81145","fromSide":"right","toNode":"7cf3302341e5d026","toSide":"left"},
		{"id":"f72924d6f9609bf1","fromNode":"3c385df262ccc96b","fromSide":"right","toNode":"b852db3e7a023a72","toSide":"left"},
		{"id":"a3f7d33fb862de01","fromNode":"fd9cb8fe6979cd93","fromSide":"bottom","toNode":"043d28071cfdbc2d","toSide":"left"},
		{"id":"412d8f9e1a18d0b2","fromNode":"043d28071cfdbc2d","fromSide":"right","toNode":"34d2477a04841063","toSide":"left","toEnd":"none"},
		{"id":"a1d1b18262e61788","fromNode":"81e1831cd7a99de6","fromSide":"right","toNode":"4b7514136dfcd0c7","toSide":"left"},
		{"id":"d1d3ad83c993d640","fromNode":"8500dbad490a1aa3","fromSide":"bottom","toNode":"81e1831cd7a99de6","toSide":"top"},
		{"id":"ca989fc4d828cb47","fromNode":"de7e57db5501733b","fromSide":"bottom","toNode":"c0e1f9ce9240ea34","toSide":"top"},
		{"id":"85a8d538e429ea8e","fromNode":"d550332e84b513b4","fromSide":"bottom","toNode":"fc1adcd0d9ac5b12","toSide":"top","toEnd":"none"},
		{"id":"a768a012b37e6fc5","fromNode":"237ce178a85e2cc9","fromSide":"bottom","toNode":"e48d1ab15db8ac12","toSide":"top","toEnd":"none"},
		{"id":"c449b918aaf5ea09","fromNode":"c954714b33a9bf05","fromSide":"bottom","toNode":"122a89e6cfbe68c9","toSide":"top"},
		{"id":"8b8c1b22863ece68","fromNode":"fc1adcd0d9ac5b12","fromSide":"bottom","toNode":"a18d08635fb2c863","toSide":"right"},
		{"id":"ce5f03e94d40a0d3","fromNode":"a18d08635fb2c863","fromSide":"left","toNode":"cacef366915f0277","toSide":"right"},
		{"id":"a26543499477b4ae","fromNode":"fc1adcd0d9ac5b12","fromSide":"bottom","toNode":"dcd201f0ea142ad7","toSide":"right"},
		{"id":"3f77311271d77508","fromNode":"c0e1f9ce9240ea34","fromSide":"bottom","toNode":"d5177eb2d1ea0a30","toSide":"top"},
		{"id":"c99b9265670ef520","fromNode":"d5177eb2d1ea0a30","fromSide":"bottom","toNode":"c954714b33a9bf05","toSide":"top"},
		{"id":"ba722950d46575f0","fromNode":"d5177eb2d1ea0a30","fromSide":"bottom","toNode":"237ce178a85e2cc9","toSide":"top"},
		{"id":"310f979bdd6ccab2","fromNode":"d5177eb2d1ea0a30","fromSide":"bottom","toNode":"d550332e84b513b4","toSide":"top"},
		{"id":"b9da8b1b577d647c","fromNode":"dcd201f0ea142ad7","fromSide":"left","toNode":"44e722050ebb633e","toSide":"right"},
		{"id":"520cc7d1c6850bc4","fromNode":"44e722050ebb633e","fromSide":"left","toNode":"cb1e2cca8644b24a","toSide":"right"},
		{"id":"486fc81ab7c5e5f5","fromNode":"fc1adcd0d9ac5b12","fromSide":"bottom","toNode":"f3460b2883eecb68","toSide":"right"},
		{"id":"14d870f7b0a2ed44","fromNode":"fc1adcd0d9ac5b12","fromSide":"bottom","toNode":"997531e1777c3109","toSide":"right"},
		{"id":"e533a229615643dd","fromNode":"997531e1777c3109","fromSide":"left","toNode":"ba53c75bac847f06","toSide":"right"},
		{"id":"c85349e159215210","fromNode":"f3460b2883eecb68","fromSide":"left","toNode":"ba53c75bac847f06","toSide":"right"},
		{"id":"7f0a4258c0137440","fromNode":"e48d1ab15db8ac12","fromSide":"bottom","toNode":"c220c184f782f021","toSide":"top"},
		{"id":"95eb7b49f0f64b81","fromNode":"c220c184f782f021","fromSide":"bottom","toNode":"1ff14f74984d4d5a","toSide":"top"},
		{"id":"b9d8cff10e58c080","fromNode":"122a89e6cfbe68c9","fromSide":"bottom","toNode":"642f3f833c8187ce","toSide":"left"},
		{"id":"a1e689b2802dc607","fromNode":"642f3f833c8187ce","fromSide":"right","toNode":"c17d0d455294718c","toSide":"left","toEnd":"none"},
		{"id":"d3054cb16afb67b4","fromNode":"c17d0d455294718c","fromSide":"bottom","toNode":"5d30eed52f9a6a27","toSide":"top"},
		{"id":"19745297a4808b7c","fromNode":"cacef366915f0277","fromSide":"left","toNode":"d1bc484c366944c7","toSide":"right"},
		{"id":"c39f4bce1ef0d06b","fromNode":"659cecef4dfe2496","fromSide":"bottom","toNode":"974e7307a0fa6768","toSide":"top"},
		{"id":"8293a03fcf12ba8b","fromNode":"974e7307a0fa6768","fromSide":"right","toNode":"c50073b77f0a0ace","toSide":"left"},
		{"id":"dd8958329664cac5","fromNode":"c50073b77f0a0ace","fromSide":"right","toNode":"5fb3250dfbb6da30","toSide":"left","toEnd":"none"}
	]
}