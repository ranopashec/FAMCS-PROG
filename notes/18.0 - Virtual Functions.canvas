{
	"nodes":[
		{"type":"text","text":"is a special type of member function that, when called, resolves to the most-derived version of the function for the actual type of the object being referenced or pointed to.","id":"355fbca329ee8327","x":120,"y":-55,"width":480,"height":100},
		{"type":"text","text":"This capability is known as","id":"118236d949f48edc","x":235,"y":-140,"width":250,"height":60},
		{"type":"text","text":"polymorphism","id":"1b2a6e05ed355330","x":516,"y":-135,"width":165,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\n    virtual std::string_view getName() const { return \"Base\"; }\n```","id":"e8a27ba30679cab7","x":640,"y":-35,"width":656,"height":60},
		{"type":"text","text":"Virtual function resolution only works when a member function is called through a pointer or reference to a class type object.","id":"0b8996d54bfbd4a9","x":715,"y":-151,"width":506,"height":83,"color":"4"},
		{"type":"text","text":"If a function is virtual, all matching overrides in derived classes are implicitly virtual.","id":"f8424090d8bd6dae","x":770,"y":60,"width":396,"height":79,"color":"4"},
		{"type":"text","text":"Never call virtual functions from constructors or destructors.","id":"a22ba93345f556df","x":1221,"y":63,"width":300,"height":76,"color":"1"},
		{"type":"text","text":"You should always make your destructors virtual if you’re dealing with inheritance.","id":"1ad8c6c0316ed330","x":1440,"y":-47,"width":359,"height":84,"color":"1"},
		{"type":"text","text":"virtual function","id":"af2aee1c635a14cc","x":-160,"y":-30,"width":165,"height":50,"color":"3"},
		{"type":"text","text":"(also called static binding) means the compiler (or linker) is able to directly associate the identifier name (such as a function or variable name) with a machine address.","id":"84f927b300c0fd61","x":-1060,"y":-370,"width":491,"height":97},
		{"type":"text","text":"(in virtual functions - **dynamic binding**). Actual function being called is not known by the compiler or linker at the point where the function call is actually being made. Instead, the function to be called has been determined (at runtime) somewhere prior to that point.","id":"abe4628f2bdf8936","x":-1060,"y":-244,"width":491,"height":140},
		{"type":"text","text":"virtual table","id":"c702b21dde435fce","x":-479,"y":-30,"width":140,"height":50,"color":"6"},
		{"type":"text","text":"is a lookup table of functions used to resolve function calls in a dynamic/late binding manner.","id":"50884af2d393ca94","x":-559,"y":33,"width":300,"height":91},
		{"type":"text","text":"Early binding","id":"9ee469bb176dc291","x":-487,"y":-347,"width":155,"height":50,"color":"6"},
		{"type":"text","text":"late binding","id":"f24857ff3831ba1a","x":-487,"y":-200,"width":155,"height":51,"color":"6"},
		{"type":"text","text":"- Any class with one or more pure virtual functions becomes an **abstract base class**, which means that it can not be instantiated!\n- Any derived class must define a body for this function, or that derived class will be considered an abstract base class as well.","id":"7e1b545c3d289a0d","x":-2009,"y":111,"width":593,"height":129,"color":"1"},
		{"type":"text","text":"(or **abstract function**)- kind of virtual function, that has no body at all. Acts as a placeholder that is meant to be redefined by derived classes.\n","id":"50fcf455c58654af","x":-1349,"y":127,"width":491,"height":97},
		{"type":"text","text":"pure virtual function","id":"5ae8b27dc8b53ac6","x":-830,"y":150,"width":209,"height":50,"color":"5"},
		{"type":"text","text":"```cpp \nclass Base\n{\npublic:\n    std::string_view sayHi() const { return \"Hi\"; } // a normal non-virtual function\n    virtual std::string_view getName() const { return \"Base\"; } // a normal virtual function\n    virtual int getValue() const = 0; // a pure virtual function\n    int doSomething() = 0; // Compile error: can not set non-virtual functions to 0\n};","id":"eab4ec26078b72dc","x":-2049,"y":272,"width":880,"height":235},
		{"type":"text","text":"Pure virtual functions with definitions","id":"a0f19e272ad73222","x":-970,"y":292,"width":224,"height":61,"color":"5"},
		{"type":"text","text":"```cpp\nclass A { public:\nvirtual std::string_view speak() const = 0; // The = 0 means this function is pure virtual\n}\nstd::string_view A::speak() const\n{\n    return \"buzz\"; // some default implementation\n}\nclass B : public A\n{ public:\nstd::string_view speak() const override// this class is no longer abstract because we defined this function\n{\nreturn A::speak(); // use A default implementation\n}};\n```","id":"c3b42bf1f586fe10","x":-1128,"y":390,"width":539,"height":382},
		{"type":"text","text":"interface class","id":"b016d7777fe7a72e","x":-702,"y":292,"width":205,"height":50,"color":"6"},
		{"type":"text","text":"is a class that has no member variables, and where all of the functions are pure virtual","id":"f8194c793f999ebe","x":-569,"y":390,"width":405,"height":83},
		{"type":"text","text":"virtual base class","id":"7548ddbc0dc176e2","x":536,"y":351,"width":209,"height":53,"color":"6"},
		{"type":"text","text":"- For the constructor of the most derived class, virtual base classes are always created before non-virtual base classes\n- if a class inherits one or more classes that have virtual parents, the _most_ derived class is responsible for constructing the virtual base class","id":"0dedb9dc40770e1b","x":640,"y":451,"width":636,"height":130},
		{"type":"text","text":"```cpp\nclass PoweredDevice                           {};\nclass Scanner: virtual public PoweredDevice   {};\nclass Printer: virtual public PoweredDevice   {};\nclass Copier : public Scanner, public Printer {};\n```","id":"6614e012c857a709","x":1165,"y":315,"width":498,"height":125},
		{"type":"text","text":"The base object is shared between all objects in the inheritance tree and it is only constructed once","id":"eb1c810fe77b3291","x":802,"y":333,"width":311,"height":88},
		{"type":"text","text":"A derived function is considered a match if it has the same signature (name, parameter types, and whether it is const) and return type as the base version of the function.\n","id":"6cad6ebbe96a1e9c","x":422,"y":203,"width":489,"height":104},
		{"type":"text","text":"`override` specifier after virtual member function check if function call overrides base function","id":"f79b312fda78723e","x":948,"y":212,"width":402,"height":86},
		{"type":"text","text":"overrides","id":"7ec4977ee6227b54","x":599,"y":139,"width":134,"height":50,"color":"6"},
		{"type":"text","text":"upcasting","id":"7aa4903865e994dc","x":44,"y":673,"width":153,"height":53,"color":"6"},
		{"type":"text","text":"downcasting","id":"7159be775639ba0e","x":44,"y":778,"width":153,"height":58,"color":"6"},
		{"type":"text","text":"```cpp\nBase* b{ getObject(true) };\nDerived* d{ dynamic_cast<Derived*>(b) }; // convert Base pointer into Derived pointer\n```","id":"1f3a796a1e290862","x":-319,"y":516,"width":549,"height":113},
		{"type":"text","text":"implicit convertation of a Derived pointer into a Base pointer","id":"0000cc6593047956","x":-276,"y":665,"width":300,"height":69},
		{"type":"text","text":"converting base-class pointers into derived-class pointers","id":"59aeb268902c581a","x":-276,"y":773,"width":300,"height":68},
		{"type":"text","text":"dynamic_cast","id":"9168217298fad7e3","x":274,"y":547,"width":195,"height":50,"color":"6"},
		{"type":"text","text":"object slicing","id":"76c690f8076632ae","x":-39,"y":319,"width":209,"height":50,"color":"6"},
		{"type":"text","text":"Always ensure your dynamic casts actually succeeded by checking for a null pointer result.","id":"7922a98641c83bb0","x":640,"y":617,"width":407,"height":83,"color":"4"},
		{"id":"108f8641a4cdfa68","x":1460,"y":212,"width":339,"height":86,"type":"text","text":"The `final` specifier can be used to prevent overrides of a function or inheritance from a class.\n\n"},
		{"type":"text","text":"assigning of a Derived class object to a Base class object by value","id":"d8edfaa6a9b0906d","x":-88,"y":395,"width":307,"height":78}
	],
	"edges":[
		{"id":"816c27caad53c70b","fromNode":"af2aee1c635a14cc","fromSide":"right","toNode":"355fbca329ee8327","toSide":"left","toEnd":"none","color":"6"},
		{"id":"42193fbf877771b3","fromNode":"355fbca329ee8327","fromSide":"top","toNode":"118236d949f48edc","toSide":"bottom","color":"6"},
		{"id":"2b7284bc3a57e09f","fromNode":"118236d949f48edc","fromSide":"right","toNode":"1b2a6e05ed355330","toSide":"left","toEnd":"none","color":"6"},
		{"id":"049bb5ff31895aed","fromNode":"355fbca329ee8327","fromSide":"bottom","toNode":"7ec4977ee6227b54","toSide":"left","color":"6"},
		{"id":"972558534b8d71c3","fromNode":"7ec4977ee6227b54","fromSide":"bottom","toNode":"6cad6ebbe96a1e9c","toSide":"top","toEnd":"none","color":"6"},
		{"id":"326baf8835eced1a","fromNode":"355fbca329ee8327","fromSide":"right","toNode":"e8a27ba30679cab7","toSide":"left","color":"6"},
		{"id":"167b5271fb33f98b","fromNode":"0b8996d54bfbd4a9","fromSide":"bottom","toNode":"e8a27ba30679cab7","toSide":"top","color":"4"},
		{"id":"9216ad8cc3ec239f","fromNode":"f8424090d8bd6dae","fromSide":"top","toNode":"e8a27ba30679cab7","toSide":"bottom","color":"4"},
		{"id":"ebfc839b226a4bb4","fromNode":"e8a27ba30679cab7","fromSide":"right","toNode":"a22ba93345f556df","toSide":"top","color":"4"},
		{"id":"a007c6826d987d71","fromNode":"e8a27ba30679cab7","fromSide":"right","toNode":"1ad8c6c0316ed330","toSide":"left","color":"4"},
		{"id":"36a9e156214d93d8","fromNode":"9ee469bb176dc291","fromSide":"left","toNode":"84f927b300c0fd61","toSide":"right","toEnd":"none","color":"6"},
		{"id":"46c7e43810472e8d","fromNode":"f24857ff3831ba1a","fromSide":"left","toNode":"abe4628f2bdf8936","toSide":"right","toEnd":"none","color":"6"},
		{"id":"03fa8bdac05be483","fromNode":"9ee469bb176dc291","fromSide":"bottom","toNode":"f24857ff3831ba1a","toSide":"top","fromEnd":"arrow","color":"6"},
		{"id":"79ec3d69d4e53c23","fromNode":"af2aee1c635a14cc","fromSide":"left","toNode":"c702b21dde435fce","toSide":"right","color":"6"},
		{"id":"05e7314bd64096f3","fromNode":"f24857ff3831ba1a","fromSide":"bottom","toNode":"c702b21dde435fce","toSide":"top","color":"5"},
		{"id":"84da6b2ff9e93173","fromNode":"c702b21dde435fce","fromSide":"bottom","toNode":"50884af2d393ca94","toSide":"top","toEnd":"none","color":"6"},
		{"id":"52a91f0ad29f7d9f","fromNode":"af2aee1c635a14cc","fromSide":"bottom","toNode":"5ae8b27dc8b53ac6","toSide":"right","color":"5"},
		{"id":"16484eee90149267","fromNode":"5ae8b27dc8b53ac6","fromSide":"left","toNode":"50fcf455c58654af","toSide":"right","toEnd":"none","color":"6"},
		{"id":"6c4ec2548188d811","fromNode":"50fcf455c58654af","fromSide":"bottom","toNode":"eab4ec26078b72dc","toSide":"right","color":"6"},
		{"id":"90bd846cfe6d1c7a","fromNode":"50fcf455c58654af","fromSide":"left","toNode":"7e1b545c3d289a0d","toSide":"right","color":"1"},
		{"id":"4efb4f9825b1978a","fromNode":"5ae8b27dc8b53ac6","fromSide":"bottom","toNode":"a0f19e272ad73222","toSide":"top","color":"5"},
		{"id":"bc254b22032b4c5d","fromNode":"a0f19e272ad73222","fromSide":"bottom","toNode":"c3b42bf1f586fe10","toSide":"top"},
		{"id":"c5a7e19498f0002c","fromNode":"b016d7777fe7a72e","fromSide":"right","toNode":"f8194c793f999ebe","toSide":"top","toEnd":"none","color":"6"},
		{"id":"3257dc31845247c3","fromNode":"5ae8b27dc8b53ac6","fromSide":"bottom","toNode":"b016d7777fe7a72e","toSide":"top","color":"6"},
		{"id":"bc051b9b2776d0e3","fromNode":"355fbca329ee8327","fromSide":"bottom","toNode":"7548ddbc0dc176e2","toSide":"left","color":"6"},
		{"id":"78554a03e7229165","fromNode":"7548ddbc0dc176e2","fromSide":"right","toNode":"eb1c810fe77b3291","toSide":"left","toEnd":"none","color":"6"},
		{"id":"676861fcb770b6b9","fromNode":"eb1c810fe77b3291","fromSide":"bottom","toNode":"0dedb9dc40770e1b","toSide":"top","toEnd":"none","color":"6"},
		{"id":"1e9ac0ec700d28ee","fromNode":"eb1c810fe77b3291","fromSide":"right","toNode":"6614e012c857a709","toSide":"left","toEnd":"none","color":"6"},
		{"id":"200e3ffcabf75f60","fromNode":"6cad6ebbe96a1e9c","fromSide":"right","toNode":"f79b312fda78723e","toSide":"left","toEnd":"none","color":"6"},
		{"id":"c63293f70eba024a","fromNode":"355fbca329ee8327","fromSide":"bottom","toNode":"76c690f8076632ae","toSide":"right","color":"6"},
		{"id":"0e44e70c9c86c9fc","fromNode":"76c690f8076632ae","fromSide":"bottom","toNode":"d8edfaa6a9b0906d","toSide":"top","toEnd":"none","color":"6"},
		{"id":"d98f40fd93ffaf20","fromNode":"355fbca329ee8327","fromSide":"bottom","toNode":"9168217298fad7e3","toSide":"top","color":"6"},
		{"id":"faa0aa0535ca9444","fromNode":"9168217298fad7e3","fromSide":"bottom","toNode":"7aa4903865e994dc","toSide":"right","color":"6"},
		{"id":"c8459f35b0f15ad1","fromNode":"7aa4903865e994dc","fromSide":"left","toNode":"0000cc6593047956","toSide":"right","toEnd":"none","color":"6"},
		{"id":"6402714c0fc7d871","fromNode":"9168217298fad7e3","fromSide":"bottom","toNode":"7159be775639ba0e","toSide":"right","color":"6"},
		{"id":"d161bedf280054fd","fromNode":"7aa4903865e994dc","fromSide":"bottom","toNode":"7159be775639ba0e","toSide":"top","fromEnd":"arrow","color":"6"},
		{"id":"23de76f76fe1d976","fromNode":"7159be775639ba0e","fromSide":"left","toNode":"59aeb268902c581a","toSide":"right","toEnd":"none","color":"6"},
		{"id":"9f901831f63c6894","fromNode":"9168217298fad7e3","fromSide":"left","toNode":"1f3a796a1e290862","toSide":"right","toEnd":"none","color":"6"},
		{"id":"e320f947aaf02b24","fromNode":"7922a98641c83bb0","fromSide":"left","toNode":"9168217298fad7e3","toSide":"right","color":"4"},
		{"id":"75c5db3074fad172","fromNode":"f79b312fda78723e","fromSide":"right","toNode":"108f8641a4cdfa68","toSide":"left","fromEnd":"arrow","color":"6"}
	]
}