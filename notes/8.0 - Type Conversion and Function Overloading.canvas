{
	"nodes":[
		{"type":"text","text":"conversion","id":"df17ee382c89d664","x":-60,"y":79,"width":160,"height":61,"color":"6"},
		{"type":"text","text":"The process of producing a new value of some type from a value of a different type","id":"d486a9d4c245ea50","x":160,"y":51,"width":296,"height":117},
		{"type":"text","text":"(also called automatic type conversion or coercion)","id":"73609b1962d960f1","x":-980,"y":340,"width":273,"height":101},
		{"type":"text","text":"Implicit type conversion\n","id":"2a5ed475d3826549","x":-667,"y":366,"width":267,"height":50,"color":"6"},
		{"type":"text","text":"is performed automatically by the compiler when one data type is required","id":"c9d4c8152f1638d2","x":-360,"y":342,"width":323,"height":99},
		{"type":"text","text":"explicit type conversion","id":"fe9bd3e8a88278f9","x":456,"y":366,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"type casting operators (casts)","id":"b5d5f727b2c3407a","x":426,"y":480,"width":310,"height":50,"color":"6"},
		{"type":"text","text":"`static cast`","id":"72993770eb7553f7","x":694,"y":720,"width":196,"height":50,"color":"5"},
		{"type":"text","text":"```cpp\nstatic_cast<new_type>(expression)\n```","id":"1455dd95a91bf653","x":581,"y":808,"width":423,"height":50},
		{"type":"text","text":"Avoid using C-style casts","id":"f39541fabd679e49","x":230,"y":808,"width":268,"height":50},
		{"type":"text","text":"`C-style cast`","id":"3636b08a90bdb7d3","x":271,"y":720,"width":185,"height":50,"color":"5"},
		{"type":"text","text":"[4.0 - Fundamental Data Types](notes/studies/programming/c++/4.0%20-%20Fundamental%20Data%20Types.canvas)","id":"77c4bcc5ba98ae45","x":620,"y":-400,"width":346,"height":71,"color":"3"},
		{"type":"text","text":"Type aliases","id":"c04174726498481d","x":498,"y":-70,"width":160,"height":53,"color":"6"},
		{"type":"text","text":"keyword that creates an alias for an existing data type","id":"d971a9321bb57c9e","x":1170,"y":-89,"width":324,"height":90},
		{"type":"text","text":"```cpp\nusing Distance = double; // define Distance as an alias for type double\nDistance milesToDestination{ 3.4 }; // defines a variable of type double\n```","id":"f70be96ca216ec32","x":717,"y":-149,"width":400,"height":211},
		{"type":"text","text":"typedef (old)","id":"1709ead69e7261ab","x":493,"y":194,"width":170,"height":53,"color":"6"},
		{"type":"text","text":"```cpp\ntypedef long Miles;\n// ==\nusing Miles = long;\n```","id":"3c561f41750575b6","x":784,"y":159,"width":267,"height":124},
		{"type":"text","text":"Prefer type aliases over typedefs","id":"4347fa5165c8ab31","x":1171,"y":191,"width":325,"height":60,"color":"4"},
		{"type":"text","text":"Type deduction","id":"e4295e86315c68a6","x":1620,"y":-43,"width":200,"height":50,"color":"6"},
		{"type":"text","text":"the type conversion of certain narrower numeric types (such as a `char`) to certain wider numeric types (typically `int` or `double`) that can be processed efficiently and is less likely to have a result that overflows","id":"897984f59ae0130c","x":-3004,"y":1051,"width":550,"height":157},
		{"type":"text","text":"means that the converted value will always be equal to the source value (it will just have a different type). ","id":"cde89d92ff11c8a2","x":-2943,"y":792,"width":360,"height":131},
		{"type":"text","text":"value-preserving","id":"a129f7af16a16d1e","x":-2858,"y":970,"width":191,"height":54,"color":"6"},
		{"type":"text","text":"floating point promotion","id":"aec272c4d603d86b","x":-2579,"y":1289,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"`float` to `double`","id":"6d9cb3b688be6e63","x":-2566,"y":1391,"width":225,"height":60},
		{"type":"text","text":"“safe conversion”","id":"e0cf3e6719535cc4","x":-2523,"y":828,"width":250,"height":60},
		{"type":"text","text":"Numeric promotions","id":"3a97f7455fa1d51a","x":-2313,"y":964,"width":213,"height":60,"color":"5"},
		{"type":"text","text":"`bool`, `char`, `signed char`, `unsigned char`, `signed short`, and `unsigned short`  get promoted to `int`","id":"7ada3cc694df2d4d","x":-2221,"y":1391,"width":492,"height":89},
		{"type":"text","text":"integral promotions","id":"c05430fbd6a0cf19","x":-2100,"y":1289,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"overloaded function (overload)","id":"4d32d68b56830e99","x":2267,"y":1115,"width":299,"height":50,"color":"6"},
		{"type":"text","text":"allows us to create multiple functions with the same name, so long as each identically named function has different parameter types (or the functions can be otherwise differentiated)","id":"56339cf9b8a7ea81","x":2307,"y":951,"width":913,"height":94},
		{"type":"text","text":"type deduction doesn’t work for function parameters","id":"b284c86f1cf1ad1c","x":2163,"y":450,"width":534,"height":52,"color":"1"},
		{"type":"text","text":"```cpp\nauto someFcn(bool b)\n{\n    if (b)\n        return 5; // return type int\n    else\n        return 6.7; // return type double\n}\n```","id":"b787e3024803b7c9","x":2727,"y":450,"width":533,"height":230},
		{"type":"text","text":"function return type deduction","id":"e42e3c977b91633e","x":2211,"y":539,"width":352,"height":50},
		{"type":"text","text":"```cpp\nauto d{ 5.0 }; // 5.0 is a double literal, so d will be type double\n    auto i{ 1 + 2 }; // 1 + 2 evaluates to an int, so i will be type int\n    auto x { i }; // i is an int, so x will be type int too\n```","id":"041aed7de8254e41","x":2307,"y":162,"width":780,"height":109},
		{"type":"text","text":"```cpp\nconst int x { 5 };  // x has type const int\nauto y { x };       // y will be type int (const is dropped)\nconst auto z { x }; // z will be type const int (const is reapplied)\n```","id":"4f7b1d3a74756ef0","x":2307,"y":301,"width":753,"height":115},
		{"type":"text","text":"To use type deduction, the `auto` keyword is used in place of the variable’s type:","id":"8511b6557eb33191","x":1874,"y":182,"width":386,"height":68},
		{"type":"text","text":"describes what a function or class looks like using one or more placeholder types, that represents some type that is not known at the time the template is written","id":"071b3252fc267ade","x":672,"y":981,"width":458,"height":139},
		{"type":"text","text":"template","id":"45753872a9ecb14b","x":1159,"y":1019,"width":140,"height":63,"color":"6"},
		{"type":"text","text":"[2.0 - functions and files](notes/studies/programming/c++/2.0%20-%20functions%20and%20files.canvas)","id":"77dbccfef9b75cb5","x":1822,"y":720,"width":346,"height":60,"color":"3"},
		{"type":"text","text":"Templates that are needed in multiple files should be defined in a header file, and then '#included' wherever needed. This allows the compiler to see the full template definition and instantiate the template when needed","id":"d1815529d7cc3a22","x":-82,"y":981,"width":663,"height":116,"color":"4"},
		{"type":"text","text":"- Using parenthesis or brace initialization won’t work\n- Default arguments can only be supplied for the rightmost parameters","id":"1f28e8a57869cd45","x":1649,"y":1408,"width":408,"height":148},
		{"type":"text","text":"is a default value provided for a function parameter","id":"ab25fbe85765dd52","x":1711,"y":1140,"width":284,"height":93},
		{"type":"text","text":"```cpp\nvoid print(int x, int y=10) // 10 is the default argument\n{}\n```","id":"5a5fd383d580e62f","x":1663,"y":1273,"width":380,"height":106},
		{"type":"text","text":"```cpp\nmax<>(1, 2);\nmax(1, 2);\n```","id":"93bbb6abc71d10e3","x":1420,"y":817,"width":291,"height":103},
		{"type":"text","text":"generic types","id":"8e67954f1c5cf29c","x":1631,"y":301,"width":179,"height":50,"color":"6"},
		{"type":"text","text":"generic programming","id":"aa7269e79043dd4b","x":1596,"y":380,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"programming with templates","id":"859630650dab6651","x":1585,"y":450,"width":271,"height":70},
		{"type":"text","text":"lets us focus on the logic of algorithms and design of data structures without having to worry so much about type information","id":"c8ce511fd25a3e72","x":1507,"y":539,"width":428,"height":114},
		{"type":"text","text":"```cpp\ntemplate <typename T> // this is the template parameter declaration\nT max(T x, T y) // this is the function template definition for max<T>\n{\n    return (x < y) ? y : x;\n}\n```","id":"c8bc9a690eddef8b","x":376,"y":1510,"width":525,"height":220},
		{"type":"text","text":"```cpp\ntemplate <typename T, typename U> // We're using two template type parameters named T and U\nT max(T x, U y) // x can resolve to type T, and y can resolve to type U\n```","id":"b4a8a5651156bf2a","x":58,"y":1766,"width":843,"height":148},
		{"type":"text","text":"Usage","id":"04c686c129bea122","x":978,"y":1979,"width":113,"height":50},
		{"type":"text","text":"When this process happens due to a function call","id":"c6f22387c498ed4e","x":526,"y":2227,"width":317,"height":84},
		{"type":"text","text":"implicit instantiation","id":"3e1330a5a239023f","x":913,"y":2244,"width":244,"height":50,"color":"6"},
		{"type":"text","text":"abbreviated function template 'C++20'","id":"31bd0822ca36f68a","x":1120,"y":1451,"width":404,"height":59,"color":"6"},
		{"type":"text","text":"```cpp\nauto foo(auto x, auto y) {}\n```","id":"f64c2536646821fe","x":1096,"y":1556,"width":453,"height":64},
		{"type":"text","text":"```cpp\ntemplate <typename T, typename U>\nauto foo(T x, U y) {}\n```","id":"b379d39190a0d05a","x":1071,"y":1680,"width":504,"height":100},
		{"type":"text","text":"template argument","id":"71a9911226c22566","x":30,"y":1969,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"happens when the programmer uses a type cast to explicitly convert a value from one type to another type.","id":"f41a4052b45616cd","x":745,"y":331,"width":426,"height":121},
		{"type":"text","text":"`int` to `other int` excluding integral promotions","id":"f6b2bb922573e1fc","x":-768,"y":2311,"width":401,"height":80},
		{"type":"text","text":"`Floating point` to `other floating point type` (excluding floating point promotions)","id":"862bf33914705387","x":-713,"y":2131,"width":346,"height":118},
		{"type":"text","text":"`floating point` to  `int`","id":"0a7b6ba09d362e2f","x":-657,"y":2031,"width":325,"height":50},
		{"type":"text","text":"`int` or `floating point` to `bool`","id":"cbfb64185d732767","x":-630,"y":1886,"width":357,"height":55},
		{"type":"text","text":"`Int` to `floating point`","id":"3883c118de38b821","x":-609,"y":1781,"width":336,"height":50},
		{"type":"text","text":"Numeric conversions","id":"3129c38490ba4870","x":-859,"y":1246,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"If you need to perform a narrowing conversion, use `static_cast` to convert it into an explicit conversion.","id":"ddb8e7bf8030fd34","x":-1664,"y":1978,"width":491,"height":81},
		{"type":"text","text":"potentially unsafe numeric conversion where the destination type may not be able to hold all the values of the source type.","id":"7b8c279f4bddaa61","x":-1604,"y":1841,"width":431,"height":105},
		{"type":"text","text":"Brace initialization disallows narrowing conversions","id":"371d3ab218acc29d","x":-1565,"y":2112,"width":293,"height":78},
		{"type":"text","text":"Floating point types are ranked in this order (greater to lesser)\n- Long double\n- Double\n- Float","id":"ba73ea12bb09de65","x":-1173,"y":2200,"width":308,"height":227},
		{"type":"text","text":"Narrowing conversions","id":"53b0c1f78c4596d9","x":-1144,"y":1863,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"The usual arithmetic conversion rules","id":"d5b6304dace1cd49","x":-2190,"y":1572,"width":408,"height":67},
		{"type":"text","text":"- If the type of at least one of the operands is on the priority list, the operand with lower priority is converted to the type of the operand with higher priority.\n- Otherwise (the type of neither operand is on the list), both operands are numerically promoted","id":"1e84efa124715ca5","x":-2367,"y":1686,"width":762,"height":133},
		{"type":"text","text":"- long double (highest)\n- double\n- float\n- unsigned long long\n- long long\n- unsigned long\n- long\n- unsigned int\n- int (lowest)","id":"efddf2c925469a9f","x":-2667,"y":1565,"width":255,"height":376},
		{"type":"text","text":"Arithmetic conversions","id":"f17f33f050eacf24","x":-1730,"y":1254,"width":250,"height":57,"color":"5"},
		{"type":"text","text":"The operators that require operands of the same type:\n-  +, -, *, /, %\n- <, >, <=, >=, == , !=\n-  &, ^, |\n- The conditional operator ?: (excluding the condition, which is expected to be of type `bool`)","id":"79e25fb6b4808bd5","x":-1554,"y":1408,"width":599,"height":239},
		{"type":"text","text":"“unsafe conversion”","id":"33f70a508628f0af","x":-1187,"y":1246,"width":232,"height":60},
		{"type":"text","text":"Conversion rules, defined by C++ language standard, about how different fundamental types (and in some cases, compound types) can be converted to other types","id":"2a23e71fd005cb6b","x":-1321,"y":490,"width":427,"height":131},
		{"type":"text","text":"standard conversions","id":"ce11f08907641def","x":-847,"y":530,"width":251,"height":50,"color":"6"},
		{"type":"text","text":"overload resolution","id":"399372f2ceb708cd","x":2267,"y":1241,"width":220,"height":50,"color":"6"},
		{"type":"text","text":"trivial conversions","id":"8798883a599721db","x":2267,"y":1379,"width":199,"height":50,"color":"6"},
		{"type":"text","text":"ambiguous match","id":"0994416372455c35","x":2267,"y":1506,"width":198,"height":50,"color":"6"},
		{"type":"text","text":"set of specific conversion rules that will modify types (without modifying the value) for purposes of finding a match","id":"c2427a2a49320b2d","x":2547,"y":1353,"width":673,"height":103},
		{"type":"text","text":"when a function call is made to a function that has been overloaded, the compiler will try to match the function call to the appropriate overload based on the arguments used in the function call.","id":"a4d2e4f58609ad84","x":2547,"y":1206,"width":675,"height":121},
		{"type":"text","text":"occurs when the compiler finds two or more functions that can be made to match in the same step","id":"77c63bb55906fe4f","x":2547,"y":1494,"width":673,"height":74},
		{"type":"text","text":"Each function sharing a name (in the same scope)","id":"889d14f7fbac295b","x":2626,"y":1115,"width":594,"height":50},
		{"type":"text","text":"Other conversions","id":"c968ba2820c6e19f","x":-596,"y":808,"width":200,"height":60,"color":"5"},
		{"type":"text","text":"using","id":"19e1da5f604ae091","x":1229,"y":80,"width":209,"height":60,"color":"6"},
		{"type":"text","text":"Function overloading","id":"ca48dbd0b593eaf6","x":1995,"y":959,"width":235,"height":78,"color":"6"},
		{"type":"text","text":"Type deduction drops const qualifiers","id":"acb433b66c7e0712","x":1878,"y":321,"width":379,"height":76},
		{"type":"text","text":"feature that allows the compiler to deduce the type of an object from the object’s initializer","id":"c8916eb76f6bd311","x":2211,"y":-58,"width":420,"height":80},
		{"type":"text","text":"type inference","id":"0dbb2ed2c87677ab","x":1982,"y":-51,"width":200,"height":66},
		{"type":"text","text":"Type deduction drops references","id":"ad132ef923dc9f2e","x":2163,"y":80,"width":454,"height":50},
		{"type":"text","text":"function template","id":"144856cc5e1802cb","x":904,"y":1175,"width":255,"height":58,"color":"6"},
		{"type":"text","text":"is a function-like definition that is used to generate one or more overloaded functions, each with a different set of actual types","id":"e5362482ca8d896a","x":401,"y":1140,"width":476,"height":124},
		{"type":"text","text":"3 different types of template parameters (placeholders):\n- Type template parameters (represents a type).\n- Non-type template parameters (represents a constexpr value).\n- Template template parameters (represents a template).","id":"346a9de39e5f7fe9","x":360,"y":1280,"width":600,"height":215},
		{"type":"text","text":"template parameter declaration","id":"6c65eb543ecb5c4f","x":0,"y":1587,"width":315,"height":66,"color":"6"},
		{"type":"text","text":"**non-type template parameter**","id":"5c1ee9150c77e4e5","x":-5,"y":2277,"width":325,"height":83,"color":"6"},
		{"type":"text","text":"is a template parameter with a fixed type that serves as a placeholder for a constexpr value passed in as a template argument","id":"d5cb621dca41ba5c","x":-65,"y":2400,"width":446,"height":120},
		{"type":"text","text":"- An integral type\n- An enumeration type\n- `std::nullptr_t`\n- A floating point type (since C++20)\n- A pointer or reference to an object\n- A pointer or reference to a function\n- A pointer or reference to a member function\n- A literal class type (since C++20)","id":"c6260d14a935cc4c","x":-63,"y":2540,"width":443,"height":340},
		{"type":"text","text":"```cpp\ntemplate <int N> // declare a non-type template parameter of type int named N\nvoid print(){}\n```","id":"577af9eb8b83b81c","x":400,"y":2378,"width":473,"height":164},
		{"type":"text","text":"function template instantiation","id":"5a381c327ff8c38c","x":881,"y":2112,"width":308,"height":64,"color":"6"},
		{"type":"text","text":"foo<actual_type>(arg1, arg2); // actual_type is some actual type, like int or double","id":"0aa75f20627251d3","x":490,"y":1944,"width":426,"height":120},
		{"type":"text","text":"The process of creating functions (with specific types) from function templates (with template types)","id":"cdf171833c9171ba","x":476,"y":2087,"width":397,"height":114},
		{"type":"text","text":"An instantiated function","id":"c555d4cf99d5b98a","x":175,"y":2212,"width":266,"height":57},
		{"type":"text","text":"**function instance** (instance for short) or a template function","id":"5759fc781d7a96d5","x":155,"y":2093,"width":306,"height":101,"color":"6"},
		{"type":"text","text":"template argument deduction","id":"9a50b81be3ceb9b3","x":1080,"y":828,"width":298,"height":78,"color":"6"},
		{"type":"text","text":"default argument","id":"2bfd0667f27083f0","x":1730,"y":1045,"width":247,"height":54,"color":"6"}
	],
	"edges":[
		{"id":"5cfb3bcd67e90fd9","fromNode":"df17ee382c89d664","fromSide":"right","toNode":"d486a9d4c245ea50","toSide":"left","toEnd":"none"},
		{"id":"a8010737a84bc2f0","fromNode":"df17ee382c89d664","fromSide":"bottom","toNode":"2a5ed475d3826549","toSide":"top"},
		{"id":"9f313032f638a7d3","fromNode":"73609b1962d960f1","fromSide":"right","toNode":"2a5ed475d3826549","toSide":"left","toEnd":"none"},
		{"id":"ff720363e7a6630f","fromNode":"2a5ed475d3826549","fromSide":"right","toNode":"c9d4c8152f1638d2","toSide":"left","toEnd":"none"},
		{"id":"90c4945b669ae3fb","fromNode":"ce11f08907641def","fromSide":"left","toNode":"2a23e71fd005cb6b","toSide":"right","toEnd":"none"},
		{"id":"c80ee0a6366d0f3e","fromNode":"2a5ed475d3826549","fromSide":"bottom","toNode":"ce11f08907641def","toSide":"right"},
		{"id":"c7930509773185e9","fromNode":"ce11f08907641def","fromSide":"bottom","toNode":"3a97f7455fa1d51a","toSide":"right"},
		{"id":"59207bf50622a7a1","fromNode":"ce11f08907641def","fromSide":"bottom","toNode":"3129c38490ba4870","toSide":"top"},
		{"id":"46ebd4010fbf06e2","fromNode":"ce11f08907641def","fromSide":"bottom","toNode":"f17f33f050eacf24","toSide":"top"},
		{"id":"0622aa042d4bf26c","fromNode":"ce11f08907641def","fromSide":"bottom","toNode":"c968ba2820c6e19f","toSide":"top"},
		{"id":"3026fcce9c13a479","fromNode":"3a97f7455fa1d51a","fromSide":"left","toNode":"897984f59ae0130c","toSide":"right","toEnd":"none"},
		{"id":"7e9dc2c19c822313","fromNode":"3a97f7455fa1d51a","fromSide":"left","toNode":"a129f7af16a16d1e","toSide":"right"},
		{"id":"84bcb885619f67bc","fromNode":"a129f7af16a16d1e","fromSide":"top","toNode":"cde89d92ff11c8a2","toSide":"bottom"},
		{"id":"b0129022a18da1df","fromNode":"cde89d92ff11c8a2","fromSide":"right","toNode":"e0cf3e6719535cc4","toSide":"left"},
		{"id":"87bc2c96eedd0acc","fromNode":"e0cf3e6719535cc4","fromSide":"right","toNode":"3a97f7455fa1d51a","toSide":"top"},
		{"id":"d2349dfe89198712","fromNode":"3a97f7455fa1d51a","fromSide":"bottom","toNode":"c05430fbd6a0cf19","toSide":"top"},
		{"id":"b75031dd3a1a4940","fromNode":"3a97f7455fa1d51a","fromSide":"bottom","toNode":"aec272c4d603d86b","toSide":"top"},
		{"id":"5cf7b11818c0baff","fromNode":"aec272c4d603d86b","fromSide":"bottom","toNode":"6d9cb3b688be6e63","toSide":"top","toEnd":"none"},
		{"id":"ffb1ccde240c9454","fromNode":"c05430fbd6a0cf19","fromSide":"bottom","toNode":"7ada3cc694df2d4d","toSide":"top"},
		{"id":"20c3dd5c90150f6a","fromNode":"3129c38490ba4870","fromSide":"bottom","toNode":"f6b2bb922573e1fc","toSide":"left"},
		{"id":"c0a29cc27757191a","fromNode":"3129c38490ba4870","fromSide":"bottom","toNode":"862bf33914705387","toSide":"left"},
		{"id":"b922f364bbbb6575","fromNode":"3129c38490ba4870","fromSide":"bottom","toNode":"0a7b6ba09d362e2f","toSide":"left"},
		{"id":"fc4c1ee879a3b905","fromNode":"3129c38490ba4870","fromSide":"bottom","toNode":"3883c118de38b821","toSide":"left"},
		{"id":"123d10d9ac7059bc","fromNode":"3129c38490ba4870","fromSide":"bottom","toNode":"cbfb64185d732767","toSide":"left"},
		{"id":"278762c0816fd93f","fromNode":"33f70a508628f0af","fromSide":"right","toNode":"3129c38490ba4870","toSide":"left"},
		{"id":"a5638af33a94d04b","fromNode":"3129c38490ba4870","fromSide":"bottom","toNode":"53b0c1f78c4596d9","toSide":"top"},
		{"id":"090d13de54379904","fromNode":"53b0c1f78c4596d9","fromSide":"left","toNode":"7b8c279f4bddaa61","toSide":"right","toEnd":"none"},
		{"id":"e420735fa78a41bd","fromNode":"ddb8e7bf8030fd34","fromSide":"right","toNode":"53b0c1f78c4596d9","toSide":"bottom"},
		{"id":"674a2a878071a89e","fromNode":"371d3ab218acc29d","fromSide":"right","toNode":"53b0c1f78c4596d9","toSide":"bottom"},
		{"id":"183a2c29bcce3595","fromNode":"ddb8e7bf8030fd34","fromSide":"bottom","toNode":"371d3ab218acc29d","toSide":"top"},
		{"id":"5a7718d65efba743","fromNode":"53b0c1f78c4596d9","fromSide":"bottom","toNode":"ba73ea12bb09de65","toSide":"top"},
		{"id":"86a6c7627aa1582a","fromNode":"f17f33f050eacf24","fromSide":"right","toNode":"79e25fb6b4808bd5","toSide":"top"},
		{"id":"40b5fd6bb652d6f9","fromNode":"f17f33f050eacf24","fromSide":"bottom","toNode":"d5b6304dace1cd49","toSide":"right"},
		{"id":"27c60694cccd0db8","fromNode":"d5b6304dace1cd49","fromSide":"bottom","toNode":"1e84efa124715ca5","toSide":"top"},
		{"id":"3f6a5f970b93beec","fromNode":"1e84efa124715ca5","fromSide":"left","toNode":"efddf2c925469a9f","toSide":"right"},
		{"id":"5d71384761d327fb","fromNode":"df17ee382c89d664","fromSide":"bottom","toNode":"fe9bd3e8a88278f9","toSide":"top"},
		{"id":"3910b26786a5d036","fromNode":"fe9bd3e8a88278f9","fromSide":"bottom","toNode":"b5d5f727b2c3407a","toSide":"top"},
		{"id":"e9717c585ab25dd9","fromNode":"b5d5f727b2c3407a","fromSide":"bottom","toNode":"3636b08a90bdb7d3","toSide":"top"},
		{"id":"72664d9cad0226d8","fromNode":"b5d5f727b2c3407a","fromSide":"bottom","toNode":"72993770eb7553f7","toSide":"top"},
		{"id":"f6fdb8ef050159ec","fromNode":"3636b08a90bdb7d3","fromSide":"bottom","toNode":"f39541fabd679e49","toSide":"top"},
		{"id":"01a243baa279fc81","fromNode":"72993770eb7553f7","fromSide":"bottom","toNode":"1455dd95a91bf653","toSide":"top"},
		{"id":"2867b5f3585c51db","fromNode":"fe9bd3e8a88278f9","fromSide":"right","toNode":"f41a4052b45616cd","toSide":"left","toEnd":"none"},
		{"id":"95305902d2a9a992","fromNode":"77c4bcc5ba98ae45","fromSide":"bottom","toNode":"df17ee382c89d664","toSide":"top"},
		{"id":"a9317c64a6a7a88d","fromNode":"77c4bcc5ba98ae45","fromSide":"bottom","toNode":"c04174726498481d","toSide":"top"},
		{"id":"895deda186da0f0d","fromNode":"c04174726498481d","fromSide":"bottom","toNode":"19e1da5f604ae091","toSide":"left"},
		{"id":"d347cead075d03c6","fromNode":"19e1da5f604ae091","fromSide":"top","toNode":"d971a9321bb57c9e","toSide":"bottom","toEnd":"none"},
		{"id":"848160b4da663432","fromNode":"d971a9321bb57c9e","fromSide":"left","toNode":"f70be96ca216ec32","toSide":"right"},
		{"id":"edaf241256f01709","fromNode":"c04174726498481d","fromSide":"bottom","toNode":"1709ead69e7261ab","toSide":"top"},
		{"id":"402f92c086215a8d","fromNode":"1709ead69e7261ab","fromSide":"right","toNode":"3c561f41750575b6","toSide":"left","toEnd":"none"},
		{"id":"6cb2c8ef6f7448ef","fromNode":"3c561f41750575b6","fromSide":"right","toNode":"4347fa5165c8ab31","toSide":"left"},
		{"id":"bfd1e76d287191c8","fromNode":"4347fa5165c8ab31","fromSide":"top","toNode":"19e1da5f604ae091","toSide":"bottom"},
		{"id":"7d774b62ebb283f9","fromNode":"77c4bcc5ba98ae45","fromSide":"bottom","toNode":"e4295e86315c68a6","toSide":"top"},
		{"id":"8c358b33c5475775","fromNode":"e4295e86315c68a6","fromSide":"right","toNode":"0dbb2ed2c87677ab","toSide":"left","toEnd":"none"},
		{"id":"c67ccf9e331839d4","fromNode":"0dbb2ed2c87677ab","fromSide":"right","toNode":"c8916eb76f6bd311","toSide":"left","toEnd":"none"},
		{"id":"cc9477f9478e7a47","fromNode":"8511b6557eb33191","fromSide":"right","toNode":"041aed7de8254e41","toSide":"left"},
		{"id":"c396dcaa2b59d14c","fromNode":"8511b6557eb33191","fromSide":"bottom","toNode":"acb433b66c7e0712","toSide":"top"},
		{"id":"d450fa80e70d20f1","fromNode":"acb433b66c7e0712","fromSide":"right","toNode":"4f7b1d3a74756ef0","toSide":"left"},
		{"id":"a13ffcdd6ca1d9b1","fromNode":"acb433b66c7e0712","fromSide":"bottom","toNode":"b284c86f1cf1ad1c","toSide":"left"},
		{"id":"ac50d97cf88297b7","fromNode":"acb433b66c7e0712","fromSide":"bottom","toNode":"e42e3c977b91633e","toSide":"left"},
		{"id":"46e39cde511b1180","fromNode":"e42e3c977b91633e","fromSide":"right","toNode":"b787e3024803b7c9","toSide":"left"},
		{"id":"65be038bdede400d","fromNode":"77dbccfef9b75cb5","fromSide":"top","toNode":"e42e3c977b91633e","toSide":"left"},
		{"id":"d9b7f6b30865caa7","fromNode":"77dbccfef9b75cb5","fromSide":"bottom","toNode":"ca48dbd0b593eaf6","toSide":"top"},
		{"id":"84553a2c6e93afd2","fromNode":"ca48dbd0b593eaf6","fromSide":"right","toNode":"56339cf9b8a7ea81","toSide":"left","toEnd":"none"},
		{"id":"12e2255023709a9f","fromNode":"ca48dbd0b593eaf6","fromSide":"bottom","toNode":"4d32d68b56830e99","toSide":"left"},
		{"id":"3898c36acc1dc106","fromNode":"4d32d68b56830e99","fromSide":"right","toNode":"889d14f7fbac295b","toSide":"left","toEnd":"none"},
		{"id":"521aedf9e617b8f0","fromNode":"ca48dbd0b593eaf6","fromSide":"bottom","toNode":"399372f2ceb708cd","toSide":"left"},
		{"id":"5031f55b9693cd39","fromNode":"399372f2ceb708cd","fromSide":"right","toNode":"a4d2e4f58609ad84","toSide":"left","toEnd":"none"},
		{"id":"4bf718fa1f223312","fromNode":"ca48dbd0b593eaf6","fromSide":"bottom","toNode":"8798883a599721db","toSide":"left"},
		{"id":"06dd401f2e140846","fromNode":"8798883a599721db","fromSide":"right","toNode":"c2427a2a49320b2d","toSide":"left","toEnd":"none"},
		{"id":"eb03db36e4ee3475","fromNode":"ca48dbd0b593eaf6","fromSide":"bottom","toNode":"0994416372455c35","toSide":"left"},
		{"id":"4927d33d3ca5a54a","fromNode":"0994416372455c35","fromSide":"right","toNode":"77c63bb55906fe4f","toSide":"left","toEnd":"none"},
		{"id":"00f34d1d20619615","fromNode":"77dbccfef9b75cb5","fromSide":"bottom","toNode":"2bfd0667f27083f0","toSide":"top"},
		{"id":"9996dbcfce72d98c","fromNode":"2bfd0667f27083f0","fromSide":"bottom","toNode":"ab25fbe85765dd52","toSide":"top","toEnd":"none"},
		{"id":"35ce7b6bec3e9264","fromNode":"ab25fbe85765dd52","fromSide":"bottom","toNode":"5a5fd383d580e62f","toSide":"top"},
		{"id":"6b558ffc2bb5e779","fromNode":"1f28e8a57869cd45","fromSide":"top","toNode":"5a5fd383d580e62f","toSide":"bottom"},
		{"id":"53b5a521be7a334e","fromNode":"77dbccfef9b75cb5","fromSide":"bottom","toNode":"45753872a9ecb14b","toSide":"right"},
		{"id":"5f918d87cf24a80a","fromNode":"45753872a9ecb14b","fromSide":"left","toNode":"071b3252fc267ade","toSide":"right","toEnd":"none"},
		{"id":"9c71b10f2a0a32fe","fromNode":"45753872a9ecb14b","fromSide":"bottom","toNode":"144856cc5e1802cb","toSide":"right"},
		{"id":"95c62462a5172366","fromNode":"144856cc5e1802cb","fromSide":"left","toNode":"e5362482ca8d896a","toSide":"right","toEnd":"none"},
		{"id":"f6e478f6d72069db","fromNode":"346a9de39e5f7fe9","fromSide":"left","toNode":"6c65eb543ecb5c4f","toSide":"top"},
		{"id":"3b1c279c54e3582e","fromNode":"6c65eb543ecb5c4f","fromSide":"right","toNode":"c8bc9a690eddef8b","toSide":"left"},
		{"id":"93a67516014225f8","fromNode":"144856cc5e1802cb","fromSide":"bottom","toNode":"346a9de39e5f7fe9","toSide":"right"},
		{"id":"1591035e9834cb09","fromNode":"144856cc5e1802cb","fromSide":"bottom","toNode":"04c686c129bea122","toSide":"top"},
		{"id":"d4b76ce734a48f69","fromNode":"04c686c129bea122","fromSide":"left","toNode":"0aa75f20627251d3","toSide":"right"},
		{"id":"022a5c106b96182a","fromNode":"0aa75f20627251d3","fromSide":"left","toNode":"71a9911226c22566","toSide":"right","label":"actual_type"},
		{"id":"a1163dda8c706561","fromNode":"04c686c129bea122","fromSide":"bottom","toNode":"5a381c327ff8c38c","toSide":"top"},
		{"id":"f4269ee8ec6b9d41","fromNode":"5a381c327ff8c38c","fromSide":"left","toNode":"cdf171833c9171ba","toSide":"right","toEnd":"none"},
		{"id":"6a3f746f2af953c9","fromNode":"5a381c327ff8c38c","fromSide":"bottom","toNode":"3e1330a5a239023f","toSide":"top"},
		{"id":"04d68833bb69f75e","fromNode":"c6f22387c498ed4e","fromSide":"right","toNode":"3e1330a5a239023f","toSide":"left","toEnd":"none"},
		{"id":"a223abb287556502","fromNode":"cdf171833c9171ba","fromSide":"left","toNode":"5759fc781d7a96d5","toSide":"right"},
		{"id":"5b11d448cd61df94","fromNode":"5759fc781d7a96d5","fromSide":"bottom","toNode":"c555d4cf99d5b98a","toSide":"top","toEnd":"none"},
		{"id":"bccfa246c9fb73aa","fromNode":"e4295e86315c68a6","fromSide":"bottom","toNode":"9a50b81be3ceb9b3","toSide":"top"},
		{"id":"26657a82477c13bd","fromNode":"45753872a9ecb14b","fromSide":"top","toNode":"9a50b81be3ceb9b3","toSide":"bottom"},
		{"id":"bd616a8ab9ad77d8","fromNode":"9a50b81be3ceb9b3","fromSide":"right","toNode":"93bbb6abc71d10e3","toSide":"left"},
		{"id":"2d9c6ce7a20c75bf","fromNode":"d1815529d7cc3a22","fromSide":"bottom","toNode":"e5362482ca8d896a","toSide":"left"},
		{"id":"041d1fcc1aa68a27","fromNode":"e4295e86315c68a6","fromSide":"bottom","toNode":"8e67954f1c5cf29c","toSide":"top"},
		{"id":"8d8251d379f058a9","fromNode":"8e67954f1c5cf29c","fromSide":"bottom","toNode":"aa7269e79043dd4b","toSide":"top"},
		{"id":"8cb6400f0915ba9c","fromNode":"aa7269e79043dd4b","fromSide":"bottom","toNode":"859630650dab6651","toSide":"top","toEnd":"none"},
		{"id":"ec1cad5cd78a7752","fromNode":"859630650dab6651","fromSide":"bottom","toNode":"c8ce511fd25a3e72","toSide":"top"},
		{"id":"3764a1cc3749a0b9","fromNode":"c8bc9a690eddef8b","fromSide":"right","toNode":"b4a8a5651156bf2a","toSide":"right"},
		{"id":"7a24f86a086e7629","fromNode":"144856cc5e1802cb","fromSide":"bottom","toNode":"31bd0822ca36f68a","toSide":"top"},
		{"id":"45287ec7ae04070a","fromNode":"31bd0822ca36f68a","fromSide":"bottom","toNode":"f64c2536646821fe","toSide":"top"},
		{"id":"d9065ca7b61d919a","fromNode":"f64c2536646821fe","fromSide":"bottom","toNode":"b379d39190a0d05a","toSide":"top","label":"="},
		{"id":"97a1ebd29c22cdca","fromNode":"71a9911226c22566","fromSide":"bottom","toNode":"5c1ee9150c77e4e5","toSide":"top"},
		{"id":"ee05ea70acb36370","fromNode":"5c1ee9150c77e4e5","fromSide":"bottom","toNode":"d5cb621dca41ba5c","toSide":"top","toEnd":"none"},
		{"id":"9462f4d94f4d39fb","fromNode":"6c65eb543ecb5c4f","fromSide":"left","toNode":"5c1ee9150c77e4e5","toSide":"left"},
		{"id":"80b8dcafd0d89a4a","fromNode":"d5cb621dca41ba5c","fromSide":"bottom","toNode":"c6260d14a935cc4c","toSide":"top"},
		{"id":"3cb5281bfa798846","fromNode":"d5cb621dca41ba5c","fromSide":"right","toNode":"577af9eb8b83b81c","toSide":"left"},
		{"id":"9d83b09a3dbc5182","fromNode":"3129c38490ba4870","fromSide":"right","toNode":"fe9bd3e8a88278f9","toSide":"left"},
		{"id":"b8e6d727e524ee08","fromNode":"e4295e86315c68a6","fromSide":"bottom","toNode":"8511b6557eb33191","toSide":"top"},
		{"id":"f0115541d7affd06","fromNode":"e4295e86315c68a6","fromSide":"right","toNode":"ad132ef923dc9f2e","toSide":"left"}
	]
}