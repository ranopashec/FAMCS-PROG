{
	"nodes":[
		{"type":"group","id":"7434fa55574fd111","x":-280,"y":520,"width":879,"height":440,"color":"5","label":"Associative Containers"},
		{"type":"group","id":"cb592695a107521b","x":267,"y":1080,"width":943,"height":406,"color":"5","label":"Container Adapters"},
		{"type":"group","id":"46b62c1e02ce1ff2","x":1000,"y":520,"width":686,"height":437,"color":"5","label":"Sequence containers"},
		{"type":"text","text":"STL library","id":"4481569c8490232c","x":58,"y":-180,"width":135,"height":53,"color":"3"},
		{"type":"text","text":"map","id":"f0349872ce397487","x":328,"y":769,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"**set**","id":"6a4492d00572c56b","x":328,"y":571,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"is a container that stores unique elements, with duplicate elements disallowed. The elements are sorted according to their values","id":"318fa4cbb98041ef","x":-259,"y":551,"width":525,"height":99},
		{"type":"text","text":"is a set where duplicate elements are allowed","id":"3bf7415ddfc8f9ec","x":-259,"y":670,"width":525,"height":59},
		{"type":"text","text":"is a set where each element is a pair, called a key/value pair. The key is used for sorting and indexing the data, and must be unique. The value is the actual data.","id":"2f6d2f99972f122b","x":-259,"y":749,"width":525,"height":99},
		{"type":"text","text":"(also called a dictionary) is a map that allows duplicate keys.","id":"a51217edb149d250","x":-259,"y":868,"width":525,"height":59},
		{"type":"text","text":"multiset","id":"65265753b7ee9a31","x":328,"y":670,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"Container classes","id":"05566c3e0decc299","x":617,"y":260,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"**multimap**","id":"2fb85b927dc41b93","x":328,"y":868,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"is a container where elements operate in a LIFO (Last In, First Out) context, where elements are inserted (pushed) and removed (popped) from the end of the container","id":"a644492d30350137","x":573,"y":1100,"width":617,"height":109},
		{"type":"text","text":"is a type of queue where the elements are kept sorted (via operator<). When elements are pushed, the element is sorted in the queue. Removing an element from the front returns the highest priority item in the priority queue.","id":"01d75cd474d2f669","x":572,"y":1362,"width":618,"height":104},
		{"type":"text","text":"is a container where elements operate in a FIFO (First In, First Out) context, where elements are inserted (pushed) to the back of the container and removed (popped) from the front.","id":"88ab52172c3442ea","x":573,"y":1234,"width":617,"height":91},
		{"type":"text","text":"**stack**","id":"5e239a35c75a0809","x":287,"y":1124,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"queue","id":"40d5a42a39d44d4b","x":287,"y":1249,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"**priority queue**","id":"4045a6d515e1e225","x":287,"y":1384,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"**list**","id":"7c20c864f03e8209","x":1095,"y":780,"width":145,"height":50,"color":"6"},
		{"type":"text","text":"**vector**","id":"bae179c0818f2327","x":1097,"y":542,"width":141,"height":54,"color":"6"},
		{"type":"text","text":"**deque**","id":"190ad50d4571c187","x":1097,"y":650,"width":145,"height":50,"color":"6"},
		{"type":"text","text":"a dynamic array capable of growing as needed to contain its elements.","id":"163f688ded5abb98","x":1264,"y":527,"width":404,"height":84},
		{"type":"text","text":" double-ended queue class, implemented as a dynamic array that can grow from both ends.","id":"cb3f0bb6284d3699","x":1264,"y":638,"width":404,"height":74},
		{"type":"text","text":"is a special type of sequence container called a doubly linked list where each element in the container contains pointers that point at the next and previous elements in the list.","id":"44b0cad02f984498","x":1264,"y":743,"width":404,"height":124},
		{"type":"text","text":"are container classes that maintain the ordering of elements in the container","id":"f88c5f3cc940a44d","x":1840,"y":697,"width":360,"height":93},
		{"type":"text","text":"**string**","id":"343fee89ec405952","x":1095,"y":878,"width":145,"height":50,"color":"6"},
		{"type":"text","text":"**Iterator**","id":"c348417d0c94d013","x":-798,"y":260,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"is an object that can traverse (iterate over) a container class without the user having to know how the container is implemented","id":"802bd8cbea08c827","x":-1380,"y":240,"width":547,"height":100},
		{"type":"text","text":"- **begin()** returns an iterator representing the beginning of the elements in the container.\n- **end()** returns an iterator representing the element just past the end of the elements.\n- **cbegin()** returns a const (read-only) iterator representing the beginning of the elements in the container.\n- **cend()** returns a const (read-only) iterator representing the element just past the end of the elements.","id":"a22eecb5ed5056d9","x":-1669,"y":408,"width":836,"height":143},
		{"type":"text","text":"- **`Operator*`** -- Dereferencing the iterator returns the element that the iterator is currently pointing at.\n- **`Operator++`** -- Moves the iterator to the next element in the container. \n- Most iterators also provide `Operator--` \n- **`Operator==` and `Operator!=`** -- determine if two iterators point to the same element.\n- **`Operator=`** -- Assign the iterator to a new position ","id":"ae4ebf3857cd064e","x":-2260,"y":210,"width":815,"height":160},
		{"type":"text","text":"all containers provide (at least) two types of iterators:\n\n- **container::iterator** provides a read/write iterator\n- **container::const_iterator** provides a read-only iterator","id":"bde3ed78e858e6c1","x":-1375,"y":585,"width":542,"height":130},
		{"type":"text","text":"are containers that automatically sort their inputs when those inputs are inserted into the container","id":"187c79aac1b07b1b","x":-340,"y":1020,"width":423,"height":80},
		{"type":"text","text":"are special predefined containers that are adapted to specific uses. The interesting part about container adapters is that you can choose which sequence container you want them to use.","id":"b0e379cf01e429be","x":440,"y":1580,"width":600,"height":120},
		{"id":"c5146caeafe21062","x":-1492,"y":-120,"width":772,"height":280,"type":"text","text":"```cpp\nstd::vector<int> vect;\n    for (int count=0; count < 6; ++count)\n        vect.push_back(count);\n    std::vector<int>::const_iterator it; // declare a read-only iterator\n    it = vect.cbegin(); // assign it to the start of the vector\n    while (it != vect.cend()) // while it hasn't reach the end\n    {\n        std::cout << *it << ' '; // print the value of the element it points to\n        ++it; // and iterate to the next element\n    }\n```"}
	],
	"edges":[
		{"id":"f994e7f1ebe08571","fromNode":"bae179c0818f2327","fromSide":"right","toNode":"163f688ded5abb98","toSide":"left","toEnd":"none"},
		{"id":"9557bbdc328aa51a","fromNode":"190ad50d4571c187","fromSide":"right","toNode":"cb3f0bb6284d3699","toSide":"left","toEnd":"none"},
		{"id":"e2077e07858cf153","fromNode":"7c20c864f03e8209","fromSide":"right","toNode":"44b0cad02f984498","toSide":"left","toEnd":"none"},
		{"id":"eff179ff803268a1","fromNode":"4481569c8490232c","fromSide":"bottom","toNode":"05566c3e0decc299","toSide":"top"},
		{"id":"847a8baf98f80675","fromNode":"7434fa55574fd111","fromSide":"bottom","toNode":"187c79aac1b07b1b","toSide":"right","toEnd":"none","color":"6"},
		{"id":"0407fb1446bbc48c","fromNode":"f0349872ce397487","fromSide":"left","toNode":"2f6d2f99972f122b","toSide":"right","toEnd":"none","color":"6"},
		{"id":"57717fde690c9661","fromNode":"65265753b7ee9a31","fromSide":"left","toNode":"3bf7415ddfc8f9ec","toSide":"right","toEnd":"none","color":"6"},
		{"id":"4129d0dfa0fb3967","fromNode":"6a4492d00572c56b","fromSide":"left","toNode":"318fa4cbb98041ef","toSide":"right","toEnd":"none","color":"6"},
		{"id":"7bd98e36ee50c7f5","fromNode":"2fb85b927dc41b93","fromSide":"left","toNode":"a51217edb149d250","toSide":"right","toEnd":"none","color":"6"},
		{"id":"6b008d7bd8aab227","fromNode":"05566c3e0decc299","fromSide":"bottom","toNode":"7434fa55574fd111","toSide":"top","color":"5"},
		{"id":"d15b4625ba39b6e8","fromNode":"46b62c1e02ce1ff2","fromSide":"right","toNode":"f88c5f3cc940a44d","toSide":"left","toEnd":"none","color":"6"},
		{"id":"ffd52a9e8e97f00b","fromNode":"05566c3e0decc299","fromSide":"bottom","toNode":"46b62c1e02ce1ff2","toSide":"top","color":"5"},
		{"id":"e69c893ea45e4e32","fromNode":"5e239a35c75a0809","fromSide":"right","toNode":"a644492d30350137","toSide":"left","toEnd":"none","color":"6"},
		{"id":"038b4db3fb3f9521","fromNode":"40d5a42a39d44d4b","fromSide":"right","toNode":"88ab52172c3442ea","toSide":"left","toEnd":"none","color":"6"},
		{"id":"a0c3be8e1ddf836a","fromNode":"4045a6d515e1e225","fromSide":"right","toNode":"01d75cd474d2f669","toSide":"left","toEnd":"none","color":"6"},
		{"id":"6814e99b6530090e","fromNode":"05566c3e0decc299","fromSide":"bottom","toNode":"cb592695a107521b","toSide":"top","color":"5"},
		{"id":"e1c63eaea21e8ff4","fromNode":"cb592695a107521b","fromSide":"right","toNode":"46b62c1e02ce1ff2","toSide":"bottom","fromEnd":"arrow","color":"6"},
		{"id":"8164928f90096411","fromNode":"4481569c8490232c","fromSide":"bottom","toNode":"c348417d0c94d013","toSide":"top"},
		{"id":"4057fbaeaad88bd4","fromNode":"c348417d0c94d013","fromSide":"left","toNode":"802bd8cbea08c827","toSide":"right","toEnd":"none","color":"6"},
		{"id":"aee06f44423d0dfa","fromNode":"c348417d0c94d013","fromSide":"bottom","toNode":"a22eecb5ed5056d9","toSide":"right","color":"6"},
		{"id":"e67fa01c91accb17","fromNode":"802bd8cbea08c827","fromSide":"left","toNode":"ae4ebf3857cd064e","toSide":"right","color":"6"},
		{"id":"9de248f531a9e01d","fromNode":"c348417d0c94d013","fromSide":"bottom","toNode":"bde3ed78e858e6c1","toSide":"right","color":"6"},
		{"id":"62bda283251e4937","fromNode":"cb592695a107521b","fromSide":"bottom","toNode":"b0e379cf01e429be","toSide":"top","toEnd":"none","color":"6"},
		{"id":"86235456e726ab50","fromNode":"802bd8cbea08c827","fromSide":"top","toNode":"c5146caeafe21062","toSide":"bottom","color":"6"}
	]
}