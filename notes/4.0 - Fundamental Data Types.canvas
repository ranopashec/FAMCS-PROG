{
	"nodes":[
		{"type":"text","text":"# memmory","id":"efc67833008d51af","x":-286,"y":-140,"width":249,"height":96,"color":"6"},
		{"type":"text","text":"different data types, that are supported by C++","id":"da1c172456bc170b","x":20,"y":361,"width":250,"height":99},
		{"type":"text","text":"4 fundamental integer types (in C++)","id":"cc7708c0ef126c34","x":-1360,"y":2011,"width":410,"height":69},
		{"type":"text","text":"long long int -64 bits","id":"8c28f203f97869a4","x":-1273,"y":2260,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"long int - 32 bits","id":"761365dfa4a3c359","x":-1273,"y":2340,"width":250,"height":60,"color":"2"},
		{"type":"text","text":"int - 16 bits","id":"57531e74042c51df","x":-1273,"y":2434,"width":250,"height":60,"color":"3"},
		{"type":"text","text":"short int - 16 bits","id":"6e18585347f40a15","x":-1273,"y":2538,"width":250,"height":50,"color":"4"},
		{"type":"text","text":"This attribute of being positive, negative, or zero is called the number’s sign.","id":"6cdcdeb8bd904702","x":-1802,"y":1326,"width":388,"height":149},
		{"type":"text","text":"For the non-math inclined… use the table. :)","id":"5ce9e8c1d9d33668","x":-1711,"y":1855,"width":333,"height":85},
		{"type":"text","text":"Signed integer ranges","id":"091813ac9d4b6c11","x":-1958,"y":1650,"width":250,"height":60},
		{"type":"text","text":"For the math inclined, an n-bit signed variable has a range of -(2n-1) to 2n-1-1.","id":"31641004618aff1e","x":-2168,"y":1830,"width":412,"height":110},
		{"type":"text","text":"Integer overflow (often called _overflow_ for short) occurs when we try to store a value that is outside the range of the type.","id":"e59332dcaf0899b7","x":-2501,"y":1475,"width":333,"height":145,"color":"1"},
		{"type":"text","text":"Be careful when using integer division, as you will lose any fractional parts of the quotient. However, if it’s what you want, integer division is safe to use, as the results are predictable.","id":"0ff81f9547727cd2","x":-2501,"y":1650,"width":333,"height":155,"color":"1"},
		{"type":"text","text":"```cpp\nsigned short ss;\nsigned int si;\nsigned long sl;\nsigned long long sll;\n```","id":"5a1bb31fd43ae933","x":-2124,"y":2100,"width":580,"height":134},
		{"type":"text","text":"```cpp\nshort s;      // prefer \"short\" instead of \"short int\"\nint i;\nlong l;       // prefer \"long\" instead of \"long int\"\nlong long ll; // prefer \"long long\" instead of \"long long int\"\n```","id":"41bb39d0d87b367b","x":-2198,"y":2340,"width":727,"height":154},
		{"type":"text","text":"Prefer the shorthand types that do not use the _int_ suffix or signed prefix.","id":"51f650a672128589","x":-2202,"y":2620,"width":735,"height":61},
		{"type":"text","text":"the larger integers can hold bigger numbers.","id":"a3b2f40111dd928a","x":-1354,"y":2140,"width":400,"height":94},
		{"type":"text","text":"**Signed integers**","id":"0a6fcef772c38220","x":-1242,"y":1370,"width":198,"height":65,"color":"5"},
		{"type":"text","text":"**Unsigned integers**","id":"609caa87cabc7cae","x":-950,"y":1374,"width":229,"height":61,"color":"5"},
		{"type":"text","text":"can only hold non-negative whole numbers.","id":"7e81da32a5626379","x":-944,"y":1474,"width":218,"height":103},
		{"type":"text","text":"```cpp\nunsigned short us;\nunsigned int ui;\nunsigned long ul;\nunsigned long long ull;\n```","id":"9b16e419b54c33b2","x":-975,"y":1753,"width":280,"height":187},
		{"type":"text","text":"An n-bit unsigned variable has a range of 0 to (2n)-1.","id":"217e942363aa7dd0","x":-1189,"y":1587,"width":245,"height":123,"color":"4"},
		{"type":"text","text":"integers","id":"7960bc4fa7bd1303","x":-744,"y":1017,"width":144,"height":63,"color":"5"},
		{"type":"text","text":"**Fixed-width integers**","id":"33462af329d61fe1","x":-550,"y":1371,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"```cpp\n#include <cstdint> // for fixed-width integers\n#include <iostream>\n\nint main()\n{\n\tstd::cout << \"least 8:  \" << sizeof(std::int_least8_t) * 8 << \" bits\\n\";\n\tstd::cout << \"least 16: \" << sizeof(std::int_least16_t) * 8 << \" bits\\n\";\n\tstd::cout << \"least 32: \" << sizeof(std::int_least32_t) * 8 << \" bits\\n\";\n\tstd::cout << '\\n';\n\tstd::cout << \"fast 8:  \" << sizeof(std::int_fast8_t) * 8 << \" bits\\n\";\n\tstd::cout << \"fast 16: \" << sizeof(std::int_fast16_t) * 8 << \" bits\\n\";\n\tstd::cout << \"fast 32: \" << sizeof(std::int_fast32_t) * 8 << \" bits\\n\";\n\n\treturn 0;\n}\n```","id":"771836b6bc896276","x":-905,"y":2588,"width":940,"height":412},
		{"type":"text","text":"The 8-bit fixed-width integer types are often treated like chars instead of integer values (and this may vary per system). Prefer the 16-bit fixed integral types for most cases.","id":"e681c86cce804315","x":-697,"y":3100,"width":525,"height":136,"color":"1"},
		{"type":"text","text":"avoid _std::int8_t_ and _std::uint8_t_ (and the related fast and least types) and use _std::int16_t_ or _std::uint16_t_ instead.","id":"0d0dad024549441d","x":-608,"y":3276,"width":343,"height":144},
		{"type":"text","text":"are guaranteed to be the same size on any architecture","id":"349a95faa985c69b","x":-555,"y":1546,"width":261,"height":103},
		{"type":"text","text":"The fast types","id":"a265d01953974cd7","x":-766,"y":1624,"width":177,"height":75,"color":"5"},
		{"type":"text","text":"fundamental data types","id":"b5cc8070c3e789a6","x":-300,"y":377,"width":265,"height":68,"color":"6"},
		{"type":"text","text":"Memory is organized into sequential units - ","id":"c7804589ae90208e","x":-723,"y":-506,"width":240,"height":96},
		{"type":"text","text":"memory addresses","id":"c2f028fd86d7519f","x":-728,"y":-580,"width":250,"height":50,"color":"6"},
		{"type":"text","text":"memory on modern machines is typically organized into byte-sized units, with each byte of memory having a unique address","id":"daa5a0cffb270f76","x":-785,"y":-760,"width":365,"height":147},
		{"type":"text","text":"[C++](notes/studies/programming/c++/0_C++_0.canvas)","id":"5d86b2ce750683b9","x":-209,"y":-260,"width":95,"height":50,"color":"3"},
		{"type":"text","text":"Functions that do not return a value","id":"00e178c0cd4690d4","x":-1198,"y":585,"width":271,"height":74},
		{"type":"text","text":"Functions that do not take parameters","id":"f68bcb410d7e08b6","x":-1198,"y":758,"width":271,"height":70},
		{"type":"text","text":"Void","id":"bcb3ee92498c431f","x":-752,"y":710,"width":111,"height":50,"color":"5"},
		{"type":"text","text":"```cpp\nint getValue() // empty function parameters is an implicit void\n{\n    int x{};\n    std::cin >> x;\n    return x;\n}\n```","id":"cd92a339df2166ce","x":-2140,"y":682,"width":420,"height":222},
		{"type":"text","text":"```cpp\nint getValue(void) // void here means no parameters\n{\n    int x{};\n    std::cin >> x;\n    return x;\n}\n```","id":"4f9fee0c910db31f","x":-1680,"y":682,"width":446,"height":222},
		{"type":"text","text":"aka basic types, primitive types, or built-in types","id":"e72a9a31e5186f34","x":-351,"y":710,"width":279,"height":76},
		{"type":"text","text":"Boolean variables are variables that can have only two possible values: _true_, and _false_.","id":"6dbb6a38a64b7400","x":-1226,"y":210,"width":250,"height":124},
		{"type":"text","text":"Boolean","id":"c52e33f02c7c2a4b","x":-927,"y":245,"width":131,"height":53,"color":"5"},
		{"type":"text","text":"[Statements](notes/studies/programming/c++/1.0%20-%20basics.canvas)","id":"9e1a0913701f790b","x":-1226,"y":-128,"width":162,"height":50,"color":"6"},
		{"type":"text","text":"is a type of instruction that causes the program to perform some action  ","id":"fad66dc4c3120262","x":-1306,"y":-56,"width":322,"height":99},
		{"type":"text","text":"However, in any context where an integer can be converted to a Boolean, the integer _0_ is converted to _false_, and any other integer is converted to _true_.","id":"c408ecd95be6eec6","x":-1234,"y":377,"width":478,"height":138},
		{"type":"text","text":"if","id":"7201b7ec21ac4a7f","x":-1680,"y":74,"width":80,"height":50,"color":"5"},
		{"type":"text","text":"conditional expression","id":"19e236c08e1cd95c","x":-1765,"y":185,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"an expression that evaluates to a Boolean value","id":"1dddba44361a3d6b","x":-1064,"y":99,"width":404,"height":86},
		{"type":"text","text":"_f statements_ only conditionally execute a single statement.","id":"8f0b3a940b08f896","x":-1484,"y":74,"width":250,"height":102,"color":"1"},
		{"type":"text","text":"- Prefer `int` when the size of the integer doesn’t matter (e.g. the number will always fit within the range of a 2-byte signed integer). For example, if you’re asking the user to enter their age, or counting from 1 to 10, it doesn’t matter whether int is 16 or 32 bits (the numbers will fit either way). This will cover the vast majority of the cases you’re likely to run across.\n- Prefer `std::int#_t` when storing a quantity that needs a guaranteed range.\n- Prefer `std::uint#_t` when doing bit manipulation or where well-defined wrap-around behavior is required.","id":"d18d0ebaa509f1fb","x":-1680,"y":933,"width":551,"height":377,"color":"4"},
		{"type":"text","text":"allows us to execute one (or more) lines of code only if some condition is true.","id":"2f7091fa06505a38","x":-2060,"y":52,"width":360,"height":94},
		{"type":"text","text":"```cpp\nif (condition)\n    true_statement;\n```","id":"f66e0f00d2474d25","x":-2340,"y":38,"width":250,"height":121},
		{"type":"text","text":"If-else","id":"f17f6f971e3a3d97","x":-1880,"y":-103,"width":109,"height":53,"color":"5"},
		{"type":"text","text":"```cpp\nif (condition)\n    true_statement;\nelse\n    false_statement;\n```","id":"bdc260f5d30b9041","x":-2201,"y":-149,"width":282,"height":146},
		{"type":"text","text":"```cpp\nif (condition)\n\ttrue_statement;\nelse if (condition_2)\n\ttrue_statement;\nelse\n\tfalse_statement;\n```","id":"30ef96602a72ef80","x":-2680,"y":-182,"width":320,"height":211},
		{"type":"text","text":"When outputting floating point numbers, std::cout has a default precision of 6","id":"48f8836891add23e","x":-74,"y":1936,"width":250,"height":124,"color":"1"},
		{"type":"text","text":"a variable that can hold a real number, such as 4320.0, -3.33, or 0.01226","id":"1a5afd816b39218f","x":-74,"y":2123,"width":250,"height":131},
		{"type":"text","text":"floating point","id":"29a166de3eb12064","x":316,"y":2035,"width":185,"height":50,"color":"5"},
		{"type":"text","text":"precision","id":"00945e48f4aaf6e1","x":625,"y":2188,"width":148,"height":50,"color":"6"},
		{"type":"text","text":"defines how many _significant digits_ it can represent without information loss.","id":"d415dbc8456b9327","x":822,"y":2151,"width":250,"height":124},
		{"type":"text","text":"```cpp\nfloat fValue;\ndouble dValue;\nlong double ldValue;\n```","id":"a098290a819864eb","x":799,"y":1910,"width":296,"height":125},
		{"type":"text","text":"rounding error","id":"0eb890430a8581a7","x":608,"y":2324,"width":184,"height":50,"color":"6"},
		{"type":"text","text":"When precision is lost because a number can’t be stored precisely","id":"8ad2e0694aceaf64","x":822,"y":2297,"width":250,"height":104},
		{"type":"text","text":"are intepreted as an `ASCII character`","id":"5919a6d55df86773","x":600,"y":1482,"width":250,"height":86},
		{"type":"text","text":"char","id":"cd56e7ef07977f42","x":440,"y":1499,"width":121,"height":50,"color":"5"},
		{"type":"text","text":"```cpp\n// INITIALIZING\nchar ch{5}; // initialize with integer 5 (stored as integer 5)\nchar ch{'5'}; // initialize with code point for '5' (stored as integer 53)\n// PRINTING\nchar ch1{ 'a' }; // (preferred)\nstd::cout << ch1; // cout prints character 'a'\nchar ch2{ 98 }; // code point for 'b' (not preferred)\nstd::cout << ch2; // cout prints a character ('b')\ncout << 'c'; // direct output\n\n```","id":"0ca0b6deef480023","x":600,"y":1599,"width":817,"height":281},
		{"type":"text","text":"The least types","id":"6303536acdb85c64","x":-229,"y":1624,"width":175,"height":75,"color":"5"},
		{"type":"text","text":"any information that can be moved, processed, or stored by a computer","id":"c9f8a61218561cb8","x":-624,"y":-44,"width":324,"height":151},
		{"type":"text","text":"constant","id":"2348295d62a689e7","x":1019,"y":2,"width":132,"height":51,"color":"6"},
		{"type":"text","text":"```cpp\nconst double gravity { 9.8 };\n```","id":"05c8fce780bfe357","x":330,"y":-1064,"width":360,"height":50},
		{"type":"text","text":"A variable whose value can not be changed ","id":"daf43d28329ef202","x":385,"y":-996,"width":250,"height":85},
		{"type":"text","text":"const variables","id":"e251be36e586b376","x":419,"y":-899,"width":181,"height":60,"color":"5"},
		{"type":"text","text":" a name that is given to a constant value","id":"e7008db43b1fcbb9","x":34,"y":-1151,"width":298,"height":73},
		{"type":"text","text":"symbolic constant","id":"6c013a6a518dd473","x":72,"y":-1051,"width":221,"height":60,"color":"6"},
		{"type":"text","text":"Const variables _must_ be initialized when you define them, and then that value can not be changed via assignment","id":"146b85e6c058d7fa","x":26,"y":-769,"width":382,"height":124,"color":"4"},
		{"type":"text","text":"Prefer constant variables over object-like macros with substitution text.","id":"b49b48bc91206d65","x":34,"y":-610,"width":365,"height":80,"color":"4"},
		{"type":"text","text":"binary digit","id":"dc2939290e49d726","x":34,"y":-62,"width":155,"height":60,"color":"6"},
		{"type":"text","text":"an hold a value of 0 or 1","id":"cfad4b5d315e2c6a","x":-12,"y":-332,"width":250,"height":60},
		{"type":"text","text":"The smallest unit of memory","id":"03cf3fb35c8e205d","x":-14,"y":-227,"width":252,"height":79},
		{"type":"text","text":"Compile-time constant","id":"a95b25a7f64053ad","x":1179,"y":-251,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"an expression that can be evaluated by the compiler at compile-time (not runtime)","id":"abcb251f717677b7","x":1425,"y":-79,"width":415,"height":70},
		{"type":"text","text":"a constant whose value is known at compile-time","id":"1e9ef2cd6d47522a","x":1464,"y":-250,"width":336,"height":60},
		{"type":"text","text":"constant expression","id":"ad5cbb35693dfc48","x":1507,"y":-171,"width":250,"height":51,"color":"6"},
		{"type":"text","text":"if initializer is a constant expression","id":"25ae8bd7d7f9a3ce","x":902,"y":-251,"width":250,"height":60},
		{"type":"text","text":"Runtime constants","id":"8ca4268fec5ea451","x":419,"y":-250,"width":216,"height":59,"color":"5"},
		{"type":"text","text":"const variable that is initialized with a non-constant expression","id":"ee8a983d3274918c","x":363,"y":-352,"width":328,"height":80},
		{"type":"text","text":"Any variable that should not be modifiable after initialization and whose initializer is known at compile-time should be declared as `constexpr`.  \nAny variable that should not be modifiable after initialization and whose initializer is not known at compile-time should be declared as `const`.","id":"65fd700c3bab9cdc","x":582,"y":160,"width":756,"height":136,"color":"4"},
		{"type":"text","text":"function parameters can be `const`, they cannot be `constexpr`","id":"753186917d3ffb53","x":656,"y":312,"width":609,"height":50},
		{"type":"text","text":"literals (literal constants)","id":"b998517b238c041d","x":1399,"y":-480,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"are unnamed values inserted directly into the code","id":"5271543599d490ce","x":1700,"y":-495,"width":296,"height":91},
		{"type":"text","text":"decimal","id":"cf2e6d88fb64a379","x":-1352,"y":-1057,"width":126,"height":61,"color":"5"},
		{"type":"text","text":"# Numeral systems","id":"17c795d5fab07413","x":-702,"y":-1052,"width":250,"height":141,"color":"6"},
		{"type":"text","text":"0, 1, 2, 3, 4, 5, 6, 7, 8, or 9","id":"2303d60da73b43a5","x":-1414,"y":-971,"width":250,"height":60},
		{"type":"text","text":"binary","id":"f49af2810527ad88","x":-1289,"y":-1252,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"0, 1","id":"c4b70c90f9f82042","x":-1226,"y":-1172,"width":126,"height":67},
		{"type":"text","text":"octal","id":"50faec9a68df477f","x":-1039,"y":-1461,"width":116,"height":61,"color":"5"},
		{"type":"text","text":"0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, …","id":"656c0f69cd98d18c","x":-1142,"y":-1360,"width":323,"height":50},
		{"type":"text","text":"```cpp\nint x{ 012 }; // 0 before the number means this is octal\n```","id":"0215e1ace18729fb","x":-1700,"y":-1470,"width":620,"height":79},
		{"type":"text","text":"Hexadecimal","id":"9e4968242d56ad95","x":-332,"y":-1313,"width":172,"height":60,"color":"5"},
		{"type":"text","text":"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, 10, 11, 12, …","id":"2069473d5b3569b9","x":-496,"y":-1229,"width":501,"height":65},
		{"type":"text","text":"```cpp\nint x{ 0xF }; // 0x before the number means this is hexadecimal\n```","id":"e2c9c82e93dd6813","x":-452,"y":-1138,"width":413,"height":86},
		{"type":"text","text":"```cpp\nint x { 12 };\nstd::cout << x << '\\n'; // decimal (by default)\nstd::cout << std::hex << x << '\\n'; // hexadecimal\nstd::cout << std::oct << x << '\\n'; // octal\n//once applied, the I/O manipulator remains set for future output until it is changed again\n```","id":"9e98f672a4254d58","x":-2120,"y":-778,"width":956,"height":165},
		{"type":"text","text":"```cpp\nint x{ 0b1010'0010 }; // 0b before the number means this is binary\n```","id":"308802cc540e6f5e","x":-1761,"y":-1281,"width":428,"height":118},
		{"type":"text","text":"```cpp\n#include <bitset> // for std::bitset\n#include <iostream>\nint main() {\n\t// std::bitset<8> means we want to store 8 bits\n\tstd::bitset<8> bin1{ 0b1100'0101 }; // binary literal for binary 1100 0101\n\tstd::bitset<8> bin2{ 0xC5 }; // hexadecimal literal for binary 1100 0101\n\tstd::cout << bin1 << '\\n' << bin2 << '\\n';\n\tstd::cout << std::bitset<4>{ 0b1010 } << '\\n'; // create a temporary std::bitset and print it\n\treturn 0; }\n```","id":"180744eb3870e2a3","x":-2641,"y":-1147,"width":999,"height":307},
		{"type":"text","text":"`std::setprecision()`","id":"57b42deb74f24a8e","x":1095,"y":2035,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"3.333333253860474\n3.333333333333334","id":"2c4de5e414245111","x":2320,"y":2022,"width":250,"height":87},
		{"type":"text","text":"allow us (the programmer) to explicitly tell the compiler to convert a value from one type to another type,","id":"8209b85c0c7d19f0","x":812,"y":790,"width":428,"height":115},
		{"type":"text","text":"When the compiler does type conversion on our behalf without us explicitly asking","id":"6b6767fcb45f60cb","x":251,"y":797,"width":298,"height":108},
		{"type":"text","text":"implicit type conversion","id":"dc82cf486d53b545","x":263,"y":711,"width":274,"height":50,"color":"5"},
		{"type":"text","text":"Output manipulators","id":"35ddcda19be7e800","x":1762,"y":1709,"width":155,"height":85,"color":"6"},
		{"type":"text","text":"alter how data is output, and are defined in the _iomanip_ header","id":"2c9760c89102cdc2","x":1960,"y":1695,"width":250,"height":113},
		{"type":"text","text":"`std::ws`","id":"ec1eaf6d5075c3e3","x":2093,"y":1468,"width":135,"height":64},
		{"type":"text","text":"```cpp\nstd::getline()\n```","id":"60c48aa5fc474fad","x":2050,"y":1192,"width":222,"height":63},
		{"type":"text","text":"```cpp\nstd::getline(std::cin >> std::ws, name); // read a full line of text into name\n```","id":"84e1f94cf8225aac","x":1736,"y":1291,"width":852,"height":89},
		{"type":"text","text":"```cpp\nname.length()\n```","id":"a458f18465b7f273","x":2315,"y":1192,"width":250,"height":63},
		{"type":"text","text":"outputs the number of characters in the string variable","id":"4c025db8ffc027ca","x":2598,"y":1182,"width":414,"height":74},
		{"type":"text","text":"Type conversion produces a new value of the target type from a value of a different type.","id":"a5ebbda3781740ce","x":531,"y":377,"width":388,"height":93},
		{"type":"text","text":"The process of converting a value from one type to another type","id":"e37e28f848de39d7","x":549,"y":497,"width":352,"height":80},
		{"type":"text","text":"type conversion","id":"24d8ab13bfe3aeb3","x":625,"y":603,"width":200,"height":50,"color":"6"},
		{"type":"text","text":"not fundamental, but popular","id":"16fd80fece40f06f","x":1179,"y":524,"width":295,"height":63},
		{"type":"text","text":"string","id":"93b6d555227227ff","x":1734,"y":524,"width":106,"height":68,"color":"5"},
		{"type":"text","text":"`<string> header`","id":"e9b28e423ec3618f","x":2036,"y":905,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"`<string_view>` header","id":"df23f0e828ec35bc","x":3180,"y":905,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"`std::string`","id":"3291a11ec5e773bb","x":1688,"y":1039,"width":198,"height":50},
		{"type":"text","text":"Prefer `std::string_view` over `std::string` when you need a read-only string, especially for function parameters.","id":"23806acd8b2e8fb9","x":2512,"y":960,"width":500,"height":104,"color":"4"},
		{"type":"text","text":"a literal (usually a number) that either has an unclear meaning or may need to be changed later","id":"af898681ba09d01d","x":1649,"y":-618,"width":405,"height":97},
		{"type":"text","text":"magic number","id":"fcfd0848b3d0d904","x":1433,"y":-595,"width":183,"height":51,"color":"5"},
		{"type":"text","text":"```cpp\nconstexpr // double {5.3} - for example\n```","id":"b221d4ec9f87e4da","x":1844,"y":-170,"width":456,"height":50},
		{"type":"text","text":"```cpp\n// declaration\nbool b;\n// initialization\nbool b1 { true };\nbool b2 { false };\nb1 = false;\nbool b3 {};                    // default initialize to false\n// flipping value\nbool b1 { !true };             // b1 will be initialized with the value false\nbool b2 { !false };            // b2 will be initialized with the value true\n// printing\nstd::cout << true << '\\n';     // evaluates to 1\nstd::cout << !true << '\\n';    // evaluates to 0\nbool b{false};\nstd::cout << b << '\\n';        // evaluates to 0\nstd::cout << !b << '\\n';       // evaluates to 1\nstd::cout << std::boolalpha;   // print bools as true or false\nstd::cout << true << '\\n';     // prints true\nstd::cout << false << '\\n';    // prints false\n// inputing\nstd::cin >> std::boolalpha;    // allow std::cin to accept “false” and “true” as inputs\nstd::cin >> b;                 // false/true if after previous line\nstd::cin >> b;                 // 0/1 if after std::cin << std::noboolalpha; or after nothing\n// returning (in functions)\nbool isEqual(int x, int y){\nreturn (x == y); // operator== returns true if x equals y, and false otherwise\n}\n```\n","id":"6d90f7420ad4fa4c","x":-2394,"y":343,"width":990,"height":172},
		{"type":"text","text":"value","id":"f814e73421939cc1","x":453,"y":3,"width":96,"height":50,"color":"6"},
		{"type":"text","text":"is a value that may not be changed","id":"a63539dc39924d33","x":1181,"y":3,"width":344,"height":50},
		{"type":"text","text":"```cpp\n#include <cstdint> // for fixed-width integers\n#include <iostream>\n\nint main()\n{\n    std::int16_t i{5};\n    std::cout << i;\n    return 0;\n}\n```","id":"a39413ac02b195b3","x":-625,"y":1763,"width":401,"height":295},
		{"type":"text","text":"Avoid mixing signed and unsigned numbers.","id":"13d02a2408f59b83","x":-766,"y":1269,"width":267,"height":83,"color":"4"},
		{"type":"text","text":"(std::int_least#_t and std::uint_least#_t) provide the smallest signed/unsigned integer type with a width of at least # bits (where # = 8, 16, 32, or 64)","id":"63c8fe92fbdd3c33","x":-380,"y":2267,"width":472,"height":174},
		{"type":"text","text":"float","id":"4841eadf1cf00614","x":119,"y":2464,"width":109,"height":50,"color":"5"},
		{"type":"text","text":"long double","id":"64194aa6c7f69ae3","x":283,"y":2464,"width":173,"height":50,"color":"5"},
		{"type":"text","text":"double","id":"6d5c733931cee259","x":532,"y":2464,"width":152,"height":50,"color":"5"},
		{"type":"text","text":"(std::int_fast#_t and std::uint_fast#_t) provide the fastest signed/unsigned integer type with a width of at least # bits (where # = 8, 16, 32, or 64).","id":"26aff37119a6eae0","x":-877,"y":2266,"width":400,"height":167},
		{"type":"text","text":"DATA","id":"1bdb6dcf416621a9","x":-227,"y":7,"width":132,"height":50,"color":"6"},
		{"type":"text","text":"`static_cast` operator","id":"eb6145babee1689a","x":671,"y":998,"width":309,"height":66,"color":"6"},
		{"type":"text","text":"takes the value from an expression as in_cast put, and returns that value converted into the type specified by _new_type_","id":"499573ce3a6c43a0","x":340,"y":1115,"width":472,"height":100},
		{"type":"text","text":"```cpp\nstatic_cast<new_type>(expression)\n```","id":"6f4e6c75faa61373","x":377,"y":1255,"width":399,"height":70},
		{"type":"text","text":"Input\nmanipulators","id":"4bbe1fabd56e12cb","x":1749,"y":1464,"width":181,"height":72,"color":"6"},
		{"type":"text","text":"tells `std::cin` to ignore any leading whitespace before extraction","id":"11113fb0a85c5c32","x":1973,"y":1567,"width":378,"height":93},
		{"type":"text","text":"```cpp\nstd::string_view\n```","id":"494ea559c692a1e4","x":3160,"y":1182,"width":290,"height":73},
		{"type":"text","text":"provides read-only access to an _existing_ string","id":"d079b91ce658c8b6","x":3500,"y":1181,"width":340,"height":75},
		{"type":"text","text":"Explicit type conversion","id":"bc524324179ef64d","x":897,"y":680,"width":259,"height":79,"color":"5"},
		{"type":"text","text":"hold a single `character` - a single letter, number, symbol, or whitespace.","id":"5524b74a8081c906","x":589,"y":1379,"width":483,"height":85},
		{"type":"text","text":"```cpp\n#include <iostream>\n#include <iomanip> // for output manipulator std::setprecision()\n\nint main()\n{\n    std::cout << std::setprecision(16); // show 16 digits of precision\n    std::cout << 3.33333333333333333333333333333333333333f <<'\\n'; // f suffix means float\n    std::cout << 3.33333333333333333333333333333333333333 << '\\n'; // no suffix means double\n\n    return 0;\n}\n```","id":"0d8297ecd0ed408d","x":1415,"y":1904,"width":849,"height":322},
		{"type":"text","text":"if using `std::getline()` to read strings, use `std::cin >> std::ws` input manipulator to ignore leading whitespace.","id":"f81c33d3487ba93f","x":2212,"y":800,"width":550,"height":75,"color":"4"},
		{"type":"text","text":"```cpp\n#include <limits> // for std::numeric_limits\n\nvoid ignoreLine()\n{\n    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n}\n\nif (!std::cin) // if the previous extraction failed\n{\n    // let's handle the failure\n    std::cin.clear(); // put us back in 'normal' operation mode\n    ignoreLine();     // and remove the bad input\n}\n```","id":"8b983b896c884061","x":1072,"y":946,"width":568,"height":390}
	],
	"edges":[
		{"id":"c62428cf9309a1fc","fromNode":"1bdb6dcf416621a9","fromSide":"left","toNode":"c9f8a61218561cb8","toSide":"right","toEnd":"none"},
		{"id":"e671d3684e17a073","fromNode":"dc2939290e49d726","fromSide":"top","toNode":"03cf3fb35c8e205d","toSide":"bottom","toEnd":"none"},
		{"id":"81367f7807b63533","fromNode":"03cf3fb35c8e205d","fromSide":"top","toNode":"cfad4b5d315e2c6a","toSide":"bottom"},
		{"id":"9a658652bca9cda4","fromNode":"efc67833008d51af","fromSide":"bottom","toNode":"1bdb6dcf416621a9","toSide":"top"},
		{"id":"6889655739859701","fromNode":"efc67833008d51af","fromSide":"left","toNode":"c7804589ae90208e","toSide":"right"},
		{"id":"1a6eb25dd2c1528a","fromNode":"1bdb6dcf416621a9","fromSide":"bottom","toNode":"b5cc8070c3e789a6","toSide":"top"},
		{"id":"acd526d68480d602","fromNode":"b5cc8070c3e789a6","fromSide":"right","toNode":"da1c172456bc170b","toSide":"left","toEnd":"none"},
		{"id":"341de5c176b5ff51","fromNode":"bcb3ee92498c431f","fromSide":"left","toNode":"00e178c0cd4690d4","toSide":"right"},
		{"id":"0bf1e33c126096fc","fromNode":"bcb3ee92498c431f","fromSide":"left","toNode":"f68bcb410d7e08b6","toSide":"right"},
		{"id":"2eade11c80cf3c28","fromNode":"f68bcb410d7e08b6","fromSide":"left","toNode":"4f9fee0c910db31f","toSide":"right"},
		{"id":"25d4ac4a7e29083f","fromNode":"4f9fee0c910db31f","fromSide":"left","toNode":"cd92a339df2166ce","toSide":"right"},
		{"id":"f8792656e877eb6a","fromNode":"cc7708c0ef126c34","fromSide":"bottom","toNode":"a3b2f40111dd928a","toSide":"top"},
		{"id":"f2c85386e059ea07","fromNode":"0a6fcef772c38220","fromSide":"bottom","toNode":"cc7708c0ef126c34","toSide":"top"},
		{"id":"f64be08fdbc294e8","fromNode":"5a1bb31fd43ae933","fromSide":"bottom","toNode":"41bb39d0d87b367b","toSide":"top","fromEnd":"arrow"},
		{"id":"a91898266cbd6595","fromNode":"51f650a672128589","fromSide":"top","toNode":"41bb39d0d87b367b","toSide":"bottom"},
		{"id":"e1f2b9837893ccc8","fromNode":"091813ac9d4b6c11","fromSide":"bottom","toNode":"31641004618aff1e","toSide":"top"},
		{"id":"1ffc016f1c833856","fromNode":"091813ac9d4b6c11","fromSide":"bottom","toNode":"5ce9e8c1d9d33668","toSide":"top"},
		{"id":"e0884793637d52c2","fromNode":"6cdcdeb8bd904702","fromSide":"right","toNode":"0a6fcef772c38220","toSide":"left"},
		{"id":"43bb3d071fe3b841","fromNode":"0a6fcef772c38220","fromSide":"bottom","toNode":"091813ac9d4b6c11","toSide":"top"},
		{"id":"7f6fd1974860f6c3","fromNode":"e59332dcaf0899b7","fromSide":"right","toNode":"091813ac9d4b6c11","toSide":"left"},
		{"id":"1a3c04703d8c5b12","fromNode":"0ff81f9547727cd2","fromSide":"right","toNode":"091813ac9d4b6c11","toSide":"left"},
		{"id":"de6836cc04880961","fromNode":"6e18585347f40a15","fromSide":"left","toNode":"41bb39d0d87b367b","toSide":"right"},
		{"id":"28f1b6ed354c7c82","fromNode":"57531e74042c51df","fromSide":"left","toNode":"41bb39d0d87b367b","toSide":"right"},
		{"id":"a7aee216ce38fdb3","fromNode":"761365dfa4a3c359","fromSide":"left","toNode":"41bb39d0d87b367b","toSide":"right"},
		{"id":"c6a4a2e0d86c1837","fromNode":"8c28f203f97869a4","fromSide":"left","toNode":"41bb39d0d87b367b","toSide":"right"},
		{"id":"b8135b6193f4a0c1","fromNode":"a3b2f40111dd928a","fromSide":"right","toNode":"8c28f203f97869a4","toSide":"right"},
		{"id":"54565174c5e5bb80","fromNode":"a3b2f40111dd928a","fromSide":"right","toNode":"761365dfa4a3c359","toSide":"right"},
		{"id":"796131ed9fbb0973","fromNode":"a3b2f40111dd928a","fromSide":"right","toNode":"57531e74042c51df","toSide":"right"},
		{"id":"faa56b85342ce987","fromNode":"a3b2f40111dd928a","fromSide":"right","toNode":"6e18585347f40a15","toSide":"right"},
		{"id":"05c981f613534848","fromNode":"609caa87cabc7cae","fromSide":"bottom","toNode":"7e81da32a5626379","toSide":"top","toEnd":"none"},
		{"id":"3359179eefeaf482","fromNode":"217e942363aa7dd0","fromSide":"top","toNode":"609caa87cabc7cae","toSide":"left"},
		{"id":"ca3d94b69e697f87","fromNode":"7e81da32a5626379","fromSide":"bottom","toNode":"9b16e419b54c33b2","toSide":"top"},
		{"id":"9d18ff73f3b5e338","fromNode":"13d02a2408f59b83","fromSide":"bottom","toNode":"609caa87cabc7cae","toSide":"right"},
		{"id":"3f4b53ba1d3277ef","fromNode":"b5cc8070c3e789a6","fromSide":"bottom","toNode":"7960bc4fa7bd1303","toSide":"top"},
		{"id":"8fdddf43dbf8a08c","fromNode":"7960bc4fa7bd1303","fromSide":"bottom","toNode":"0a6fcef772c38220","toSide":"top"},
		{"id":"d8411922405bb16a","fromNode":"7960bc4fa7bd1303","fromSide":"bottom","toNode":"609caa87cabc7cae","toSide":"top"},
		{"id":"08de5c32d6fdd20f","fromNode":"7960bc4fa7bd1303","fromSide":"bottom","toNode":"33462af329d61fe1","toSide":"top"},
		{"id":"2f9be48ebfc936b2","fromNode":"33462af329d61fe1","fromSide":"bottom","toNode":"349a95faa985c69b","toSide":"top","toEnd":"none"},
		{"id":"5deb49d93cbee393","fromNode":"349a95faa985c69b","fromSide":"bottom","toNode":"a39413ac02b195b3","toSide":"top"},
		{"id":"99a59acc140b85b5","fromNode":"33462af329d61fe1","fromSide":"bottom","toNode":"a265d01953974cd7","toSide":"top"},
		{"id":"b3d1db2c637162cd","fromNode":"33462af329d61fe1","fromSide":"bottom","toNode":"6303536acdb85c64","toSide":"top"},
		{"id":"13e71915a3c7d32b","fromNode":"a265d01953974cd7","fromSide":"bottom","toNode":"26aff37119a6eae0","toSide":"top"},
		{"id":"f7bc64fd4fcab4cf","fromNode":"6303536acdb85c64","fromSide":"bottom","toNode":"63c8fe92fbdd3c33","toSide":"top"},
		{"id":"c72c5ac8566346bc","fromNode":"26aff37119a6eae0","fromSide":"bottom","toNode":"771836b6bc896276","toSide":"top"},
		{"id":"7823f8047c21e3a6","fromNode":"63c8fe92fbdd3c33","fromSide":"bottom","toNode":"771836b6bc896276","toSide":"top"},
		{"id":"093ce9faadbb1b37","fromNode":"e681c86cce804315","fromSide":"bottom","toNode":"0d0dad024549441d","toSide":"top"},
		{"id":"33ba58b253299232","fromNode":"e681c86cce804315","fromSide":"top","toNode":"771836b6bc896276","toSide":"bottom"},
		{"id":"41ec5c17cc9f0d08","fromNode":"d18d0ebaa509f1fb","fromSide":"right","toNode":"7960bc4fa7bd1303","toSide":"left"},
		{"id":"57668faf18fa6b6d","fromNode":"b5cc8070c3e789a6","fromSide":"bottom","toNode":"29a166de3eb12064","toSide":"top"},
		{"id":"642effb537a8a507","fromNode":"1a5afd816b39218f","fromSide":"right","toNode":"29a166de3eb12064","toSide":"left","toEnd":"none"},
		{"id":"dce1bf929fae2d79","fromNode":"29a166de3eb12064","fromSide":"bottom","toNode":"4841eadf1cf00614","toSide":"top"},
		{"id":"d36b255bcff18eee","fromNode":"29a166de3eb12064","fromSide":"bottom","toNode":"6d5c733931cee259","toSide":"top","label":"dfault type"},
		{"id":"d86b2f518087d706","fromNode":"29a166de3eb12064","fromSide":"bottom","toNode":"64194aa6c7f69ae3","toSide":"top"},
		{"id":"ac4038352ab8f718","fromNode":"29a166de3eb12064","fromSide":"bottom","toNode":"00945e48f4aaf6e1","toSide":"left"},
		{"id":"840739b01aed573f","fromNode":"00945e48f4aaf6e1","fromSide":"right","toNode":"d415dbc8456b9327","toSide":"left","toEnd":"none"},
		{"id":"8f472acc8d24ccc5","fromNode":"48f8836891add23e","fromSide":"right","toNode":"29a166de3eb12064","toSide":"left"},
		{"id":"9f7b5527fc251ecf","fromNode":"1bdb6dcf416621a9","fromSide":"right","toNode":"dc2939290e49d726","toSide":"left"},
		{"id":"425ff93dcca5933c","fromNode":"35ddcda19be7e800","fromSide":"right","toNode":"2c9760c89102cdc2","toSide":"left","toEnd":"none"},
		{"id":"d14ea8189723c210","fromNode":"00945e48f4aaf6e1","fromSide":"top","toNode":"57b42deb74f24a8e","toSide":"left"},
		{"id":"8bf9cccc51a9698c","fromNode":"29a166de3eb12064","fromSide":"right","toNode":"a098290a819864eb","toSide":"left"},
		{"id":"ae8662385317406c","fromNode":"00945e48f4aaf6e1","fromSide":"bottom","toNode":"0eb890430a8581a7","toSide":"top"},
		{"id":"8e6327599accfadb","fromNode":"0eb890430a8581a7","fromSide":"right","toNode":"8ad2e0694aceaf64","toSide":"left","toEnd":"none"},
		{"id":"574bdb4a5f64a69f","fromNode":"0d8297ecd0ed408d","fromSide":"right","toNode":"2c4de5e414245111","toSide":"left"},
		{"id":"af54d9e6ee0832f9","fromNode":"b5cc8070c3e789a6","fromSide":"left","toNode":"bcb3ee92498c431f","toSide":"right"},
		{"id":"9fbad70fddb97291","fromNode":"b5cc8070c3e789a6","fromSide":"left","toNode":"c52e33f02c7c2a4b","toSide":"right"},
		{"id":"b07fbd290813e732","fromNode":"c52e33f02c7c2a4b","fromSide":"left","toNode":"6dbb6a38a64b7400","toSide":"right","toEnd":"none"},
		{"id":"00d69396876ef9a6","fromNode":"6dbb6a38a64b7400","fromSide":"left","toNode":"6d90f7420ad4fa4c","toSide":"right"},
		{"id":"d4e44096ded5573c","fromNode":"5d86b2ce750683b9","fromSide":"bottom","toNode":"efc67833008d51af","toSide":"top"},
		{"id":"5f5c84fc2dafc5fe","fromNode":"c7804589ae90208e","fromSide":"top","toNode":"c2f028fd86d7519f","toSide":"bottom","toEnd":"none"},
		{"id":"a5265256244f636c","fromNode":"c2f028fd86d7519f","fromSide":"top","toNode":"daa5a0cffb270f76","toSide":"bottom"},
		{"id":"beb78bf75e6195af","fromNode":"5d86b2ce750683b9","fromSide":"left","toNode":"9e1a0913701f790b","toSide":"right"},
		{"id":"411414eb8109875c","fromNode":"9e1a0913701f790b","fromSide":"left","toNode":"7201b7ec21ac4a7f","toSide":"right"},
		{"id":"fff9570dc142c342","fromNode":"9e1a0913701f790b","fromSide":"bottom","toNode":"fad66dc4c3120262","toSide":"top","toEnd":"none"},
		{"id":"067b0f856ea0786c","fromNode":"7201b7ec21ac4a7f","fromSide":"left","toNode":"2f7091fa06505a38","toSide":"right","toEnd":"none"},
		{"id":"722ba0458c4f62a7","fromNode":"b5cc8070c3e789a6","fromSide":"bottom","toNode":"e72a9a31e5186f34","toSide":"top"},
		{"id":"e69038b493d015b1","fromNode":"c408ecd95be6eec6","fromSide":"left","toNode":"6d90f7420ad4fa4c","toSide":"right"},
		{"id":"413545f9d8dafdbc","fromNode":"7201b7ec21ac4a7f","fromSide":"bottom","toNode":"19e236c08e1cd95c","toSide":"top"},
		{"id":"d8246aeeb0d83fde","fromNode":"19e236c08e1cd95c","fromSide":"right","toNode":"1dddba44361a3d6b","toSide":"left","toEnd":"none"},
		{"id":"cff314b28f3d82ab","fromNode":"1dddba44361a3d6b","fromSide":"bottom","toNode":"c52e33f02c7c2a4b","toSide":"top"},
		{"id":"09cfb7345bb40faa","fromNode":"2f7091fa06505a38","fromSide":"left","toNode":"f66e0f00d2474d25","toSide":"right"},
		{"id":"e15d085942f080b9","fromNode":"8f0b3a940b08f896","fromSide":"left","toNode":"7201b7ec21ac4a7f","toSide":"right"},
		{"id":"6cbb25b6a667b3ea","fromNode":"7201b7ec21ac4a7f","fromSide":"top","toNode":"f17f6f971e3a3d97","toSide":"right"},
		{"id":"e4c5416a31d11543","fromNode":"f17f6f971e3a3d97","fromSide":"left","toNode":"bdc260f5d30b9041","toSide":"right"},
		{"id":"f6d00123cfa2e167","fromNode":"bdc260f5d30b9041","fromSide":"left","toNode":"30ef96602a72ef80","toSide":"right"},
		{"id":"bbe9b9674d0e54ae","fromNode":"b5cc8070c3e789a6","fromSide":"bottom","toNode":"cd56e7ef07977f42","toSide":"left"},
		{"id":"db4515e2e75eb0ec","fromNode":"cd56e7ef07977f42","fromSide":"top","toNode":"5524b74a8081c906","toSide":"left","toEnd":"none"},
		{"id":"10fedc2322eddd3d","fromNode":"cd56e7ef07977f42","fromSide":"right","toNode":"5919a6d55df86773","toSide":"left"},
		{"id":"7fd58db67d77efe8","fromNode":"cd56e7ef07977f42","fromSide":"bottom","toNode":"0ca0b6deef480023","toSide":"left"},
		{"id":"7e044408f0b66e62","fromNode":"da1c172456bc170b","fromSide":"right","toNode":"24d8ab13bfe3aeb3","toSide":"left"},
		{"id":"2783ac9ba0bb4f95","fromNode":"24d8ab13bfe3aeb3","fromSide":"top","toNode":"e37e28f848de39d7","toSide":"bottom","toEnd":"none"},
		{"id":"d1ecf25d0f8fcbd7","fromNode":"24d8ab13bfe3aeb3","fromSide":"bottom","toNode":"dc82cf486d53b545","toSide":"right"},
		{"id":"68a6ce6f1ceffe15","fromNode":"dc82cf486d53b545","fromSide":"bottom","toNode":"6b6767fcb45f60cb","toSide":"top","toEnd":"none"},
		{"id":"d9631babeb19ef52","fromNode":"e37e28f848de39d7","fromSide":"top","toNode":"a5ebbda3781740ce","toSide":"bottom"},
		{"id":"e3630f7e70c60453","fromNode":"24d8ab13bfe3aeb3","fromSide":"bottom","toNode":"bc524324179ef64d","toSide":"left"},
		{"id":"5991964b36deff25","fromNode":"bc524324179ef64d","fromSide":"bottom","toNode":"8209b85c0c7d19f0","toSide":"top","toEnd":"none"},
		{"id":"d460f14250f59488","fromNode":"8209b85c0c7d19f0","fromSide":"bottom","toNode":"eb6145babee1689a","toSide":"right"},
		{"id":"808f8a615f037315","fromNode":"eb6145babee1689a","fromSide":"left","toNode":"499573ce3a6c43a0","toSide":"top","toEnd":"none"},
		{"id":"289bc0fe1f4beee1","fromNode":"499573ce3a6c43a0","fromSide":"bottom","toNode":"6f4e6c75faa61373","toSide":"top"},
		{"id":"82ebc6e9659b9ff4","fromNode":"1bdb6dcf416621a9","fromSide":"right","toNode":"f814e73421939cc1","toSide":"left"},
		{"id":"e55dcc98fbb8672b","fromNode":"2348295d62a689e7","fromSide":"right","toNode":"a63539dc39924d33","toSide":"left","toEnd":"none"},
		{"id":"f5dff4f78601428c","fromNode":"e251be36e586b376","fromSide":"top","toNode":"daf43d28329ef202","toSide":"bottom","toEnd":"none"},
		{"id":"2bfe997e62e87b59","fromNode":"daf43d28329ef202","fromSide":"top","toNode":"05c8fce780bfe357","toSide":"bottom","toEnd":"none"},
		{"id":"60e37bbc3da2cad5","fromNode":"6c013a6a518dd473","fromSide":"top","toNode":"e7008db43b1fcbb9","toSide":"bottom","toEnd":"none"},
		{"id":"530c6a60f992ea65","fromNode":"2348295d62a689e7","fromSide":"top","toNode":"a95b25a7f64053ad","toSide":"bottom"},
		{"id":"62d5187f2beca5ad","fromNode":"a95b25a7f64053ad","fromSide":"top","toNode":"b998517b238c041d","toSide":"bottom"},
		{"id":"07d665ca4b657da5","fromNode":"a95b25a7f64053ad","fromSide":"right","toNode":"1e9ef2cd6d47522a","toSide":"left","toEnd":"none"},
		{"id":"391807dbe57f6958","fromNode":"1e9ef2cd6d47522a","fromSide":"bottom","toNode":"ad5cbb35693dfc48","toSide":"top"},
		{"id":"3b4b2c185bccd97e","fromNode":"ad5cbb35693dfc48","fromSide":"bottom","toNode":"abcb251f717677b7","toSide":"top","toEnd":"none"},
		{"id":"283752033cc2fd9b","fromNode":"a95b25a7f64053ad","fromSide":"left","toNode":"25ae8bd7d7f9a3ce","toSide":"right"},
		{"id":"093a87e0f0bcb70b","fromNode":"25ae8bd7d7f9a3ce","fromSide":"left","toNode":"e251be36e586b376","toSide":"right"},
		{"id":"dcb884682a46dd62","fromNode":"146b85e6c058d7fa","fromSide":"right","toNode":"e251be36e586b376","toSide":"bottom"},
		{"id":"4211d0e40183fc87","fromNode":"b49b48bc91206d65","fromSide":"right","toNode":"e251be36e586b376","toSide":"bottom"},
		{"id":"aa75eb73f6196264","fromNode":"e251be36e586b376","fromSide":"left","toNode":"6c013a6a518dd473","toSide":"bottom"},
		{"id":"85dfbef10d8eada6","fromNode":"2348295d62a689e7","fromSide":"top","toNode":"8ca4268fec5ea451","toSide":"bottom"},
		{"id":"2a5265962cb2edc1","fromNode":"8ca4268fec5ea451","fromSide":"top","toNode":"ee8a983d3274918c","toSide":"bottom","toEnd":"none"},
		{"id":"2041eaf73dd239b7","fromNode":"65fd700c3bab9cdc","fromSide":"top","toNode":"2348295d62a689e7","toSide":"left"},
		{"id":"6f33e9fbbf275dc4","fromNode":"753186917d3ffb53","fromSide":"top","toNode":"65fd700c3bab9cdc","toSide":"bottom"},
		{"id":"58f69f7f770ca766","fromNode":"b998517b238c041d","fromSide":"right","toNode":"5271543599d490ce","toSide":"left","toEnd":"none"},
		{"id":"b02a2498a884b638","fromNode":"b998517b238c041d","fromSide":"top","toNode":"fcfd0848b3d0d904","toSide":"bottom"},
		{"id":"03a62638031daf5e","fromNode":"fcfd0848b3d0d904","fromSide":"right","toNode":"af898681ba09d01d","toSide":"left","toEnd":"none"},
		{"id":"648ea9427b76e4b8","fromNode":"17c795d5fab07413","fromSide":"top","toNode":"cf2e6d88fb64a379","toSide":"right"},
		{"id":"b3969d90a84f35d6","fromNode":"cf2e6d88fb64a379","fromSide":"bottom","toNode":"2303d60da73b43a5","toSide":"top","toEnd":"none"},
		{"id":"16554b367ab96373","fromNode":"17c795d5fab07413","fromSide":"top","toNode":"f49af2810527ad88","toSide":"right"},
		{"id":"8a7fb5230f9ea9ff","fromNode":"f49af2810527ad88","fromSide":"bottom","toNode":"c4b70c90f9f82042","toSide":"top","toEnd":"none"},
		{"id":"248eb1b7433ea613","fromNode":"5d86b2ce750683b9","fromSide":"top","toNode":"17c795d5fab07413","toSide":"right"},
		{"id":"0b099a6771100979","fromNode":"17c795d5fab07413","fromSide":"top","toNode":"50faec9a68df477f","toSide":"right"},
		{"id":"9f309e882154dfcf","fromNode":"50faec9a68df477f","fromSide":"bottom","toNode":"656c0f69cd98d18c","toSide":"top","toEnd":"none"},
		{"id":"daa088c03cb338de","fromNode":"50faec9a68df477f","fromSide":"left","toNode":"0215e1ace18729fb","toSide":"right"},
		{"id":"75c58c991942816d","fromNode":"17c795d5fab07413","fromSide":"top","toNode":"9e4968242d56ad95","toSide":"left"},
		{"id":"9045b488bba843c2","fromNode":"9e4968242d56ad95","fromSide":"bottom","toNode":"2069473d5b3569b9","toSide":"top","toEnd":"none"},
		{"id":"e6cd6b0dd923f7f1","fromNode":"2069473d5b3569b9","fromSide":"bottom","toNode":"e2c9c82e93dd6813","toSide":"top"},
		{"id":"2ba2e80e8d6a338f","fromNode":"f49af2810527ad88","fromSide":"left","toNode":"308802cc540e6f5e","toSide":"right"},
		{"id":"56b79a4e8788a927","fromNode":"17c795d5fab07413","fromSide":"left","toNode":"9e98f672a4254d58","toSide":"right","label":"outputting"},
		{"id":"a27972e5502cd3cd","fromNode":"308802cc540e6f5e","fromSide":"bottom","toNode":"180744eb3870e2a3","toSide":"right"},
		{"id":"b58248397861b9c5","fromNode":"57b42deb74f24a8e","fromSide":"right","toNode":"0d8297ecd0ed408d","toSide":"left"},
		{"id":"c98cd7d7b729c840","fromNode":"b5cc8070c3e789a6","fromSide":"bottom","toNode":"16fd80fece40f06f","toSide":"left"},
		{"id":"e38e131a426a0358","fromNode":"93b6d555227227ff","fromSide":"bottom","toNode":"3291a11ec5e773bb","toSide":"top"},
		{"id":"4ef4461f1977dabe","fromNode":"35ddcda19be7e800","fromSide":"left","toNode":"57b42deb74f24a8e","toSide":"top"},
		{"id":"cc2bb2d1241d67df","fromNode":"4bbe1fabd56e12cb","fromSide":"bottom","toNode":"35ddcda19be7e800","toSide":"top","fromEnd":"arrow"},
		{"id":"e3c0ad939fd3feaa","fromNode":"4bbe1fabd56e12cb","fromSide":"right","toNode":"ec1eaf6d5075c3e3","toSide":"left"},
		{"id":"c47d08f87eb76aa3","fromNode":"ec1eaf6d5075c3e3","fromSide":"bottom","toNode":"11113fb0a85c5c32","toSide":"top","toEnd":"none"},
		{"id":"c7d7c74dafbcddd6","fromNode":"60c48aa5fc474fad","fromSide":"bottom","toNode":"84e1f94cf8225aac","toSide":"top"},
		{"id":"cf27c4fa66b96b28","fromNode":"84e1f94cf8225aac","fromSide":"bottom","toNode":"ec1eaf6d5075c3e3","toSide":"top"},
		{"id":"8c95081ad34ba6df","fromNode":"e9b28e423ec3618f","fromSide":"bottom","toNode":"a458f18465b7f273","toSide":"top"},
		{"id":"96a7b41f7e7f5160","fromNode":"e9b28e423ec3618f","fromSide":"bottom","toNode":"60c48aa5fc474fad","toSide":"top"},
		{"id":"a900093ffcdba541","fromNode":"a458f18465b7f273","fromSide":"right","toNode":"4c025db8ffc027ca","toSide":"left","toEnd":"none"},
		{"id":"9fa6ef48260cf6fa","fromNode":"16fd80fece40f06f","fromSide":"right","toNode":"93b6d555227227ff","toSide":"left"},
		{"id":"c95ee14e16a6efd8","fromNode":"df23f0e828ec35bc","fromSide":"bottom","toNode":"494ea559c692a1e4","toSide":"top"},
		{"id":"7ca27cd5b052ab2d","fromNode":"494ea559c692a1e4","fromSide":"right","toNode":"d079b91ce658c8b6","toSide":"left","toEnd":"none"},
		{"id":"2712ffd284c9eb9e","fromNode":"23806acd8b2e8fb9","fromSide":"right","toNode":"494ea559c692a1e4","toSide":"left","color":"4"},
		{"id":"8417b00b88b4a20b","fromNode":"e9b28e423ec3618f","fromSide":"left","toNode":"3291a11ec5e773bb","toSide":"top"},
		{"id":"a1d2254e8c46d4ad","fromNode":"93b6d555227227ff","fromSide":"right","toNode":"e9b28e423ec3618f","toSide":"top"},
		{"id":"be2ddfc32244b904","fromNode":"93b6d555227227ff","fromSide":"right","toNode":"df23f0e828ec35bc","toSide":"top"},
		{"id":"5bd9066e55c35956","fromNode":"ad5cbb35693dfc48","fromSide":"right","toNode":"b221d4ec9f87e4da","toSide":"left"},
		{"id":"9176794a1026d230","fromNode":"f814e73421939cc1","fromSide":"right","toNode":"2348295d62a689e7","toSide":"left"},
		{"id":"2facbd1287816d8d","fromNode":"4bbe1fabd56e12cb","fromSide":"left","toNode":"8b983b896c884061","toSide":"bottom"},
		{"id":"426dc79d2fa677d3","fromNode":"f81c33d3487ba93f","fromSide":"bottom","toNode":"60c48aa5fc474fad","toSide":"top","color":"4"}
	]
}