{
	"nodes":[
		{"type":"text","text":"any information that can be moved, processed, or stored by a computer","id":"2381f2bb9769ea31","x":-1823,"y":-227,"width":370,"height":100},
		{"type":"text","text":"Data","id":"894a4381786c971f","x":-2153,"y":-202,"width":172,"height":50,"color":"6"},
		{"type":"text","text":"value","id":"b181c2d55b1b1686","x":-2153,"y":-77,"width":172,"height":50,"color":"6"},
		{"type":"text","text":"RAM (random access memory)","id":"27af628e8272bbb2","x":-1783,"y":-81,"width":290,"height":60,"color":"6"},
		{"type":"text","text":"Memory, that is available for your programs to use.","id":"0489b325750ad0fe","x":-1393,"y":-82,"width":300,"height":60},
		{"type":"text","text":"object","id":"79e30db5a481dffc","x":-1935,"y":133,"width":112,"height":58,"color":"6"},
		{"type":"text","text":"a region of storage (usually memory) that has a value and other associated properties (in C++1.1 — Statements and the structure of a program term _object_ excludes [functions](notes/studies/proga/c++/1.1%20—%20Statements%20and%20the%20structure%20of%20a%20program.canvas))","id":"f41e6f2c1859f9b5","x":-2158,"y":-427,"width":558,"height":128},
		{"type":"text","text":"tells the compiler what type of value (e.g. a number, a letter, text, etc…) the variable will store","id":"8913c7d8f36d6148","x":-2539,"y":-524,"width":338,"height":97},
		{"type":"text","text":"A single piece of data, stored in memory somewhere","id":"251b09b241fb8733","x":-2522,"y":-86,"width":305,"height":65},
		{"type":"text","text":"the type of a variable must be known at compile-time","id":"58bb6b4ef2cafb6a","x":-3000,"y":-374,"width":402,"height":73,"color":"2"},
		{"type":"text","text":"compile-time","id":"403b5d8967864828","x":-2924,"y":-584,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"when the program is compiled","id":"278b8d99ad88bf26","x":-2924,"y":-687,"width":250,"height":73},
		{"type":"text","text":"instantiated object","id":"9218545ce5e6abbe","x":-2004,"y":290,"width":250,"height":60},
		{"type":"text","text":"instance","id":"326e28fd81d3886d","x":-1959,"y":380,"width":160,"height":50,"color":"6"},
		{"type":"text","text":"Instantiation","id":"8d2d7e75817fccea","x":-1643,"y":375,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"means the object will be created and assigned a memory address","id":"01c4ec290fd5855e","x":-1643,"y":473,"width":249,"height":90},
		{"type":"text","text":"when the program is run","id":"cf626b8aa1163358","x":-1299,"y":375,"width":250,"height":60},
		{"type":"text","text":"runtime","id":"e8559fb1ab406c49","x":-1243,"y":283,"width":138,"height":50,"color":"6"},
		{"type":"text","text":"A named object","id":"4eca4e4e87e63dee","x":-2738,"y":290,"width":171,"height":85},
		{"type":"text","text":"identifier","id":"2f3a01cd722afc87","x":-2713,"y":677,"width":121,"height":50,"color":"6"},
		{"type":"text","text":"```cpp\nint x; // define a variable named x, of type int\n```","id":"21a50713de00f4ad","x":-2924,"y":-152,"width":256,"height":114},
		{"type":"text","text":"what the linker needs","id":"a3905169f48546af","x":-2924,"y":-12,"width":250,"height":60},
		{"type":"text","text":"actually instantiates/implements this identifier","id":"d3e64fbd6e668fb2","x":-2921,"y":71,"width":250,"height":114},
		{"type":"text","text":"Definition (of variable)","id":"8435f801d55310db","x":-2921,"y":223,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"Declaration(of variable)","id":"3b45a175fd7564db","x":-3250,"y":223,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"what the compiler needs","id":"37a978a09ac3afbb","x":-3250,"y":-12,"width":250,"height":60},
		{"type":"text","text":" introduces an identifier and describes its type","id":"f10a09564d9d668b","x":-3250,"y":71,"width":250,"height":114},
		{"type":"text","text":"copy assignment (assignment) (of variable)","id":"4665776d338539e6","x":-3484,"y":179,"width":192,"height":104,"color":"6"},
		{"type":"text","text":"assignment operator","id":"eba026bcf3caff97","x":-3484,"y":64,"width":192,"height":86,"color":"6"},
		{"type":"text","text":"process of giving variable a value (after definition of variable)","id":"ef2462e0efa2a84e","x":-3879,"y":192,"width":350,"height":78},
		{"type":"text","text":"```cpp\nint width; // define an integer variable named width\nwidth = 5; // copy assignment of value 5 into variable width\n\n// variable width now has value 5\n```","id":"95053a777fa1b46e","x":-4020,"y":-120,"width":632,"height":168},
		{"type":"text","text":"The _= operator_","id":"46f0484551f5065c","x":-3684,"y":81,"width":180,"height":53},
		{"type":"text","text":"combination of defining the variable and providing an initial value for the variable","id":"a664d41ebdbc3757","x":-4148,"y":620,"width":319,"height":94},
		{"type":"text","text":"initialization (of variable)","id":"20bbb82a70a892ca","x":-3804,"y":636,"width":196,"height":62,"color":"6"},
		{"type":"text","text":"Default initialization","id":"547bfaf80601526a","x":-4099,"y":878,"width":175,"height":65,"color":"5"},
		{"type":"text","text":"Copy initialization","id":"427746acdde354c1","x":-3784,"y":878,"width":160,"height":65,"color":"5"},
		{"type":"text","text":"```cpp\nint x;\n```","id":"236415b49f3d7bd0","x":-4136,"y":985,"width":250,"height":61},
		{"type":"text","text":"```cpp\nint width = 5; // copy initialization of value 5 into variable width\n```","id":"17f32e6a69e87164","x":-3847,"y":1007,"width":286,"height":129},
		{"type":"text","text":"```cpp\nint x();  // forward declaration of function x\nint x(0); // definition of variable x with initializer 0\n```","id":"f41a045addfd3dee","x":-3669,"y":1163,"width":383,"height":129},
		{"type":"text","text":"Direct initialization","id":"27b5eff73d58796b","x":-3561,"y":880,"width":167,"height":65,"color":"5"},
		{"type":"text","text":"```cpp\nint a;         // no initializer (default initialization)\nint b = 5;     // initializer after equals sign (copy initialization)\nint c( 6 );    // initializer in parenthesis (direct initialization)\n\n// List initialization methods (C++11) (preferred)\nint d { 7 };   // initializer in braces (direct list initialization)\nint e = { 8 }; // initializer in braces after equals sign (copy list initialization)\nint f {};      // initializer is empty braces (value initialization)\n```","id":"39fa61d629c3329a","x":-5068,"y":490,"width":786,"height":260},
		{"type":"text","text":"also called uniform initialization or brace initialization","id":"967e6e2dcf5e6b6a","x":-5068,"y":880,"width":330,"height":62},
		{"type":"text","text":"List initialization (the best one)","id":"4d5c53d3a6949449","x":-4698,"y":878,"width":300,"height":65,"color":"5"},
		{"type":"text","text":"**Rule**: every C++ program must have a special function named *main*. When the program is run? the statements inside of main are executed in sequential order.","id":"d73ea085f65b7c9a","x":-1000,"y":305,"width":440,"height":128,"color":"4"},
		{"type":"text","text":"```cpp\nint main()\n{\n//dosmthng\nreturn 0;\n}\n```","id":"ecc39d722013f400","x":-930,"y":482,"width":300,"height":157},
		{"type":"text","text":"```cpp\nint foo()\n{\n//dosmthng\nreturn 0;\n}\n```","id":"504393a3a2c93bd2","x":-410,"y":440,"width":254,"height":159},
		{"type":"text","text":"You may also create your own functions","id":"11caeaf0b5d8f1e9","x":-406,"y":322,"width":250,"height":70},
		{"type":"text","text":"the name of a variable (or function, type, or other kind of item) ","id":"0c6806c76987561a","x":-2567,"y":641,"width":261,"height":122},
		{"type":"text","text":"multiple initialization","id":"2fadd07ae7d8ab51","x":-3816,"y":1483,"width":250,"height":60,"color":"5"},
		{"type":"text","text":"Using the value from an uninitialized variable is  example of undefined behavior","id":"548314d2c6fa1240","x":-4882,"y":1562,"width":444,"height":68},
		{"type":"text","text":"*Rule*\nTake care to avoid all situations that result in undefined behavior, such as using uninitialized variables.","id":"a3d07ed4029a6f03","x":-5311,"y":1639,"width":373,"height":153,"color":"4"},
		{"type":"text","text":"Undefined behavior (UB)","id":"54a85eb3b6830698","x":-4771,"y":1682,"width":221,"height":67,"color":"6"},
		{"type":"text","text":"*Best practice*\nAvoid implementation-defined and unspecified behavior whenever possible, as they may cause your program to malfunction on other implementations.","id":"7ef6000d5beac15d","x":-5311,"y":1818,"width":373,"height":192,"color":"4"},
		{"type":"text","text":"Implementation-defined behavior","id":"0f44bff96aebb9a4","x":-4771,"y":1853,"width":221,"height":80,"color":"6"},
		{"type":"text","text":"is the result of executing code whose behavior is not well-defined by the C++ language.","id":"380ebd555d850a10","x":-4491,"y":1665,"width":356,"height":102},
		{"type":"text","text":"Using the values of uninitialized variables can lead to unexpected results","id":"4de0c4b36474375f","x":-5211,"y":1434,"width":297,"height":108,"color":"1"},
		{"type":"text","text":"A variable that has not been given a known value (usually through initialization or assignment)","id":"5f0fb4e9d61278e0","x":-4491,"y":1444,"width":356,"height":88},
		{"type":"text","text":"uninitialized variable","id":"c3206cd81cba2293","x":-4771,"y":1454,"width":221,"height":68,"color":"6"},
		{"type":"text","text":"# Function","id":"eed5de6151cdaab5","x":-398,"y":114,"width":234,"height":103,"color":"6"},
		{"type":"text","text":"is a collection of statements that get executed sequentially (in order, from top to bottom).","id":"2dca05ef0f9f89ab","x":-111,"y":105,"width":434,"height":122},
		{"type":"text","text":"a library file is a collection of precompiled code that has been “packaged up” for reuse in other programs. The C++ Standard Library is a library that ships with C++. It contains additional functionality to use in your programs.","id":"eeea1f7c403b5793","x":-1040,"y":-95,"width":434,"height":180},
		{"type":"text","text":"# C++ Standard Library","id":"15604660598875de","x":-560,"y":-87,"width":250,"height":163,"color":"6"},
		{"type":"text","text":"`<iostream>` library","id":"de134d776810d12f","x":-535,"y":-164,"width":200,"height":60,"color":"5"},
		{"type":"text","text":"a mathematical process involving zero or more input values (called operands) that produces a new value (called an _output value_).","id":"1f85b4794290b394","x":937,"y":-955,"width":280,"height":167},
		{"type":"text","text":"Nullary (1)","id":"e635837a64995439","x":974,"y":-487,"width":147,"height":53,"color":"5"},
		{"type":"text","text":"Unary","id":"365b7d3fb507459f","x":974,"y":-399,"width":147,"height":50,"color":"5"},
		{"type":"text","text":"`-`   (-5)","id":"5301c6ad3492f4f3","x":1137,"y":-405,"width":122,"height":63},
		{"type":"text","text":"literal","id":"f488e6677db9e675","x":1388,"y":-605,"width":160,"height":60,"color":"6"},
		{"type":"text","text":"aka literal constant","id":"92592c85a5dfe21d","x":1388,"y":-520,"width":160,"height":60},
		{"type":"text","text":"a fixed value that has been inserted directly into the source code","id":"5d7494ece7bf0191","x":1579,"y":-624,"width":250,"height":97},
		{"type":"text","text":"```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << 5 << '\\n'; // print the value of a literal\n\n    int x { 5 };\n    std::cout << x << '\\n'; // print the value of a variable\n    return 0;\n}\n```","id":"0948f4bd9ecf476a","x":1879,"y":-711,"width":762,"height":271},
		{"type":"text","text":"- Literals are values that are inserted directly into the source code. These values usually appear directly in the executable code.\n- Objects and variables represent memory locations that hold values. These values can be fetched on demand.","id":"102f38a3a4354255","x":2062,"y":-926,"width":548,"height":160},
		{"type":"text","text":"operation","id":"8b59d1bbb0cb66ee","x":746,"y":-904,"width":160,"height":64,"color":"6"},
		{"type":"text","text":"`+`  `-`  `*` `/`","id":"9694043f2fc16054","x":974,"y":-315,"width":250,"height":60},
		{"type":"text","text":"llows us to send data to the console to be printed as text","id":"f0ba7acf60b05fc6","x":-234,"y":-387,"width":269,"height":69},
		{"type":"text","text":"`std::cout` variable","id":"16230eca7bda6774","x":-225,"y":-303,"width":250,"height":60},
		{"type":"text","text":"buffered","id":"c7e5dadb2dd26831","x":-164,"y":-468,"width":130,"height":51},
		{"type":"text","text":"```cpp\n#include <iostream>  // for std::cout and std::cin\n\nint main()\n{\n    std::cout << \"Enter a number: \"; // ask user for a number\n\n    int x{ }; // define variable x to hold user input (and zero-initialize it)\n    std::cin >> x; // get number from keyboard and store it in variable x\n\n    std::cout << \"You entered \" << x << '\\n';\n    return 0;\n}\n```","id":"5b4c5d61c155c51c","x":-379,"y":-1332,"width":610,"height":395},
		{"type":"text","text":"`std::endl` variable","id":"b9f151998dabe7f3","x":-817,"y":-777,"width":250,"height":60},
		{"type":"text","text":"`\\n` variable (prefered)","id":"62f42842d32f5d38","x":-817,"y":-866,"width":250,"height":60},
		{"type":"text","text":"```cpp\n#include <iostream> // for std::cout\n\nint main()\n{\n    int x{ 5 };\n    std::cout << \"x is equal to: \" << x << '\\n'; // Using '\\n' standalone\n    std::cout << \"And that's all, folks!\\n\"; // Using '\\n' embedded into a double-quoted piece of text (note: no single quotes when used this way)\n    return 0;std::endl\n}\n```","id":"f2d9bc78016e7681","x":-973,"y":-1287,"width":563,"height":360},
		{"type":"text","text":"`std::cin` variable","id":"36be359dc4837cf3","x":-199,"y":-788,"width":250,"height":60},
		{"type":"text","text":"insertion operator `<<`","id":"ec4f730dbdaaf19a","x":400,"y":-301,"width":256,"height":58},
		{"type":"text","text":"return value","id":"773fce5136881a62","x":528,"y":-907,"width":170,"height":71,"color":"6"},
		{"type":"text","text":"the output value of an operation","id":"9a2e73432d605253","x":463,"y":-1008,"width":301,"height":71},
		{"type":"text","text":"# Identifier naming rules:\n- The identifier can not be a keyword\n- The identifier can only be composed of letters (lower or upper case), numbers, and the underscore character. That means the name can not contain symbols (except the underscore) nor whitespace (spaces or tabs).\n- The identifier must begin with a letter (lower or upper case) or an underscore. It can not start with a number.\n- C++ is case sensitive, and thus distinguishes between lower and upper case letters. `nvalue` is different than `nValue` is different than `NVALUE`.\n\n","id":"b873aa366261f219","x":-3356,"y":507,"width":618,"height":391,"color":"4"},
		{"type":"text","text":"[c++](notes/areas/programming/c++/textbook/0.%20CPP.canvas)","id":"78f83988416a2fb9","x":-245,"y":-200,"width":134,"height":72,"color":"3"},
		{"type":"text","text":"[function](notes/studies/programming/c++/2.0%20-%20functions%20and%20files.canvas)","id":"ba090d0585c9b810","x":-2633,"y":980,"width":133,"height":60,"color":"6"},
		{"type":"text","text":"- **expression** - a combination of literals, variables, operators, and function calls that calculates a single value.\n- **evaluation** - the process of executing an expression\n- **result** of the expression - the single produced value\n`type identifier { expression };`\n- **expression statement** - is a statement that consists of an expression followed by a semicolon. When the expression statement is executed, the expression will be evaluated.\n- What is the difference between a statement and an expression?\n\tStatements are used when we want the program to perform an action. Expressions are used when we want the program to calculate a value.\n- Function calls are part of an expression","id":"8d2a6b0f1acc8653","x":-2187,"y":610,"width":776,"height":330,"color":"1"},
		{"type":"text","text":"If two identical identifiers are introduced into the same program in a way that the compiler or linker can’t tell them apart, the compiler or linker will produce an error","id":"915d52e55690f213","x":-2180,"y":1060,"width":409,"height":130},
		{"type":"text","text":"naming collision (naming conflict)","id":"585b028976626966","x":-2414,"y":1087,"width":194,"height":75,"color":"6"},
		{"type":"text","text":"is a region that allows you to declare names inside of it for the purpose of disambiguation (разотождествление)","id":"bb7782fb204fcb3a","x":-2180,"y":1240,"width":423,"height":102},
		{"type":"text","text":"provides a scope region","id":"e6aa81c3f47f955a","x":-2180,"y":1361,"width":250,"height":60},
		{"type":"text","text":"namespace scope","id":"d625838cbcbea0fb","x":-1744,"y":1361,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"A name declared in a namespace won’t be mistaken for an identical name declared in another scope.","id":"5b338216769b2b1d","x":-1433,"y":1335,"width":358,"height":113},
		{"type":"text","text":"namespace","id":"8da4984e855afc2e","x":-2414,"y":1261,"width":194,"height":60,"color":"6"},
		{"type":"text","text":"keywords (92)","id":"b3b52d5debe52647","x":-3174,"y":1072,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"The std namespace","id":"bc6772eaee32523f","x":-2674,"y":1680,"width":215,"height":50,"color":"5"},
		{"type":"text","text":"When you use an identifier that is defined inside a namespace (such as the _std_ namespace), you have to tell the compiler that the identifier lives inside the namespace.","id":"d56ba826851f769d","x":-2782,"y":1421,"width":431,"height":135},
		{"type":"text","text":"- alignas\n- alignof\n- and\n- and_eq\n- asm\n- auto\n- bitand\n- bitor\n- bool\n- break\n- case\n- catch\n- char\n- char8_t (since C++20)\n- char16_t\n- char32_t\n- class\n- compl\n- concept (since C++20)\n- const\n- consteval (since C++20)\n- constexpr\n- constinit (since C++20)\n- const_cast\n- continue\n- co_await (since C++20)\n- co_return (since C++20)\n- co_yield (since C++20)\n- decltype\n- default\n- delete\n- do\n- double\n- dynamic_cast\n- else\n- enum\n- explicit\n- export\n- extern\n- false\n- float\n- for\n- friend\n- goto\n- if\n- inline\n- int\n- long\n- mutable\n- namespace\n- new\n- noexcept\n- not\n- not_eq\n- nullptr\n- operator\n- or\n- or_eq\n- private\n- protected\n- public\n- register\n- reinterpret_cast\n- requires (since C++20)\n- return\n- short\n- signed\n- sizeof\n- static\n- static_assert\n- static_cast\n- struct\n- switch\n- template\n- this\n- thread_local\n- throw\n- true\n- try\n- typedef\n- typeid\n- typename\n- union\n- unsigned\n- using\n- virtual\n- void\n- volatile\n- wchar_t\n- while\n- xor\n- xor_eq","id":"273d94d9b3062119","x":-3231,"y":1192,"width":364,"height":399},
		{"type":"text","text":"```cpp\nint a = 5, b = 6;          // copy initialization\nint c( 7 ), d( 8 );        // direct initialization\nint e { 9 }, f { 10 };     // direct brace initialization (preferred)\nint g = { 9 }, h = { 10 }; // copy brace initialization\nint i {}, j {};            // value initialization\n```","id":"f854ab63a08d80d9","x":-4056,"y":1572,"width":731,"height":186},
		{"type":"text","text":"means the behavior of some syntax is left up to the implementation (the compiler) to define. Such behaviors must be consistent and documented, but different compilers may produce different results.","id":"ad7d577c0e9d6168","x":-4491,"y":1797,"width":367,"height":192},
		{"type":"text","text":"```cpp\n#include <iostream>\n\nint main()\n{\n\tstd::cout << sizeof(int); // print how many bytes of memory an int value takes\n\n\treturn 0;\n}\n```","id":"64c1095b3aa5ae62","x":-4584,"y":2035,"width":553,"height":265},
		{"type":"text","text":"```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello world!\"; // when we say cout, we mean the cout defined in the std namespace\n    return 0;\n}\n```","id":"359ed2bef86a2c9b","x":-3919,"y":1797,"width":870,"height":254},
		{"type":"text","text":"```cpp\n#include <iostream> // handled by preprocessor\n\n// All of the following statements are part of the global namespace\nvoid foo();    // okay: function forward declaration in the global namespace\nint x;         // compiles but strongly discouraged: uninitialized variable definition in the global namespace\nint y { 5 };   // compiles but discouraged: variable definition with initializer in the global namespace\nx = 5;         // compile error: executable statements are not allowed in the global namespace\n\nint main()     // okay: function definition in the global namespace\n{\n    return 0;\n}\n\nvoid goo();    // okay: another function forward declaration in the global namespace\n```","id":"9165fc239cf6e54c","x":-1040,"y":1429,"width":1164,"height":403},
		{"type":"text","text":"global namespace (the global scope)","id":"4d4206da16253d33","x":-1730,"y":1581,"width":222,"height":100,"color":"5"},
		{"type":"text","text":"qualified name","id":"0e89d72626208bcf","x":-2187,"y":1818,"width":186,"height":64,"color":"6"},
		{"type":"text","text":"When an identifier includes a namespace prefix it is called","id":"c44e27dba60b0d8d","x":-1958,"y":1805,"width":428,"height":91},
		{"type":"text","text":"[data type](notes/studies/programming/c++/4.0%20-%20Fundamental%20Data%20Types.canvas)","id":"b98f59e5332cdc4b","x":-2446,"y":-362,"width":152,"height":50,"color":"6"},
		{"type":"text","text":"Ternary (1)","id":"29be7bbf8771d48f","x":969,"y":-545,"width":152,"height":50,"color":"5"},
		{"type":"text","text":"[operator](notes/studies/programming/c++/5.0%20-%20Operators.canvas)","id":"b1440605eac69ef4","x":764,"y":-630,"width":134,"height":50,"color":"6"},
		{"type":"text","text":"statement","id":"58dfad1f2395d427","x":-19,"y":309,"width":250,"height":60,"color":"6"},
		{"type":"text","text":"is a type of instruction that causes the program to perform some action  ","id":"6d83dc0ca318f061","x":366,"y":299,"width":434,"height":80},
		{"type":"text","text":"Binary","id":"7ffce5fff92d0850","x":700,"y":-468,"width":135,"height":63,"color":"5"},
		{"type":"text","text":"extraction operator `>>`","id":"034ecf51b65fbfb4","x":400,"y":-464,"width":256,"height":55},
		{"type":"text","text":"variable","id":"f3421d1e32a3dc3a","x":-2726,"y":405,"width":148,"height":68,"color":"6"},
		{"type":"text","text":"```cpp\nint width { 5 };    // direct list initialization of value 5 into variable width\nint height = { 6 }; // copy list initialization of value 6 into variable height\nint depth {};       // value initialization (see next section)\n```","id":"e7f274793c9bb9c6","x":-4945,"y":1046,"width":790,"height":182}
	],
	"edges":[
		{"id":"7bdb3d39268c95de","fromNode":"2dca05ef0f9f89ab","fromSide":"bottom","toNode":"58dfad1f2395d427","toSide":"top"},
		{"id":"e6d64d3b7f8ebdce","fromNode":"eed5de6151cdaab5","fromSide":"right","toNode":"2dca05ef0f9f89ab","toSide":"left","toEnd":"none"},
		{"id":"3906f81d1e4ac209","fromNode":"d73ea085f65b7c9a","fromSide":"bottom","toNode":"ecc39d722013f400","toSide":"top"},
		{"id":"7d993f0211c17938","fromNode":"58dfad1f2395d427","fromSide":"right","toNode":"6d83dc0ca318f061","toSide":"left","toEnd":"none"},
		{"id":"b65fd797b750494d","fromNode":"11caeaf0b5d8f1e9","fromSide":"top","toNode":"eed5de6151cdaab5","toSide":"bottom"},
		{"id":"6cb4d18e47089d35","fromNode":"11caeaf0b5d8f1e9","fromSide":"bottom","toNode":"504393a3a2c93bd2","toSide":"top"},
		{"id":"9d159ac9e28f93b4","fromNode":"2381f2bb9769ea31","fromSide":"bottom","toNode":"27af628e8272bbb2","toSide":"top"},
		{"id":"d9b496ab9ae87278","fromNode":"894a4381786c971f","fromSide":"right","toNode":"2381f2bb9769ea31","toSide":"left","toEnd":"none"},
		{"id":"d09d99331ef1e22f","fromNode":"894a4381786c971f","fromSide":"bottom","toNode":"b181c2d55b1b1686","toSide":"top"},
		{"id":"ec1dcd2cfe3f6af8","fromNode":"894a4381786c971f","fromSide":"left","toNode":"b98f59e5332cdc4b","toSide":"bottom"},
		{"id":"922c46dbe7c0c208","fromNode":"b181c2d55b1b1686","fromSide":"left","toNode":"251b09b241fb8733","toSide":"right","toEnd":"none"},
		{"id":"e1d013fd1e929b96","fromNode":"79e30db5a481dffc","fromSide":"left","toNode":"b181c2d55b1b1686","toSide":"bottom"},
		{"id":"0e29458ae0b3498c","fromNode":"27af628e8272bbb2","fromSide":"right","toNode":"0489b325750ad0fe","toSide":"left","toEnd":"none"},
		{"id":"0ddcf88f8a01408a","fromNode":"79e30db5a481dffc","fromSide":"top","toNode":"f41e6f2c1859f9b5","toSide":"bottom","toEnd":"none"},
		{"id":"a1c2a7641ca8b1ab","fromNode":"79e30db5a481dffc","fromSide":"bottom","toNode":"9218545ce5e6abbe","toSide":"top"},
		{"id":"768c87a31d0f0aef","fromNode":"79e30db5a481dffc","fromSide":"left","toNode":"f3421d1e32a3dc3a","toSide":"right"},
		{"id":"25e64b1f5a796d55","fromNode":"2f3a01cd722afc87","fromSide":"top","toNode":"79e30db5a481dffc","toSide":"left"},
		{"id":"b08622b600980a7b","fromNode":"8435f801d55310db","fromSide":"top","toNode":"d3e64fbd6e668fb2","toSide":"bottom","toEnd":"none"},
		{"id":"ac5fec580e1fd177","fromNode":"f3421d1e32a3dc3a","fromSide":"left","toNode":"8435f801d55310db","toSide":"bottom"},
		{"id":"a9649dc99c21a58d","fromNode":"f3421d1e32a3dc3a","fromSide":"left","toNode":"3b45a175fd7564db","toSide":"bottom"},
		{"id":"261ff478782b4316","fromNode":"a3905169f48546af","fromSide":"top","toNode":"21a50713de00f4ad","toSide":"bottom"},
		{"id":"01c42c2798947dd0","fromNode":"d3e64fbd6e668fb2","fromSide":"top","toNode":"a3905169f48546af","toSide":"bottom"},
		{"id":"283df712db2a3dc0","fromNode":"8913c7d8f36d6148","fromSide":"bottom","toNode":"b98f59e5332cdc4b","toSide":"top","toEnd":"none"},
		{"id":"57ff62b1431c0394","fromNode":"b98f59e5332cdc4b","fromSide":"left","toNode":"58bb6b4ef2cafb6a","toSide":"right"},
		{"id":"8fac610b958145e7","fromNode":"f3421d1e32a3dc3a","fromSide":"top","toNode":"4eca4e4e87e63dee","toSide":"bottom","toEnd":"none"},
		{"id":"bf38a8efc23d18e1","fromNode":"2f3a01cd722afc87","fromSide":"top","toNode":"f3421d1e32a3dc3a","toSide":"bottom"},
		{"id":"26006224c518a77b","fromNode":"403b5d8967864828","fromSide":"bottom","toNode":"58bb6b4ef2cafb6a","toSide":"top"},
		{"id":"c9de328d2a08ae95","fromNode":"403b5d8967864828","fromSide":"top","toNode":"278b8d99ad88bf26","toSide":"bottom","toEnd":"none"},
		{"id":"a9d9931525b05e8a","fromNode":"326e28fd81d3886d","fromSide":"top","toNode":"9218545ce5e6abbe","toSide":"bottom","toEnd":"none"},
		{"id":"7f43ea94f8d2967f","fromNode":"8d2d7e75817fccea","fromSide":"left","toNode":"326e28fd81d3886d","toSide":"right"},
		{"id":"4c3b1279bf38a6c1","fromNode":"8d2d7e75817fccea","fromSide":"bottom","toNode":"01c4ec290fd5855e","toSide":"top","toEnd":"none"},
		{"id":"2c58678606800fd5","fromNode":"cf626b8aa1163358","fromSide":"left","toNode":"8d2d7e75817fccea","toSide":"right"},
		{"id":"dee2978d3944bff9","fromNode":"e8559fb1ab406c49","fromSide":"bottom","toNode":"cf626b8aa1163358","toSide":"top","toEnd":"none"},
		{"id":"d2609ab6ec0ff19c","fromNode":"2f3a01cd722afc87","fromSide":"right","toNode":"0c6806c76987561a","toSide":"left","toEnd":"none"},
		{"id":"68d6752df38401ba","fromNode":"d73ea085f65b7c9a","fromSide":"right","toNode":"eed5de6151cdaab5","toSide":"left"},
		{"id":"f08c2e6f3dd55a06","fromNode":"79e30db5a481dffc","fromSide":"right","toNode":"eed5de6151cdaab5","toSide":"left"},
		{"id":"43a820070ce9c47e","fromNode":"27af628e8272bbb2","fromSide":"bottom","toNode":"79e30db5a481dffc","toSide":"right"},
		{"id":"a32c6a4d8d113293","fromNode":"427746acdde354c1","fromSide":"bottom","toNode":"17f32e6a69e87164","toSide":"top"},
		{"id":"4cc9f21b7973c9e0","fromNode":"20bbb82a70a892ca","fromSide":"bottom","toNode":"427746acdde354c1","toSide":"top"},
		{"id":"67bfe675ee0baba8","fromNode":"20bbb82a70a892ca","fromSide":"left","toNode":"a664d41ebdbc3757","toSide":"right","toEnd":"none"},
		{"id":"e697e0d6ec9eea12","fromNode":"20bbb82a70a892ca","fromSide":"bottom","toNode":"547bfaf80601526a","toSide":"top"},
		{"id":"333598e548c02864","fromNode":"20bbb82a70a892ca","fromSide":"bottom","toNode":"27b5eff73d58796b","toSide":"top"},
		{"id":"71f2e2a0fd2021a1","fromNode":"20bbb82a70a892ca","fromSide":"bottom","toNode":"4d5c53d3a6949449","toSide":"top"},
		{"id":"b61bd2627f1ffa1e","fromNode":"2fadd07ae7d8ab51","fromSide":"bottom","toNode":"f854ab63a08d80d9","toSide":"top"},
		{"id":"34860c30acea1c9a","fromNode":"e7f274793c9bb9c6","fromSide":"bottom","toNode":"2fadd07ae7d8ab51","toSide":"top"},
		{"id":"ab30fb5f33b660d3","fromNode":"f41a045addfd3dee","fromSide":"bottom","toNode":"2fadd07ae7d8ab51","toSide":"top"},
		{"id":"d3780dc3fb5e2531","fromNode":"17f32e6a69e87164","fromSide":"bottom","toNode":"2fadd07ae7d8ab51","toSide":"top"},
		{"id":"b7ed0c401aba04cf","fromNode":"4d5c53d3a6949449","fromSide":"bottom","toNode":"e7f274793c9bb9c6","toSide":"top"},
		{"id":"e9941121fa96b40c","fromNode":"4d5c53d3a6949449","fromSide":"left","toNode":"967e6e2dcf5e6b6a","toSide":"right","toEnd":"none"},
		{"id":"09363a787a5b321a","fromNode":"547bfaf80601526a","fromSide":"bottom","toNode":"236415b49f3d7bd0","toSide":"top"},
		{"id":"f2bff1689b8fb8a7","fromNode":"27b5eff73d58796b","fromSide":"bottom","toNode":"f41a045addfd3dee","toSide":"top"},
		{"id":"1add843071d754ae","fromNode":"3b45a175fd7564db","fromSide":"top","toNode":"f10a09564d9d668b","toSide":"bottom","toEnd":"none"},
		{"id":"cf676928dcf668b5","fromNode":"f10a09564d9d668b","fromSide":"top","toNode":"37a978a09ac3afbb","toSide":"bottom","toEnd":"none"},
		{"id":"f745057c2ce7107c","fromNode":"f3421d1e32a3dc3a","fromSide":"left","toNode":"4665776d338539e6","toSide":"bottom"},
		{"id":"c24c6309ef127097","fromNode":"4665776d338539e6","fromSide":"top","toNode":"eba026bcf3caff97","toSide":"bottom"},
		{"id":"16d478f46075d0f1","fromNode":"eba026bcf3caff97","fromSide":"left","toNode":"46f0484551f5065c","toSide":"right","toEnd":"none"},
		{"id":"75330ad9f48896c2","fromNode":"4665776d338539e6","fromSide":"left","toNode":"ef2462e0efa2a84e","toSide":"right","toEnd":"none"},
		{"id":"32eb7d1886261a26","fromNode":"ef2462e0efa2a84e","fromSide":"top","toNode":"95053a777fa1b46e","toSide":"bottom"},
		{"id":"c950408f36a8fec1","fromNode":"a664d41ebdbc3757","fromSide":"left","toNode":"39fa61d629c3329a","toSide":"right"},
		{"id":"f0d106c935117c7e","fromNode":"f3421d1e32a3dc3a","fromSide":"left","toNode":"20bbb82a70a892ca","toSide":"top"},
		{"id":"0f18f88d1fafa7d6","fromNode":"b873aa366261f219","fromSide":"right","toNode":"2f3a01cd722afc87","toSide":"left"},
		{"id":"4422c4356d3f0dfa","fromNode":"15604660598875de","fromSide":"top","toNode":"de134d776810d12f","toSide":"bottom"},
		{"id":"64d5f1eac8af6ddf","fromNode":"de134d776810d12f","fromSide":"top","toNode":"16230eca7bda6774","toSide":"left"},
		{"id":"a93a91ebd1f6bcd9","fromNode":"16230eca7bda6774","fromSide":"top","toNode":"f0ba7acf60b05fc6","toSide":"bottom","toEnd":"none"},
		{"id":"ee39061caf37b183","fromNode":"5d7494ece7bf0191","fromSide":"right","toNode":"0948f4bd9ecf476a","toSide":"left"},
		{"id":"3825c95b8382d54c","fromNode":"f488e6677db9e675","fromSide":"right","toNode":"5d7494ece7bf0191","toSide":"left","toEnd":"none"},
		{"id":"3a2e00505617db3f","fromNode":"f488e6677db9e675","fromSide":"top","toNode":"102f38a3a4354255","toSide":"left","label":"have value and type (like variables)"},
		{"id":"81c738c184843342","fromNode":"92592c85a5dfe21d","fromSide":"top","toNode":"f488e6677db9e675","toSide":"bottom","toEnd":"none"},
		{"id":"67e77e440203a825","fromNode":"8b59d1bbb0cb66ee","fromSide":"right","toNode":"1f85b4794290b394","toSide":"left","toEnd":"none"},
		{"id":"97e0502854345205","fromNode":"8b59d1bbb0cb66ee","fromSide":"bottom","toNode":"b1440605eac69ef4","toSide":"top","label":"The specific operation to be performed is denoted by a symbol"},
		{"id":"3beb9762db935380","fromNode":"8b59d1bbb0cb66ee","fromSide":"left","toNode":"773fce5136881a62","toSide":"right"},
		{"id":"594aa3818b8c37ae","fromNode":"b1440605eac69ef4","fromSide":"bottom","toNode":"7ffce5fff92d0850","toSide":"top"},
		{"id":"c2407219df4378a4","fromNode":"b1440605eac69ef4","fromSide":"bottom","toNode":"29be7bbf8771d48f","toSide":"left"},
		{"id":"37ea062bed7d03bc","fromNode":"b1440605eac69ef4","fromSide":"bottom","toNode":"e635837a64995439","toSide":"left"},
		{"id":"91728c71ab94af9f","fromNode":"773fce5136881a62","fromSide":"top","toNode":"9a2e73432d605253","toSide":"bottom","toEnd":"none"},
		{"id":"86e058d7a089b23f","fromNode":"365b7d3fb507459f","fromSide":"right","toNode":"5301c6ad3492f4f3","toSide":"left","toEnd":"none"},
		{"id":"01ba0a60b4b92244","fromNode":"eed5de6151cdaab5","fromSide":"top","toNode":"8b59d1bbb0cb66ee","toSide":"bottom"},
		{"id":"a372a1755c556af1","fromNode":"15604660598875de","fromSide":"left","toNode":"eeea1f7c403b5793","toSide":"right","toEnd":"none"},
		{"id":"2ed0ed2338fb7e3e","fromNode":"b1440605eac69ef4","fromSide":"bottom","toNode":"365b7d3fb507459f","toSide":"left"},
		{"id":"be754bed4f8681ab","fromNode":"7ffce5fff92d0850","fromSide":"bottom","toNode":"ec4f730dbdaaf19a","toSide":"right"},
		{"id":"8e777abb353f8950","fromNode":"ec4f730dbdaaf19a","fromSide":"left","toNode":"16230eca7bda6774","toSide":"right"},
		{"id":"e3449f8b25d7201a","fromNode":"f0ba7acf60b05fc6","fromSide":"top","toNode":"c7e5dadb2dd26831","toSide":"bottom"},
		{"id":"4d861f7ab548dd9c","fromNode":"c3206cd81cba2293","fromSide":"right","toNode":"5f0fb4e9d61278e0","toSide":"left","toEnd":"none"},
		{"id":"7bd95757765b2847","fromNode":"c3206cd81cba2293","fromSide":"bottom","toNode":"548314d2c6fa1240","toSide":"top"},
		{"id":"f782c20eeecb003a","fromNode":"4de0c4b36474375f","fromSide":"right","toNode":"c3206cd81cba2293","toSide":"left"},
		{"id":"3ef38732924f3edb","fromNode":"54a85eb3b6830698","fromSide":"right","toNode":"380ebd555d850a10","toSide":"left","toEnd":"none"},
		{"id":"1d1362a1723f572e","fromNode":"548314d2c6fa1240","fromSide":"bottom","toNode":"54a85eb3b6830698","toSide":"top"},
		{"id":"8f06af64b53dc2a1","fromNode":"a3d07ed4029a6f03","fromSide":"right","toNode":"54a85eb3b6830698","toSide":"left"},
		{"id":"4741827fadc0ceca","fromNode":"7ef6000d5beac15d","fromSide":"right","toNode":"54a85eb3b6830698","toSide":"left"},
		{"id":"324ff976f76202ef","fromNode":"ad7d577c0e9d6168","fromSide":"bottom","toNode":"64c1095b3aa5ae62","toSide":"top"},
		{"id":"70af5ad0bd397de8","fromNode":"0f44bff96aebb9a4","fromSide":"right","toNode":"ad7d577c0e9d6168","toSide":"left","toEnd":"none"},
		{"id":"b938508a15957df3","fromNode":"7ef6000d5beac15d","fromSide":"right","toNode":"0f44bff96aebb9a4","toSide":"left"},
		{"id":"7873aeeda1a6607c","fromNode":"236415b49f3d7bd0","fromSide":"bottom","toNode":"2fadd07ae7d8ab51","toSide":"top"},
		{"id":"ccca023b236c7459","fromNode":"236415b49f3d7bd0","fromSide":"bottom","toNode":"c3206cd81cba2293","toSide":"top"},
		{"id":"e998034b686f8894","fromNode":"de134d776810d12f","fromSide":"top","toNode":"b9f151998dabe7f3","toSide":"bottom"},
		{"id":"1b2d90db0c204b76","fromNode":"b9f151998dabe7f3","fromSide":"top","toNode":"62f42842d32f5d38","toSide":"bottom","label":"="},
		{"id":"ff8897986676f327","fromNode":"62f42842d32f5d38","fromSide":"top","toNode":"f2d9bc78016e7681","toSide":"bottom"},
		{"id":"26d2e87f862ad630","fromNode":"7ffce5fff92d0850","fromSide":"bottom","toNode":"9694043f2fc16054","toSide":"left"},
		{"id":"cca3fb9a1021136d","fromNode":"7ffce5fff92d0850","fromSide":"left","toNode":"034ecf51b65fbfb4","toSide":"right"},
		{"id":"3456bd30547c3134","fromNode":"de134d776810d12f","fromSide":"top","toNode":"36be359dc4837cf3","toSide":"left"},
		{"id":"96956416460b7ed8","fromNode":"034ecf51b65fbfb4","fromSide":"left","toNode":"36be359dc4837cf3","toSide":"right"},
		{"id":"e30c4dd55322c0b1","fromNode":"36be359dc4837cf3","fromSide":"top","toNode":"5b4c5d61c155c51c","toSide":"bottom"},
		{"id":"c257498ace352b91","fromNode":"b3b52d5debe52647","fromSide":"bottom","toNode":"273d94d9b3062119","toSide":"top","toEnd":"none"},
		{"id":"cc1e9ae37a895678","fromNode":"b873aa366261f219","fromSide":"bottom","toNode":"b3b52d5debe52647","toSide":"top"},
		{"id":"951013f0b233d34b","fromNode":"78f83988416a2fb9","fromSide":"bottom","toNode":"15604660598875de","toSide":"right"},
		{"id":"357ba97ef24dbe2a","fromNode":"78f83988416a2fb9","fromSide":"bottom","toNode":"eed5de6151cdaab5","toSide":"top"},
		{"id":"a18a69c85b646abf","fromNode":"585b028976626966","fromSide":"right","toNode":"915d52e55690f213","toSide":"left","toEnd":"none"},
		{"id":"1de3741ad4831677","fromNode":"ba090d0585c9b810","fromSide":"bottom","toNode":"585b028976626966","toSide":"left"},
		{"id":"baf71f0918a84302","fromNode":"ba090d0585c9b810","fromSide":"bottom","toNode":"8da4984e855afc2e","toSide":"left"},
		{"id":"40ca276da67d7177","fromNode":"8da4984e855afc2e","fromSide":"right","toNode":"bb7782fb204fcb3a","toSide":"left","toEnd":"none"},
		{"id":"16f54bc8aa22a743","fromNode":"8da4984e855afc2e","fromSide":"bottom","toNode":"e6aa81c3f47f955a","toSide":"left"},
		{"id":"c6be11a930d2cf2d","fromNode":"e6aa81c3f47f955a","fromSide":"right","toNode":"d625838cbcbea0fb","toSide":"left","label":"called"},
		{"id":"c8bed443b4fdcd89","fromNode":"d625838cbcbea0fb","fromSide":"right","toNode":"5b338216769b2b1d","toSide":"left"},
		{"id":"33a2073c8784d98d","fromNode":"2f3a01cd722afc87","fromSide":"bottom","toNode":"ba090d0585c9b810","toSide":"top","label":"(Chapter 2 topics)"},
		{"id":"88f44553954659d4","fromNode":"8da4984e855afc2e","fromSide":"bottom","toNode":"4d4206da16253d33","toSide":"left"},
		{"id":"2c19630fa03a4693","fromNode":"d625838cbcbea0fb","fromSide":"bottom","toNode":"4d4206da16253d33","toSide":"top"},
		{"id":"e4a3787dd7ce4bc6","fromNode":"4d4206da16253d33","fromSide":"right","toNode":"9165fc239cf6e54c","toSide":"left"},
		{"id":"345d734adc915c6c","fromNode":"d56ba826851f769d","fromSide":"top","toNode":"8da4984e855afc2e","toSide":"left"},
		{"id":"65fd4728aeae0bc0","fromNode":"8da4984e855afc2e","fromSide":"bottom","toNode":"bc6772eaee32523f","toSide":"right"},
		{"id":"b64581797969d57a","fromNode":"bc6772eaee32523f","fromSide":"top","toNode":"d56ba826851f769d","toSide":"bottom"},
		{"id":"91d29ad895d1e808","fromNode":"bc6772eaee32523f","fromSide":"left","toNode":"359ed2bef86a2c9b","toSide":"right"},
		{"id":"a315778cea61f267","fromNode":"8da4984e855afc2e","fromSide":"bottom","toNode":"0e89d72626208bcf","toSide":"left"},
		{"id":"2097682f7a732f8a","fromNode":"0e89d72626208bcf","fromSide":"right","toNode":"c44e27dba60b0d8d","toSide":"left","toEnd":"none"}
	]
}